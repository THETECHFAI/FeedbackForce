{"ast":null,"code":"var _jsxFileName = \"/Users/faisalshariff/Feedback Force/src/components/UserResearchNetwork.js\",\n  _s = $RefreshSig$();\n// UserResearchNetwork.js\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { classifyFeedback, generateFeatureIdeas, analyzeSentiment } from '../services/openaiService';\nimport FeedbackImporter from './FeedbackImporter';\nimport { processFeedbackData, importFeedbackData } from '../utils/importData';\nimport Legend from './Legend';\nimport Navigation from './Navigation';\nimport Header from './Header';\nimport AppHeader from './AppHeader';\n\n// Color scale for node types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colorScale = d3.scaleOrdinal().domain([\"theme\", \"feedback-positive\", \"feedback-neutral\", \"feedback-negative\", \"feedback\", \"persona\"]).range([\"#3182CE\", \"#38A169\", \"#A0AEC0\", \"#E53E3E\", \"#38A169\", \"#DD6B20\"]); // Blue, Green, Gray, Red, Green, Orange\n\n// Initial data structure\nconst initialData = {\n  nodes: [{\n    id: \"theme1\",\n    name: \"Performance\",\n    type: \"theme\",\n    feedbackCount: 10\n  }, {\n    id: \"theme2\",\n    name: \"User Interface\",\n    type: \"theme\",\n    feedbackCount: 8\n  }, {\n    id: \"theme3\",\n    name: \"Mobile Experience\",\n    type: \"theme\",\n    feedbackCount: 6\n  }, {\n    id: \"persona1\",\n    name: \"Data Analyst\",\n    type: \"persona\"\n  }, {\n    id: \"persona2\",\n    name: \"Marketing Manager\",\n    type: \"persona\"\n  }, {\n    id: \"feature1\",\n    name: \"Performance Optimization\",\n    type: \"feature\",\n    priority: \"High\"\n  }],\n  links: [{\n    source: \"theme1\",\n    target: \"persona1\",\n    strength: 0.7\n  }, {\n    source: \"theme2\",\n    target: \"persona1\",\n    strength: 0.5\n  }, {\n    source: \"theme1\",\n    target: \"feature1\",\n    strength: 0.8\n  }, {\n    source: \"persona1\",\n    target: \"feature1\",\n    strength: 0.6\n  }]\n};\n\n// Main component\nconst UserResearchNetwork = ({\n  // existing props\n  graphData\n  // other props\n}) => {\n  _s();\n  // Refs\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const zoomRef = useRef(null);\n  const simulationRef = useRef(null);\n\n  // State\n  const [dimensions, setDimensions] = useState({\n    width: 800,\n    height: 600\n  });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [highlightMode, setHighlightMode] = useState('none');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Search state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n\n  // AI state\n  const [isAIProcessing, setIsAIProcessing] = useState(false);\n  const [aiError, setAIError] = useState(null);\n  const [feedbackItems, setFeedbackItems] = useState([]);\n  const [showAIInsightsPanel, setShowAIInsightsPanel] = useState(false);\n  const [aiInsights, setAIInsights] = useState({\n    results: []\n  });\n  const [isPanelCollapsed, setIsPanelCollapsed] = useState(false);\n  const [panelWidth, setPanelWidth] = useState(320);\n  const [insights, setInsights] = useState([]);\n  const [analyticsData, setAnalyticsData] = useState(null);\n\n  // Add these state variables back\n  const [showMiniMap, setShowMiniMap] = useState(true);\n\n  // Add these debug effect hooks at the top level\n  useEffect(() => {\n    console.log(\"showAIInsightsPanel value changed:\", showAIInsightsPanel);\n  }, [showAIInsightsPanel]);\n  useEffect(() => {\n    if (showAIInsightsPanel && aiInsights) {\n      console.log(\"AI Insights Panel content:\", aiInsights);\n    }\n  }, [showAIInsightsPanel, aiInsights]);\n\n  // MiniMap implementation - define this before any useEffects that use it\n  const createMiniMap = useCallback(() => {\n    if (!svgRef.current || !graphData.nodes || graphData.nodes.length === 0) return () => {};\n    const svg = d3.select(svgRef.current);\n\n    // Remove any existing mini-map\n    svg.selectAll(\".mini-map-container\").remove();\n\n    // Calculate mini-map size based on the main SVG dimensions\n    const miniMapSize = Math.min(dimensions.width, dimensions.height) * 0.25;\n    const miniMapMargin = 20;\n\n    // Create a container for the mini-map\n    const miniMapContainer = svg.append(\"g\").attr(\"class\", \"mini-map-container\").attr(\"transform\", `translate(${miniMapMargin}, ${miniMapMargin})`);\n\n    // Add a background rectangle\n    miniMapContainer.append(\"rect\").attr(\"width\", miniMapSize).attr(\"height\", miniMapSize).attr(\"fill\", \"#f0f4f8\").attr(\"fill-opacity\", 0.9).attr(\"stroke\", \"#3182CE\").attr(\"stroke-width\", 2).attr(\"rx\", 6);\n\n    // Create a separate mini-map simulation\n    const miniMapNodes = graphData.nodes.map(node => ({\n      ...node,\n      miniX: Math.random() * miniMapSize,\n      miniY: Math.random() * miniMapSize\n    }));\n\n    // Create links array with proper source/target references\n    const miniMapLinks = graphData.links.map(link => {\n      // Extract source and target IDs consistently\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return {\n        source: sourceId,\n        target: targetId\n      };\n    }).filter(link => {\n      // Filter out links with invalid source or target\n      return miniMapNodes.some(n => n.id === link.source) && miniMapNodes.some(n => n.id === link.target);\n    });\n\n    // Create a separate force simulation just for the mini-map\n    const miniMapSimulation = d3.forceSimulation(miniMapNodes).force(\"link\", d3.forceLink(miniMapLinks).id(d => d.id).distance(5)).force(\"charge\", d3.forceManyBody().strength(-20)).force(\"center\", d3.forceCenter(miniMapSize / 2, miniMapSize / 2)).force(\"collide\", d3.forceCollide().radius(4));\n\n    // Add mini-map links\n    const miniLinks = miniMapContainer.selectAll(\".mini-link\").data(miniMapLinks).enter().append(\"line\").attr(\"class\", \"mini-link\").attr(\"stroke\", \"#ccc\").attr(\"stroke-width\", 0.5);\n\n    // Add mini-map nodes\n    const miniNodes = miniMapContainer.selectAll(\".mini-node\").data(miniMapNodes).enter().append(\"circle\").attr(\"class\", \"mini-node\").attr(\"r\", 3).attr(\"fill\", d => {\n      // Use the same color scale but with higher opacity\n      const baseColor = colorScale(d.type);\n      return d3.color(baseColor).brighter(0.3);\n    }).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1);\n\n    // Add a label\n    miniMapContainer.append(\"text\").attr(\"x\", 10).attr(\"y\", 15).attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").attr(\"fill\", \"#2D3748\").text(\"Network Overview\");\n\n    // Add a border to show the current viewport\n    const viewportRect = miniMapContainer.append(\"rect\").attr(\"class\", \"mini-map-viewport\").attr(\"width\", miniMapSize).attr(\"height\", miniMapSize).attr(\"fill\", \"none\").attr(\"stroke\", \"#3182ce\").attr(\"stroke-width\", 2).attr(\"stroke-dasharray\", \"4,4\");\n\n    // Run the mini-map simulation for a fixed number of ticks\n    miniMapSimulation.stop();\n    for (let i = 0; i < 300; i++) {\n      miniMapSimulation.tick();\n    }\n\n    // Update the mini-map nodes with their final positions\n    miniLinks.attr(\"x1\", d => {\n      const source = miniMapNodes.find(n => n.id === d.source);\n      return source ? source.miniX : 0;\n    }).attr(\"y1\", d => {\n      const source = miniMapNodes.find(n => n.id === d.source);\n      return source ? source.miniY : 0;\n    }).attr(\"x2\", d => {\n      const target = miniMapNodes.find(n => n.id === d.target);\n      return target ? target.miniX : 0;\n    }).attr(\"y2\", d => {\n      const target = miniMapNodes.find(n => n.id === d.target);\n      return target ? target.miniY : 0;\n    });\n    miniNodes.attr(\"cx\", d => d.miniX).attr(\"cy\", d => d.miniY);\n\n    // Add click behavior\n    miniMapContainer.append(\"rect\").attr(\"width\", miniMapSize).attr(\"height\", miniMapSize).attr(\"fill\", \"transparent\").attr(\"stroke\", \"none\").style(\"cursor\", \"pointer\").on(\"click\", event => {\n      if (!zoomRef.current) return;\n\n      // Get click position relative to mini-map\n      const [x, y] = d3.pointer(event);\n\n      // Calculate the center point in the main view\n      const centerX = x / miniMapSize * dimensions.width;\n      const centerY = y / miniMapSize * dimensions.height;\n\n      // Create a transform that centers on the clicked point\n      const transform = d3.zoomIdentity.translate(dimensions.width / 2, dimensions.height / 2).scale(1).translate(-centerX, -centerY);\n\n      // Apply the transform with a smooth transition\n      svg.transition().duration(750).call(zoomRef.current.transform, transform);\n    });\n\n    // Return cleanup function\n    return () => {\n      svg.selectAll(\".mini-map-container\").remove();\n      if (miniMapSimulation) miniMapSimulation.stop();\n    };\n  }, [dimensions, graphData, colorScale]);\n\n  // Simulate loading data on initial render - without createMiniMap dependency\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Add a separate effect to create the mini-map after loading\n  useEffect(() => {\n    if (!loading && showMiniMap && svgRef.current) {\n      const timer = setTimeout(() => {\n        createMiniMap();\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [loading, showMiniMap, dimensions]);\n\n  // Create a minimap when needed\n  useEffect(() => {\n    // Only create minimap if the SVG ref exists, dimensions are valid, and showMiniMap is true\n    if (svgRef.current && dimensions.width > 0 && dimensions.height > 0 && showMiniMap) {\n      // Remove any existing mini-map first to prevent duplicates\n      d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n      const cleanupMiniMap = createMiniMap();\n      return cleanupMiniMap;\n    } else {\n      // Clean up any existing mini-map if showMiniMap is false\n      d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n    }\n  }, [showMiniMap, graphData, dimensions.width, dimensions.height, selectedNode]);\n\n  // Update dimensions when window resizes\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const updateDimensions = () => {\n      if (containerRef.current) {\n        const {\n          width,\n          height\n        } = containerRef.current.getBoundingClientRect();\n        setDimensions({\n          width,\n          height\n        });\n      }\n    };\n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        const {\n          width,\n          height\n        } = entry.contentRect;\n        setDimensions({\n          width,\n          height\n        });\n      }\n    });\n    resizeObserver.observe(containerRef.current);\n    updateDimensions();\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  // Adjust container dimensions when panel is open\n  useEffect(() => {\n    if (containerRef.current) {\n      const containerWidth = containerRef.current.clientWidth;\n      const containerHeight = containerRef.current.clientHeight;\n\n      // Adjust dimensions based on panel state\n      if (showAIInsightsPanel && !isPanelCollapsed) {\n        // Reduce width to make room for the panel\n        setDimensions({\n          width: containerWidth - panelWidth,\n          height: containerHeight\n        });\n      } else {\n        // Use full width\n        setDimensions({\n          width: containerWidth,\n          height: containerHeight\n        });\n      }\n    }\n  }, [showAIInsightsPanel, isPanelCollapsed, panelWidth]);\n\n  // Recenter view when panel state changes\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      centerView();\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [showAIInsightsPanel, isPanelCollapsed]);\n\n  // Recalculate feedback counts when feedback items change\n  useEffect(() => {\n    if (feedbackItems.length > 0) {\n      recalculateFeedbackCounts();\n    }\n  }, [feedbackItems]);\n\n  // Main visualization rendering effect\n  useEffect(() => {\n    if (!svgRef.current || !dimensions.width || !dimensions.height) return;\n    console.log(\"Rendering with data:\", graphData);\n\n    // Clear the SVG\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    // Create a container group for all elements\n    const g = svg.append(\"g\");\n\n    // Set up zoom behavior\n    const zoom = d3.zoom().scaleExtent([0.1, 4]).on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    zoomRef.current = zoom;\n\n    // Verify we have valid data\n    if (!graphData.nodes || !graphData.links || !Array.isArray(graphData.nodes) || !Array.isArray(graphData.links) || graphData.nodes.length === 0) {\n      console.error(\"Invalid or empty graph data:\", graphData);\n      return;\n    }\n\n    // Create working copies of the data with proper link references\n    const nodes = graphData.nodes.map(node => ({\n      ...node\n    }));\n\n    // Normalize links to ensure proper format for D3\n    const normalizedLinks = graphData.links.map(link => {\n      // Extract source and target IDs consistently\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n\n      // Return a new link object with just IDs (D3 will convert to objects)\n      return {\n        source: sourceId,\n        target: targetId,\n        strength: link.strength || 0.5\n      };\n    });\n\n    // Verify all links have valid source and target nodes\n    const validLinks = normalizedLinks.filter(link => {\n      const sourceExists = nodes.some(node => node.id === link.source);\n      const targetExists = nodes.some(node => node.id === link.target);\n      if (!sourceExists) console.warn(`Link has invalid source: ${link.source}`);\n      if (!targetExists) console.warn(`Link has invalid target: ${link.target}`);\n      return sourceExists && targetExists;\n    });\n    console.log(`Found ${validLinks.length} valid links out of ${normalizedLinks.length}`);\n\n    // Create the force simulation with strong link forces\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(validLinks).id(d => d.id).distance(100).strength(1)) // Stronger link force for better connections\n    .force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(dimensions.width / 2, dimensions.height / 2)).force(\"collide\", d3.forceCollide(30));\n    simulationRef.current = simulation;\n\n    // Create the links\n    const link = g.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(validLinks).enter().append(\"line\").attr(\"stroke-width\", d => Math.max(2, d.strength * 6)).attr(\"stroke\", \"#ccc\").attr(\"opacity\", d => {\n      // Apply opacity to links based on highlight mode\n      if (highlightMode === 'none') return 0.8; // Default opacity\n\n      // Get source and target node objects\n      const sourceNode = typeof d.source === 'object' ? d.source : nodes.find(n => n.id === d.source);\n      const targetNode = typeof d.target === 'object' ? d.target : nodes.find(n => n.id === d.target);\n      if (!sourceNode || !targetNode) return 0.2; // Fade out if invalid link\n\n      // Highlight links between nodes of the highlighted type\n      if (highlightMode === 'themes' && (sourceNode.type === 'theme' || targetNode.type === 'theme')) {\n        return 1.0;\n      }\n      if (highlightMode === 'feedback' && (sourceNode.type === 'feedback' || targetNode.type === 'feedback')) {\n        return 1.0;\n      }\n      if (highlightMode === 'personas' && (sourceNode.type === 'persona' || targetNode.type === 'persona')) {\n        return 1.0;\n      }\n      return 0.2; // Fade out non-highlighted links\n    });\n\n    // Create the nodes\n    const node = g.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"g\").data(nodes).enter().append(\"g\").call(d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended)).on(\"click\", (event, d) => {\n      // Prevent text selection\n      event.preventDefault();\n      document.getSelection().removeAllRanges();\n\n      // Call the node click handler\n      handleNodeClick(d, event);\n    });\n\n    // Add circles to nodes with appropriate colors\n    node.append(\"circle\").attr(\"r\", d => {\n      if (d.type === \"theme\") return 20 + d.feedbackCount / 2;\n      if (d.type === \"persona\") return 15;\n      return 10; // Smaller feedback nodes\n    }).attr(\"fill\", d => {\n      // Update this section to use sentiment-based coloring for feedback nodes\n      if (d.type === \"feedback\") {\n        if (d.sentiment === \"Positive\") return colorScale(\"feedback-positive\");\n        if (d.sentiment === \"Negative\") return colorScale(\"feedback-negative\");\n        return colorScale(\"feedback-neutral\"); // Default to neutral if sentiment is not set or is \"Neutral\"\n      }\n      return colorScale(d.type);\n    }).attr(\"stroke\", d => {\n      // Add a special stroke to highlighted nodes\n      if (highlightMode !== 'none') {\n        if (highlightMode === 'themes' && d.type === 'theme') {\n          return \"#FFD700\"; // Gold stroke for highlighted theme nodes\n        }\n        if (highlightMode === 'feedback' && d.type === 'feedback') {\n          return \"#FFD700\"; // Gold stroke for highlighted feedback nodes\n        }\n        if (highlightMode === 'personas' && d.type === 'persona') {\n          return \"#FFD700\"; // Gold stroke for highlighted persona nodes\n        }\n      }\n      return \"#fff\"; // Default white stroke\n    }).attr(\"stroke-width\", d => {\n      // Thicker stroke for highlighted nodes\n      if (highlightMode !== 'none') {\n        if (highlightMode === 'themes' && d.type === 'theme') return 3;\n        if (highlightMode === 'feedback' && d.type === 'feedback') return 3;\n        if (highlightMode === 'personas' && d.type === 'persona') return 3;\n      }\n      return 2; // Default stroke width\n    }).attr(\"opacity\", d => {\n      // Apply opacity to nodes based on highlight mode\n      if (highlightMode === 'none') return 1.0; // Full opacity if no highlighting\n\n      // Highlight specific node types\n      if (highlightMode === 'themes' && d.type === 'theme') return 1.0;\n      if (highlightMode === 'feedback' && d.type === 'feedback') return 1.0;\n      if (highlightMode === 'personas' && d.type === 'persona') return 1.0;\n      return 0.3; // Fade out non-highlighted nodes\n    });\n\n    // Add labels with better positioning\n    node.append(\"text\").text(d => d.name).attr(\"x\", 0).attr(\"y\", d => {\n      if (d.type === \"theme\") return 30 + d.feedbackCount / 2;\n      if (d.type === \"persona\") return 25;\n      return 22; // Position feedback labels\n    }).attr(\"text-anchor\", \"middle\").attr(\"font-size\", d => d.type === \"feedback\" ? \"10px\" : \"12px\") // Smaller text for feedback\n    .attr(\"fill\", d => {\n      // Make text more visible for highlighted nodes\n      if (highlightMode !== 'none') {\n        if (highlightMode === 'themes' && d.type === 'theme') return \"#000\";\n        if (highlightMode === 'feedback' && d.type === 'feedback') return \"#000\";\n        if (highlightMode === 'personas' && d.type === 'persona') return \"#000\";\n        return \"#999\"; // Faded text for non-highlighted nodes\n      }\n      return \"#333\"; // Default text color\n    }).attr(\"opacity\", d => {\n      // Match opacity with the node circles\n      if (highlightMode === 'none') return 1.0;\n      if (highlightMode === 'themes' && d.type === 'theme') return 1.0;\n      if (highlightMode === 'feedback' && d.type === 'feedback') return 1.0;\n      if (highlightMode === 'personas' && d.type === 'persona') return 1.0;\n      return 0.3;\n    });\n\n    // Add title for tooltip that shows full feedback text\n    node.append(\"title\").text(d => d.type === \"feedback\" ? d.title : d.name);\n\n    // Run a few ticks before adding listener to get nodes in better positions\n    for (let i = 0; i < 20; i++) {\n      simulation.tick();\n    }\n\n    // Update link positions immediately with node positions from simulation ticks\n    link.attr(\"x1\", d => {\n      const source = nodes.find(n => n.id === d.source);\n      return source ? source.x : 0;\n    }).attr(\"y1\", d => {\n      const source = nodes.find(n => n.id === d.source);\n      return source ? source.y : 0;\n    }).attr(\"x2\", d => {\n      const target = nodes.find(n => n.id === d.target);\n      return target ? target.x : 0;\n    }).attr(\"y2\", d => {\n      const target = nodes.find(n => n.id === d.target);\n      return target ? target.y : 0;\n    });\n\n    // Now add the tick listener for ongoing updates\n    simulation.on(\"tick\", () => {\n      link.attr(\"x1\", d => {\n        // Handle both ID and object references\n        const sourceId = typeof d.source === 'object' ? d.source.id : d.source;\n        const source = nodes.find(n => n.id === sourceId);\n        return source ? source.x : 0;\n      }).attr(\"y1\", d => {\n        const sourceId = typeof d.source === 'object' ? d.source.id : d.source;\n        const source = nodes.find(n => n.id === sourceId);\n        return source ? source.y : 0;\n      }).attr(\"x2\", d => {\n        const targetId = typeof d.target === 'object' ? d.target.id : d.target;\n        const target = nodes.find(n => n.id === targetId);\n        return target ? target.x : 0;\n      }).attr(\"y2\", d => {\n        const targetId = typeof d.target === 'object' ? d.target.id : d.target;\n        const target = nodes.find(n => n.id === targetId);\n        return target ? target.y : 0;\n      });\n      node.attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n    });\n\n    // Drag functions\n    function dragstarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n\n      // Only release the node if it's not the selected node\n      if (!selectedNode || selectedNode.id !== d.id) {\n        d.fx = null;\n        d.fy = null;\n      }\n    }\n\n    // Center the view\n    svg.call(zoom.transform, d3.zoomIdentity.translate(dimensions.width / 2 - dimensions.width * 0.5, dimensions.height / 2 - dimensions.height * 0.5).scale(0.8));\n\n    // Clean up on unmount\n    return () => {\n      simulation.stop();\n    };\n  }, [dimensions, graphData, highlightMode, selectedNode]);\n\n  // Recalculate feedback counts based on graph connections\n  const recalculateFeedbackCounts = useCallback(() => {\n    // Create a map to track feedback counts\n    const feedbackCounts = {\n      themes: {},\n      personas: {},\n      features: {}\n    };\n\n    // Count feedback for each node type based on connections\n    graphData.links.forEach(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      const sourceNode = graphData.nodes.find(n => n.id === sourceId);\n      const targetNode = graphData.nodes.find(n => n.id === targetId);\n      if (!sourceNode || !targetNode) return;\n\n      // Count theme connections\n      if (sourceNode.type === \"theme\" && targetNode.type === \"feedback\") {\n        feedbackCounts.themes[sourceNode.id] = (feedbackCounts.themes[sourceNode.id] || 0) + 1;\n      } else if (targetNode.type === \"theme\" && sourceNode.type === \"feedback\") {\n        feedbackCounts.themes[targetNode.id] = (feedbackCounts.themes[targetNode.id] || 0) + 1;\n      }\n\n      // Count persona connections\n      if (sourceNode.type === \"persona\" && targetNode.type === \"feedback\") {\n        feedbackCounts.personas[sourceNode.id] = (feedbackCounts.personas[sourceNode.id] || 0) + 1;\n      } else if (targetNode.type === \"persona\" && sourceNode.type === \"feedback\") {\n        feedbackCounts.personas[targetNode.id] = (feedbackCounts.personas[targetNode.id] || 0) + 1;\n      }\n    });\n\n    // Update node feedback counts\n    const updatedNodes = graphData.nodes.map(node => {\n      if (node.type === \"theme\" && feedbackCounts.themes[node.id]) {\n        return {\n          ...node,\n          feedbackCount: feedbackCounts.themes[node.id]\n        };\n      }\n      if (node.type === \"persona\" && feedbackCounts.personas[node.id]) {\n        return {\n          ...node,\n          feedbackCount: feedbackCounts.personas[node.id]\n        };\n      }\n      return node;\n    });\n\n    // Update the graph data\n    setGraphData(prevData => ({\n      ...prevData,\n      nodes: updatedNodes\n    }));\n  }, [graphData]);\n\n  // Import data from file with more robust processing\n  const importData = useCallback(event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setLoading(true);\n    setError(null);\n    console.log(\"Starting import from file:\", file.name);\n\n    // Use our async utility function\n    importFeedbackData(file).then(async importedData => {\n      console.log(\"Processed import data:\", importedData);\n\n      // Process feedback nodes for sentiment analysis\n      const feedbackNodes = importedData.nodes.filter(node => node.type === 'feedback' && !node.sentiment);\n\n      // If we have feedback nodes without sentiment, analyze them\n      if (feedbackNodes.length > 0) {\n        setIsAIProcessing(true);\n\n        // Process in batches to avoid overwhelming the API\n        const batchSize = 5;\n        for (let i = 0; i < feedbackNodes.length; i += batchSize) {\n          const batch = feedbackNodes.slice(i, i + batchSize);\n\n          // Process each node in the batch\n          await Promise.all(batch.map(async node => {\n            try {\n              const feedbackText = node.text || node.fullText || node.name || \"\";\n              const result = await analyzeSentiment(feedbackText);\n              node.sentiment = result.sentiment;\n            } catch (error) {\n              console.warn(`Error analyzing sentiment for node ${node.id}:`, error);\n              node.sentiment = \"Neutral\"; // Fallback\n            }\n          }));\n        }\n        setIsAIProcessing(false);\n      }\n\n      // Ensure node structure is compatible with visualization\n      const processedNodes = importedData.nodes.map(node => {\n        // Make sure each node has the essential properties\n        return {\n          ...node,\n          // Ensure these critical properties exist\n          id: node.id,\n          name: node.name || node.label || \"Unnamed\",\n          type: node.type || \"theme\",\n          // Add appropriate properties based on type\n          ...(node.type === 'theme' ? {\n            feedbackCount: node.feedbackCount || 5\n          } : {}),\n          ...(node.type === 'feature' ? {\n            priority: node.priority || 'Medium'\n          } : {})\n        };\n      });\n\n      // Update analytics data with sentiment distribution\n      const sentimentCounts = processedNodes.filter(node => node.type === 'feedback' && node.sentiment).reduce((counts, node) => {\n        counts[node.sentiment] = (counts[node.sentiment] || 0) + 1;\n        return counts;\n      }, {});\n      const updatedAnalytics = {\n        ...importedData.analytics,\n        sentimentDistribution: sentimentCounts\n      };\n      setGraphData({\n        nodes: processedNodes,\n        links: importedData.links || []\n      });\n      setInsights(importedData.insights || []);\n      setAnalyticsData(updatedAnalytics);\n      setLoading(false);\n\n      // Reset any selections and force a re-center\n      setSelectedNode(null);\n      setTimeout(() => {\n        if (zoomRef.current) {\n          const svg = d3.select(svgRef.current);\n          const svgWidth = svg.node().getBoundingClientRect().width;\n          const svgHeight = svg.node().getBoundingClientRect().height;\n          svg.transition().duration(750).call(zoomRef.current.transform, d3.zoomIdentity.translate(svgWidth / 2, svgHeight / 2).scale(0.8));\n        }\n      }, 300);\n    }).catch(error => {\n      console.error(\"Error importing feedback data:\", error);\n      setError(`Error importing file: ${error.message || \"Unknown error\"}`);\n      setLoading(false);\n    });\n  }, []); // Remove fitToScreen from dependencies\n\n  // Helper function for keyword-based theme classification (used as fallback)\n  const mockClassifyFeedback = text => {\n    // Simple keyword-based classification\n    const lowerText = text.toLowerCase();\n    if (lowerText.includes('crash') || lowerText.includes('error') || lowerText.includes('bug')) {\n      return {\n        theme: 'Stability Issues'\n      };\n    } else if (lowerText.includes('slow') || lowerText.includes('performance') || lowerText.includes('timeout')) {\n      return {\n        theme: 'Performance'\n      };\n    } else if (lowerText.includes('mobile') || lowerText.includes('app') || lowerText.includes('phone')) {\n      return {\n        theme: 'Mobile Experience'\n      };\n    } else if (lowerText.includes('ui') || lowerText.includes('interface') || lowerText.includes('design') || lowerText.includes('layout') || lowerText.includes('look')) {\n      return {\n        theme: 'User Interface'\n      };\n    } else if (lowerText.includes('report') || lowerText.includes('dashboard')) {\n      return {\n        theme: 'Reporting & Analytics'\n      };\n    } else if (lowerText.includes('export') || lowerText.includes('excel') || lowerText.includes('pdf')) {\n      return {\n        theme: 'Data Export & Import'\n      };\n    } else if (lowerText.includes('search') || lowerText.includes('filter') || lowerText.includes('find')) {\n      return {\n        theme: 'Search & Navigation'\n      };\n    }\n    return {\n      theme: 'General Feedback'\n    };\n  };\n\n  // Helper function for feature generation (used as fallback)\n  const mockGenerateFeatureIdeas = theme => {\n    // Generate simple feature ideas based on theme\n    if (theme === 'Stability Issues') {\n      return [{\n        name: 'Crash Prevention & Recovery',\n        priority: 'High'\n      }];\n    } else if (theme === 'Performance') {\n      return [{\n        name: 'Performance Optimization',\n        priority: 'High'\n      }];\n    } else if (theme === 'Mobile Experience') {\n      return [{\n        name: 'Responsive Design Overhaul',\n        priority: 'High'\n      }];\n    } else if (theme === 'User Interface') {\n      return [{\n        name: 'UI Modernization',\n        priority: 'Medium'\n      }];\n    } else if (theme === 'Reporting & Analytics') {\n      return [{\n        name: 'Custom Report Builder',\n        priority: 'High'\n      }];\n    } else if (theme === 'Data Export & Import') {\n      return [{\n        name: 'Enhanced Export Options',\n        priority: 'High'\n      }];\n    } else {\n      return [{\n        name: 'User Experience Improvements',\n        priority: 'Medium'\n      }];\n    }\n  };\n\n  // Process imported feedback with enhanced reliability\n  const processImportedFeedback = useCallback(feedbackItems => {\n    if (!feedbackItems || feedbackItems.length === 0) {\n      setLoading(false);\n      return;\n    }\n    console.log(`Processing ${feedbackItems.length} feedback items...`);\n    setIsAIProcessing(true);\n\n    // Create a new graph structure\n    const newGraph = {\n      nodes: [],\n      links: []\n    };\n\n    // Track created nodes to avoid duplicates\n    const nodeMap = {\n      personas: {},\n      themes: {},\n      features: {}\n    };\n\n    // Step 1: First create all persona nodes from feedback\n    console.log(\"Creating persona nodes...\");\n    feedbackItems.forEach(item => {\n      if (!item.user_role) return;\n      if (!nodeMap.personas[item.user_role]) {\n        const personaId = `persona-${Date.now()}-${Object.keys(nodeMap.personas).length}`;\n        const personaNode = {\n          id: personaId,\n          name: item.user_role,\n          type: \"persona\",\n          feedbackCount: 1\n        };\n        newGraph.nodes.push(personaNode);\n        nodeMap.personas[item.user_role] = personaNode;\n        console.log(`Created persona node: ${item.user_role}`);\n      } else {\n        // Increment feedback count for existing persona\n        nodeMap.personas[item.user_role].feedbackCount += 1;\n      }\n    });\n\n    // Step 2: Process each feedback to identify themes\n    // Use chunks to avoid overwhelming the system\n    console.log(\"Processing feedback to identify themes...\");\n    const processChunks = async () => {\n      const chunkSize = 5; // Process 5 at a time\n      const chunks = [];\n\n      // Split feedback into chunks\n      for (let i = 0; i < feedbackItems.length; i += chunkSize) {\n        chunks.push(feedbackItems.slice(i, i + chunkSize));\n      }\n\n      // Process each chunk\n      for (let i = 0; i < chunks.length; i++) {\n        const chunk = chunks[i];\n        console.log(`Processing chunk ${i + 1} of ${chunks.length}...`);\n\n        // Process items in this chunk\n        for (const item of chunk) {\n          if (!item.text || !item.user_role) continue;\n          try {\n            // Attempt to use the AI classification service\n            console.log(`Classifying: \"${item.text.substring(0, 30)}...\"`);\n            let result;\n            try {\n              // Try AI service first\n              result = await classifyFeedback(item.text);\n              console.log(\"AI classification result:\", result);\n            } catch (aiError) {\n              // If AI fails, use fallback classification\n              console.warn(\"AI classification failed, using fallback:\", aiError);\n              result = mockClassifyFeedback(item.text);\n              console.log(\"Fallback classification result:\", result);\n            }\n            if (result && result.theme) {\n              // Create or update theme node\n              if (!nodeMap.themes[result.theme]) {\n                const themeId = `theme-${Date.now()}-${Object.keys(nodeMap.themes).length}`;\n                const themeNode = {\n                  id: themeId,\n                  name: result.theme,\n                  type: \"theme\",\n                  feedbackCount: 1\n                };\n                newGraph.nodes.push(themeNode);\n                nodeMap.themes[result.theme] = themeNode;\n                console.log(`Created theme node: ${result.theme}`);\n              } else {\n                // Increment existing theme's feedback count\n                nodeMap.themes[result.theme].feedbackCount += 1;\n              }\n\n              // Connect persona to theme\n              const personaNode = nodeMap.personas[item.user_role];\n              const themeNode = nodeMap.themes[result.theme];\n              if (personaNode && themeNode) {\n                // Check if link already exists\n                const linkExists = newGraph.links.some(link => link.source === personaNode.id && link.target === themeNode.id || link.source === themeNode.id && link.target === personaNode.id);\n                if (!linkExists) {\n                  newGraph.links.push({\n                    source: personaNode.id,\n                    target: themeNode.id,\n                    strength: 0.7\n                  });\n                  console.log(`Connected persona \"${personaNode.name}\" to theme \"${themeNode.name}\"`);\n                }\n              }\n            }\n          } catch (err) {\n            console.error(\"Error processing feedback item:\", err);\n          }\n        }\n\n        // Update graph data every chunk to show progress\n        if (i < chunks.length - 1) {\n          setGraphData({\n            ...newGraph\n          });\n          // Small delay to allow UI to update\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      }\n\n      // Step 3: Generate feature suggestions for top themes\n      console.log(\"Generating feature suggestions...\");\n      const significantThemes = Object.values(nodeMap.themes).filter(theme => theme.feedbackCount >= 2).sort((a, b) => b.feedbackCount - a.feedbackCount).slice(0, 5); // Top 5 themes\n\n      console.log(`Found ${significantThemes.length} significant themes for feature generation`);\n      for (const theme of significantThemes) {\n        try {\n          // Get feedback related to this theme\n          const relatedFeedback = feedbackItems.filter(item => {\n            const text = item.text.toLowerCase();\n            return text.includes(theme.name.toLowerCase());\n          }).map(item => item.text);\n\n          // Generate feature ideas\n          console.log(`Generating features for theme \"${theme.name}\" with ${relatedFeedback.length} feedback items`);\n          let featureIdeas;\n          try {\n            // Try AI service first\n            featureIdeas = await generateFeatureIdeas(theme.name, relatedFeedback);\n            console.log(\"AI generated feature ideas:\", featureIdeas);\n          } catch (aiError) {\n            // If AI fails, use mock generation\n            console.warn(\"AI feature generation failed, using fallback:\", aiError);\n            featureIdeas = mockGenerateFeatureIdeas(theme.name, relatedFeedback);\n            console.log(\"Fallback feature ideas:\", featureIdeas);\n          }\n          if (featureIdeas && featureIdeas.length > 0) {\n            // Create feature nodes\n            for (const idea of featureIdeas) {\n              const featureId = `feature-${Date.now()}-${Object.keys(nodeMap.features).length}`;\n              const featureNode = {\n                id: featureId,\n                name: idea.name,\n                description: idea.description || \"\",\n                type: \"feature\",\n                priority: idea.priority || \"Medium\"\n              };\n              newGraph.nodes.push(featureNode);\n              nodeMap.features[featureNode.name] = featureNode;\n              console.log(`Created feature: ${featureNode.name}`);\n\n              // Link feature to theme\n              newGraph.links.push({\n                source: theme.id,\n                target: featureId,\n                strength: 0.8\n              });\n\n              // Find personas connected to this theme\n              newGraph.links.forEach(link => {\n                const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n                const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n                if (sourceId === theme.id || targetId === theme.id) {\n                  const personaId = sourceId === theme.id ? targetId : sourceId;\n                  const personaNode = newGraph.nodes.find(n => n.id === personaId && n.type === 'persona');\n                  if (personaNode) {\n                    // Link persona to feature\n                    const existingLink = newGraph.links.some(l => l.source === personaId && l.target === featureId || l.source === featureId && l.target === personaId);\n                    if (!existingLink) {\n                      newGraph.links.push({\n                        source: personaId,\n                        target: featureId,\n                        strength: 0.6\n                      });\n                      console.log(`Connected persona \"${personaNode.name}\" to feature \"${featureNode.name}\"`);\n                    }\n                  }\n                }\n              });\n            }\n          }\n        } catch (err) {\n          console.error(`Error generating features for theme \"${theme.name}\":`, err);\n        }\n      }\n\n      // Ensure we have at least some features if none were generated\n      if (newGraph.nodes.filter(n => n.type === 'feature').length === 0) {\n        console.log(\"No features were generated - creating fallback features\");\n\n        // Create a fallback feature for each major theme\n        for (const theme of significantThemes.slice(0, 3)) {\n          const featureId = `feature-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n          const featureNode = {\n            id: featureId,\n            name: `${theme.name} Improvement`,\n            type: \"feature\",\n            priority: theme.feedbackCount >= 5 ? \"High\" : \"Medium\",\n            fallback: true\n          };\n          newGraph.nodes.push(featureNode);\n          console.log(`Created fallback feature: ${featureNode.name}`);\n\n          // Link to theme\n          newGraph.links.push({\n            source: theme.id,\n            target: featureId,\n            strength: 0.8\n          });\n        }\n      }\n\n      // Final graph update\n      console.log(\"Finalizing graph...\");\n      console.log(\"Final graph has:\", newGraph.nodes.length, \"nodes and\", newGraph.links.length, \"links\");\n      console.log(\"Nodes by type:\", {\n        personas: newGraph.nodes.filter(n => n.type === 'persona').length,\n        themes: newGraph.nodes.filter(n => n.type === 'theme').length,\n        features: newGraph.nodes.filter(n => n.type === 'feature').length\n      });\n      setGraphData(newGraph);\n\n      // Pre-compute positions for better visualization\n      setTimeout(() => {\n        if (simulationRef.current) {\n          simulationRef.current.stop();\n\n          // Create a temporary simulation to calculate positions\n          const tempSimulation = d3.forceSimulation(newGraph.nodes).force(\"link\", d3.forceLink(newGraph.links).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(dimensions.width / 2, dimensions.height / 2)).force(\"collide\", d3.forceCollide(40));\n\n          // Run several ticks to get a good initial layout\n          for (let i = 0; i < 100; i++) {\n            tempSimulation.tick();\n          }\n          tempSimulation.stop();\n        }\n        setIsAIProcessing(false);\n        setLoading(false);\n        console.log(\"Import processing complete\");\n      }, 100);\n    };\n\n    // Start the processing\n    processChunks().catch(err => {\n      console.error(\"Error in processChunks:\", err);\n      setError(\"Error processing feedback. Please try again.\");\n      setIsAIProcessing(false);\n      setLoading(false);\n    });\n  }, [dimensions]);\n\n  // Update the handleNodeClick function to properly handle all node types with complete data\n  const handleNodeClick = useCallback((node, event) => {\n    if (!node) return;\n\n    // Prevent text selection and set up the node selection\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (window.getSelection) {\n        window.getSelection().removeAllRanges();\n      }\n    }\n    console.log(\"Node clicked, setting panel visible:\", node);\n    setSelectedNode(node);\n\n    // Find connected nodes\n    const connectedLinks = graphData.links.filter(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === node.id || targetId === node.id;\n    });\n    const connectedNodeIds = connectedLinks.map(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === node.id ? targetId : sourceId;\n    });\n    const connectedNodes = graphData.nodes.filter(n => connectedNodeIds.includes(n.id));\n    if (node.type === 'theme') {\n      // Theme node view - collect all relevant data\n      const connectedFeedback = connectedNodes.filter(n => n.type === \"feedback\" || n.type.startsWith(\"feedback\"));\n      const connectedPersonas = connectedNodes.filter(n => n.type === \"persona\");\n      const sentimentCount = {\n        Positive: connectedFeedback.filter(n => n.sentiment === \"Positive\" || n.type === \"feedback-positive\").length,\n        Negative: connectedFeedback.filter(n => n.sentiment === \"Negative\" || n.type === \"feedback-negative\").length,\n        Neutral: connectedFeedback.filter(n => n.sentiment === \"Neutral\" || n.type !== \"feedback-positive\" && n.type !== \"feedback-negative\").length\n      };\n\n      // Example feedback for this theme (get full text)\n      const exampleFeedback = connectedFeedback.slice(0, 3).map(f => ({\n        text: f.fullText || f.originalText || f.completeText || f.text || f.content || f.feedback || f.description || f.name || \"\",\n        sentiment: f.sentiment || (f.type === \"feedback-positive\" ? \"Positive\" : f.type === \"feedback-negative\" ? \"Negative\" : \"Neutral\")\n      }));\n      setAIInsights({\n        isThemeView: true,\n        isPersonaView: false,\n        isFeedbackView: false,\n        theme: node.name,\n        feedbackCount: connectedFeedback.length,\n        sentimentDistribution: sentimentCount,\n        personas: connectedPersonas.map(p => p.name),\n        exampleFeedback: exampleFeedback,\n        insights: node.insights || insights.filter(i => {\n          var _i$relatedThemes;\n          return (_i$relatedThemes = i.relatedThemes) === null || _i$relatedThemes === void 0 ? void 0 : _i$relatedThemes.includes(node.name);\n        }) || []\n      });\n    } else if (node.type === 'persona') {\n      // Persona node view - collect all related themes and feedback\n      const connectedThemes = connectedNodes.filter(n => n.type === \"theme\");\n\n      // Find all feedback indirectly connected to this persona through themes\n      let relatedFeedback = [];\n\n      // First get directly connected feedback\n      const directFeedback = connectedNodes.filter(n => n.type === \"feedback\" || n.type.startsWith(\"feedback\"));\n      relatedFeedback = [...directFeedback];\n\n      // Then get feedback connected through themes\n      for (const theme of connectedThemes) {\n        const themeLinks = graphData.links.filter(link => {\n          const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n          const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n          return sourceId === theme.id || targetId === theme.id;\n        });\n        const themeFeedbackIds = themeLinks.map(link => {\n          const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n          const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n          const connectedId = sourceId === theme.id ? targetId : sourceId;\n          return connectedId;\n        });\n        const themeFeedback = graphData.nodes.filter(n => themeFeedbackIds.includes(n.id) && (n.type === \"feedback\" || n.type.startsWith(\"feedback\")) && !relatedFeedback.some(f => f.id === n.id));\n        relatedFeedback = [...relatedFeedback, ...themeFeedback];\n      }\n\n      // Get sentiment distribution for this persona's feedback\n      const sentimentCount = {\n        Positive: relatedFeedback.filter(n => n.sentiment === \"Positive\" || n.type === \"feedback-positive\").length,\n        Negative: relatedFeedback.filter(n => n.sentiment === \"Negative\" || n.type === \"feedback-negative\").length,\n        Neutral: relatedFeedback.filter(n => n.sentiment === \"Neutral\" || n.type !== \"feedback-positive\" && n.type !== \"feedback-negative\").length\n      };\n\n      // Example feedback for this persona (get full text)\n      const exampleFeedback = relatedFeedback.slice(0, 3).map(f => ({\n        text: f.fullText || f.originalText || f.completeText || f.text || f.content || f.feedback || f.description || f.name || \"\",\n        sentiment: f.sentiment || (f.type === \"feedback-positive\" ? \"Positive\" : f.type === \"feedback-negative\" ? \"Negative\" : \"Neutral\")\n      }));\n      setAIInsights({\n        isThemeView: false,\n        isPersonaView: true,\n        isFeedbackView: false,\n        persona: node.name,\n        feedbackCount: relatedFeedback.length,\n        themes: connectedThemes.map(t => t.name),\n        sentimentDistribution: sentimentCount,\n        exampleFeedback: exampleFeedback,\n        insights: node.insights || insights.filter(i => {\n          var _i$relatedPersonas;\n          return (_i$relatedPersonas = i.relatedPersonas) === null || _i$relatedPersonas === void 0 ? void 0 : _i$relatedPersonas.includes(node.name);\n        }) || []\n      });\n    } else if (node.type.startsWith('feedback') || node.type === 'feedback') {\n      console.log(\"Feedback node clicked:\", node);\n\n      // Use node.title as the full feedback text\n      let fullText = node.title || \"No feedback text available\";\n\n      // If node.title isn't available, try other sources\n      if (!node.title) {\n        // Try standard fields\n        fullText = node.text || node.content || node.name || \"No feedback text available\";\n\n        // Check feedbackItems if available\n        if (feedbackItems && feedbackItems.length > 0) {\n          const matchingItem = feedbackItems.find(item => item.id === node.id);\n          if (matchingItem && matchingItem.text) {\n            fullText = matchingItem.text;\n          }\n        }\n      }\n\n      // Get related themes\n      const relatedThemes = connectedNodes.filter(n => n.type === \"theme\").map(n => n.name);\n      setAIInsights({\n        isThemeView: false,\n        isPersonaView: false,\n        isFeedbackView: true,\n        text: fullText,\n        sentiment: node.sentiment || 'Neutral',\n        persona: node.user_role || node.persona || node.user || \"Unknown user\",\n        themes: node.theme ? [node.theme] : node.themes || relatedThemes || [],\n        id: node.id || \"Unknown\",\n        date: node.timestamp || node.date || \"Unknown\",\n        insights: node.insights || []\n      });\n    }\n\n    // Make sure to call this at the end of all node types\n    setShowAIInsightsPanel(true);\n  }, [graphData, feedbackItems]);\n\n  // Zoom control functions\n  const zoomIn = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    const svg = d3.select(svgRef.current);\n    const currentTransform = d3.zoomTransform(svg.node());\n    svg.transition().duration(300).call(zoomRef.current.transform, d3.zoomIdentity.translate(currentTransform.x, currentTransform.y).scale(currentTransform.k * 1.3));\n  }, []);\n  const zoomOut = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    const svg = d3.select(svgRef.current);\n    const currentTransform = d3.zoomTransform(svg.node());\n    svg.transition().duration(300).call(zoomRef.current.transform, d3.zoomIdentity.translate(currentTransform.x, currentTransform.y).scale(currentTransform.k / 1.3));\n  }, []);\n  const centerView = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    const svg = d3.select(svgRef.current);\n\n    // Calculate the center point\n    const centerX = dimensions.width / 2;\n    const centerY = dimensions.height / 2;\n\n    // Create a transform that centers the view\n    const transform = d3.zoomIdentity.translate(centerX, centerY).scale(1).translate(-centerX, -centerY);\n\n    // Apply the transform with a smooth transition\n    svg.transition().duration(750).call(zoomRef.current.transform, transform);\n  }, [dimensions]);\n  const fitToScreen = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current || !graphData.nodes.length) return;\n    const svg = d3.select(svgRef.current);\n\n    // Find the bounds of all nodes\n    let minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity;\n    graphData.nodes.forEach(node => {\n      if (!node.x || !node.y) return;\n      if (node.x < minX) minX = node.x;\n      if (node.y < minY) minY = node.y;\n      if (node.x > maxX) maxX = node.x;\n      if (node.y > maxY) maxY = node.y;\n    });\n\n    // If we don't have valid bounds, center view instead\n    if (!isFinite(minX) || !isFinite(minY) || !isFinite(maxX) || !isFinite(maxY)) {\n      centerView();\n      return;\n    }\n\n    // Add padding\n    const padding = 50;\n    minX -= padding;\n    minY -= padding;\n    maxX += padding;\n    maxY += padding;\n\n    // Calculate width and height of the content\n    const contentWidth = maxX - minX;\n    const contentHeight = maxY - minY;\n\n    // Calculate scale to fit the content\n    const scale = Math.min(dimensions.width / contentWidth, dimensions.height / contentHeight, 2 // Maximum scale factor\n    ) * 0.9; // 90% to add some margin\n\n    // Calculate the center of the content\n    const centerX = (minX + maxX) / 2;\n    const centerY = (minY + maxY) / 2;\n\n    // Create a transform that centers and scales the content\n    const transform = d3.zoomIdentity.translate(dimensions.width / 2, dimensions.height / 2).scale(scale).translate(-centerX, -centerY);\n\n    // Apply the transform with a smooth transition\n    svg.transition().duration(750).call(zoomRef.current.transform, transform);\n  }, [dimensions, graphData.nodes, centerView]);\n\n  // Toggle mini-map visibility\n  const toggleMiniMap = useCallback(() => {\n    setShowMiniMap(!showMiniMap);\n  }, [showMiniMap]);\n  const handleDataImported = importedData => {\n    if (importedData) {\n      setGraphData({\n        nodes: importedData.nodes || [],\n        links: importedData.links || []\n      });\n      setInsights(importedData.insights || []);\n    }\n  };\n\n  // Add these functions back\n  const exportData = useCallback(() => {\n    // Prepare complete export with all AI data\n    const completeExportData = {\n      // Include the graph structure\n      nodes: graphData.nodes.map(node => ({\n        ...node,\n        // If there are any D3-specific properties that shouldn't be exported, filter them out here\n        fx: undefined,\n        fy: undefined,\n        index: undefined,\n        vx: undefined,\n        vy: undefined,\n        x: undefined,\n        y: undefined\n      })),\n      links: graphData.links.map(link => {\n        // Ensure links use id strings rather than object references\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n        return {\n          source: sourceId,\n          target: targetId,\n          strength: link.strength || 0.5\n        };\n      }),\n      // Include all AI-generated insights\n      insights: insights || [],\n      // Include analytics data with sentiment distribution\n      analytics: {\n        ...analyticsData,\n        // Ensure sentiment distribution is included\n        sentimentDistribution: (analyticsData === null || analyticsData === void 0 ? void 0 : analyticsData.sentimentDistribution) || {\n          Positive: graphData.nodes.filter(n => n.type === 'feedback' && n.sentiment === 'Positive').length,\n          Negative: graphData.nodes.filter(n => n.type === 'feedback' && n.sentiment === 'Negative').length,\n          Neutral: graphData.nodes.filter(n => n.type === 'feedback' && n.sentiment === 'Neutral').length\n        },\n        exportDate: new Date().toISOString(),\n        exportVersion: \"1.0\"\n      },\n      // Include raw feedback data if available\n      feedbackItems: feedbackItems || []\n    };\n\n    // Convert to JSON string with nice formatting\n    const dataStr = JSON.stringify(completeExportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n    const exportFileDefaultName = 'feedback-insights-data.json';\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n    console.log(\"Exported data with AI insights and sentiment analysis\");\n  }, [graphData, insights, analyticsData, feedbackItems]);\n\n  // Reset to initial data\n  const resetVisualization = useCallback(() => {\n    if (window.confirm(\"Are you sure you want to reset? This will remove all custom data.\")) {\n      setGraphData(initialData);\n      setSelectedNode(null);\n      setHighlightMode('none');\n    }\n  }, []);\n\n  // Loading screen\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col h-full items-center justify-center bg-gray-50\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-2xl text-blue-800 mb-4\",\n        children: \"Loading Insights Network...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1550,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1551,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1549,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Error screen\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col h-full items-center justify-center bg-gray-50\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-2xl text-red-800 mb-4\",\n        children: \"Error Loading Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1560,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-600\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1561,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\",\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1562,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1559,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Then in the return statement, replace the existing AI panel with the improved one\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative w-full h-full\",\n    children: (!graphData || !graphData.nodes || graphData.nodes.length === 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 flex items-center justify-center p-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-2xl bg-white rounded-lg shadow-lg p-8 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold text-gray-800 mb-6\",\n          children: \"Getting Started with Feedback Force\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1579,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-left space-y-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-start\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-shrink-0 bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-4 mt-1\",\n              children: \"1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1585,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"font-semibold text-lg text-gray-700 mb-2\",\n                children: \"Prepare Your Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1589,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-600 mb-2\",\n                children: \"Format your feedback as JSON following this structure:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1590,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"bg-gray-50 p-4 rounded-md text-sm overflow-x-auto border border-gray-200\",\n                children: `{\n  \"id\": \"feedback-id\",\n  \"text\": \"The actual feedback comment text\",\n  \"user_role\": \"User role (e.g. Admin)\",\n  \"timestamp\": \"xxx\"\n}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1591,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1588,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1584,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-start\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-shrink-0 bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-4 mt-1\",\n              children: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1603,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"font-semibold text-lg text-gray-700 mb-2\",\n                children: \"Import Your Data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1607,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-600\",\n                children: [\"Click the \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-blue-600\",\n                  children: \"Import\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1608,\n                  columnNumber: 58\n                }, this), \" button to upload your JSON feedback file\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1608,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1606,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1602,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-start\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-shrink-0 bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-4 mt-1\",\n              children: \"3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1613,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"font-semibold text-lg text-gray-700 mb-2\",\n                children: \"Visualize\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1617,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-600\",\n                children: [\"Use \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-blue-600\",\n                  children: \"\\\"Center View,\\\"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1618,\n                  columnNumber: 52\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-blue-600\",\n                  children: \"\\\"Mini-Map,\\\"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1618,\n                  columnNumber: 118\n                }, this), \" or \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-blue-600\",\n                  children: \"\\\"Fit to Screen\\\"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1618,\n                  columnNumber: 184\n                }, this), \" to explore your feedback network\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1618,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1616,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1612,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-start\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-shrink-0 bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-4 mt-1\",\n              children: \"4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1623,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"font-semibold text-lg text-gray-700 mb-2\",\n                children: \"Analyze\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1627,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-gray-600\",\n                children: [\"Apply filters with \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-blue-600\",\n                  children: \"Highlight\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1628,\n                  columnNumber: 67\n                }, this), \", \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-blue-600\",\n                  children: \"Themes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1628,\n                  columnNumber: 129\n                }, this), \", and \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"font-medium text-blue-600\",\n                  children: \"User Role\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1628,\n                  columnNumber: 192\n                }, this), \" options to discover patterns\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1628,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1626,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1622,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1583,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1578,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1577,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1574,\n    columnNumber: 5\n  }, this);\n};\n_s(UserResearchNetwork, \"H9M0dWznYFY+KkLaiH9J25RIZkc=\");\n_c = UserResearchNetwork;\nexport default UserResearchNetwork;\nvar _c;\n$RefreshReg$(_c, \"UserResearchNetwork\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","d3","classifyFeedback","generateFeatureIdeas","analyzeSentiment","FeedbackImporter","processFeedbackData","importFeedbackData","Legend","Navigation","Header","AppHeader","jsxDEV","_jsxDEV","colorScale","scaleOrdinal","domain","range","initialData","nodes","id","name","type","feedbackCount","priority","links","source","target","strength","UserResearchNetwork","graphData","_s","svgRef","containerRef","zoomRef","simulationRef","dimensions","setDimensions","width","height","selectedNode","setSelectedNode","highlightMode","setHighlightMode","loading","setLoading","error","setError","searchTerm","setSearchTerm","searchResults","setSearchResults","showSearchResults","setShowSearchResults","isAIProcessing","setIsAIProcessing","aiError","setAIError","feedbackItems","setFeedbackItems","showAIInsightsPanel","setShowAIInsightsPanel","aiInsights","setAIInsights","results","isPanelCollapsed","setIsPanelCollapsed","panelWidth","setPanelWidth","insights","setInsights","analyticsData","setAnalyticsData","showMiniMap","setShowMiniMap","console","log","createMiniMap","current","length","svg","select","selectAll","remove","miniMapSize","Math","min","miniMapMargin","miniMapContainer","append","attr","miniMapNodes","map","node","miniX","random","miniY","miniMapLinks","link","sourceId","targetId","filter","some","n","miniMapSimulation","forceSimulation","force","forceLink","d","distance","forceManyBody","forceCenter","forceCollide","radius","miniLinks","data","enter","miniNodes","baseColor","color","brighter","text","viewportRect","stop","i","tick","find","style","on","event","x","y","pointer","centerX","centerY","transform","zoomIdentity","translate","scale","transition","duration","call","timer","setTimeout","clearTimeout","cleanupMiniMap","updateDimensions","getBoundingClientRect","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","window","removeEventListener","disconnect","containerWidth","clientWidth","containerHeight","clientHeight","centerView","recalculateFeedbackCounts","g","zoom","scaleExtent","Array","isArray","normalizedLinks","validLinks","sourceExists","targetExists","warn","simulation","max","sourceNode","targetNode","drag","dragstarted","dragged","dragended","preventDefault","document","getSelection","removeAllRanges","handleNodeClick","sentiment","title","active","alphaTarget","restart","fx","fy","feedbackCounts","themes","personas","features","forEach","updatedNodes","setGraphData","prevData","importData","file","files","then","importedData","feedbackNodes","batchSize","batch","slice","Promise","all","feedbackText","fullText","result","processedNodes","label","sentimentCounts","reduce","counts","updatedAnalytics","analytics","sentimentDistribution","svgWidth","svgHeight","catch","message","mockClassifyFeedback","lowerText","toLowerCase","includes","theme","mockGenerateFeatureIdeas","processImportedFeedback","newGraph","nodeMap","item","user_role","personaId","Date","now","Object","keys","personaNode","push","processChunks","chunkSize","chunks","chunk","substring","themeId","themeNode","linkExists","err","resolve","significantThemes","values","sort","a","b","relatedFeedback","featureIdeas","idea","featureId","featureNode","description","existingLink","l","toString","fallback","tempSimulation","stopPropagation","connectedLinks","connectedNodeIds","connectedNodes","connectedFeedback","startsWith","connectedPersonas","sentimentCount","Positive","Negative","Neutral","exampleFeedback","f","originalText","completeText","content","feedback","isThemeView","isPersonaView","isFeedbackView","p","_i$relatedThemes","relatedThemes","connectedThemes","directFeedback","themeLinks","themeFeedbackIds","connectedId","themeFeedback","persona","t","_i$relatedPersonas","relatedPersonas","matchingItem","user","date","timestamp","zoomIn","currentTransform","zoomTransform","k","zoomOut","fitToScreen","minX","Infinity","minY","maxX","maxY","isFinite","padding","contentWidth","contentHeight","toggleMiniMap","handleDataImported","exportData","completeExportData","undefined","index","vx","vy","exportDate","toISOString","exportVersion","dataStr","JSON","stringify","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","resetVisualization","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","location","reload","_c","$RefreshReg$"],"sources":["/Users/faisalshariff/Feedback Force/src/components/UserResearchNetwork.js"],"sourcesContent":["// UserResearchNetwork.js\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { classifyFeedback, generateFeatureIdeas, analyzeSentiment } from '../services/openaiService';\n\nimport FeedbackImporter from './FeedbackImporter';\nimport { processFeedbackData, importFeedbackData } from '../utils/importData';\nimport Legend from './Legend';\nimport Navigation from './Navigation';\nimport Header from './Header';\nimport AppHeader from './AppHeader';\n\n// Color scale for node types\nconst colorScale = d3.scaleOrdinal()\n  .domain([\"theme\", \"feedback-positive\", \"feedback-neutral\", \"feedback-negative\", \"feedback\", \"persona\"])\n  .range([\"#3182CE\", \"#38A169\", \"#A0AEC0\", \"#E53E3E\", \"#38A169\", \"#DD6B20\"]); // Blue, Green, Gray, Red, Green, Orange\n\n// Initial data structure\nconst initialData = {\n  nodes: [\n    { id: \"theme1\", name: \"Performance\", type: \"theme\", feedbackCount: 10 },\n    { id: \"theme2\", name: \"User Interface\", type: \"theme\", feedbackCount: 8 },\n    { id: \"theme3\", name: \"Mobile Experience\", type: \"theme\", feedbackCount: 6 },\n    { id: \"persona1\", name: \"Data Analyst\", type: \"persona\" },\n    { id: \"persona2\", name: \"Marketing Manager\", type: \"persona\" },\n    { id: \"feature1\", name: \"Performance Optimization\", type: \"feature\", priority: \"High\" }\n  ],\n  links: [\n    { source: \"theme1\", target: \"persona1\", strength: 0.7 },\n    { source: \"theme2\", target: \"persona1\", strength: 0.5 },\n    { source: \"theme1\", target: \"feature1\", strength: 0.8 },\n    { source: \"persona1\", target: \"feature1\", strength: 0.6 }\n  ]\n};\n\n// Main component\nconst UserResearchNetwork = ({ \n  // existing props\n  graphData,\n  // other props\n}) => {\n  // Refs\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const zoomRef = useRef(null);\n  const simulationRef = useRef(null);\n  \n  // State\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [highlightMode, setHighlightMode] = useState('none');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Search state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  \n  // AI state\n  const [isAIProcessing, setIsAIProcessing] = useState(false);\n  const [aiError, setAIError] = useState(null);\n  const [feedbackItems, setFeedbackItems] = useState([]);\n  const [showAIInsightsPanel, setShowAIInsightsPanel] = useState(false);\n  const [aiInsights, setAIInsights] = useState({ results: [] });\n  const [isPanelCollapsed, setIsPanelCollapsed] = useState(false);\n  const [panelWidth, setPanelWidth] = useState(320);\n  \n  const [insights, setInsights] = useState([]);\n  const [analyticsData, setAnalyticsData] = useState(null);\n\n  // Add these state variables back\n  const [showMiniMap, setShowMiniMap] = useState(true);\n\n  // Add these debug effect hooks at the top level\n  useEffect(() => {\n    console.log(\"showAIInsightsPanel value changed:\", showAIInsightsPanel);\n  }, [showAIInsightsPanel]);\n\n  useEffect(() => {\n    if (showAIInsightsPanel && aiInsights) {\n      console.log(\"AI Insights Panel content:\", aiInsights);\n    }\n  }, [showAIInsightsPanel, aiInsights]);\n\n  // MiniMap implementation - define this before any useEffects that use it\n  const createMiniMap = useCallback(() => {\n    if (!svgRef.current || !graphData.nodes || graphData.nodes.length === 0) return () => {};\n    \n    const svg = d3.select(svgRef.current);\n    \n    // Remove any existing mini-map\n    svg.selectAll(\".mini-map-container\").remove();\n    \n    // Calculate mini-map size based on the main SVG dimensions\n    const miniMapSize = Math.min(dimensions.width, dimensions.height) * 0.25;\n    const miniMapMargin = 20;\n    \n    // Create a container for the mini-map\n    const miniMapContainer = svg.append(\"g\")\n      .attr(\"class\", \"mini-map-container\")\n      .attr(\"transform\", `translate(${miniMapMargin}, ${miniMapMargin})`);\n    \n    // Add a background rectangle\n    miniMapContainer.append(\"rect\")\n      .attr(\"width\", miniMapSize)\n      .attr(\"height\", miniMapSize)\n      .attr(\"fill\", \"#f0f4f8\")\n      .attr(\"fill-opacity\", 0.9)\n      .attr(\"stroke\", \"#3182CE\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"rx\", 6);\n    \n    // Create a separate mini-map simulation\n    const miniMapNodes = graphData.nodes.map(node => ({\n      ...node,\n      miniX: Math.random() * miniMapSize,\n      miniY: Math.random() * miniMapSize\n    }));\n    \n    // Create links array with proper source/target references\n    const miniMapLinks = graphData.links.map(link => {\n      // Extract source and target IDs consistently\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      \n      return {\n        source: sourceId,\n        target: targetId\n      };\n    }).filter(link => {\n      // Filter out links with invalid source or target\n      return miniMapNodes.some(n => n.id === link.source) && \n             miniMapNodes.some(n => n.id === link.target);\n    });\n    \n    // Create a separate force simulation just for the mini-map\n    const miniMapSimulation = d3.forceSimulation(miniMapNodes)\n      .force(\"link\", d3.forceLink(miniMapLinks).id(d => d.id).distance(5))\n      .force(\"charge\", d3.forceManyBody().strength(-20))\n      .force(\"center\", d3.forceCenter(miniMapSize / 2, miniMapSize / 2))\n      .force(\"collide\", d3.forceCollide().radius(4));\n    \n    // Add mini-map links\n    const miniLinks = miniMapContainer.selectAll(\".mini-link\")\n      .data(miniMapLinks)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"mini-link\")\n      .attr(\"stroke\", \"#ccc\")\n      .attr(\"stroke-width\", 0.5);\n    \n    // Add mini-map nodes\n    const miniNodes = miniMapContainer.selectAll(\".mini-node\")\n      .data(miniMapNodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"mini-node\")\n      .attr(\"r\", 3)\n      .attr(\"fill\", d => {\n        // Use the same color scale but with higher opacity\n        const baseColor = colorScale(d.type);\n        return d3.color(baseColor).brighter(0.3);\n      })\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 1);\n    \n    // Add a label\n    miniMapContainer.append(\"text\")\n      .attr(\"x\", 10)\n      .attr(\"y\", 15)\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", \"#2D3748\")\n      .text(\"Network Overview\");\n    \n    // Add a border to show the current viewport\n    const viewportRect = miniMapContainer.append(\"rect\")\n      .attr(\"class\", \"mini-map-viewport\")\n      .attr(\"width\", miniMapSize)\n      .attr(\"height\", miniMapSize)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#3182ce\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"stroke-dasharray\", \"4,4\");\n    \n    // Run the mini-map simulation for a fixed number of ticks\n    miniMapSimulation.stop();\n    for (let i = 0; i < 300; i++) {\n      miniMapSimulation.tick();\n    }\n    \n    // Update the mini-map nodes with their final positions\n    miniLinks\n      .attr(\"x1\", d => {\n        const source = miniMapNodes.find(n => n.id === d.source);\n        return source ? source.miniX : 0;\n      })\n      .attr(\"y1\", d => {\n        const source = miniMapNodes.find(n => n.id === d.source);\n        return source ? source.miniY : 0;\n      })\n      .attr(\"x2\", d => {\n        const target = miniMapNodes.find(n => n.id === d.target);\n        return target ? target.miniX : 0;\n      })\n      .attr(\"y2\", d => {\n        const target = miniMapNodes.find(n => n.id === d.target);\n        return target ? target.miniY : 0;\n      });\n    \n    miniNodes\n      .attr(\"cx\", d => d.miniX)\n      .attr(\"cy\", d => d.miniY);\n    \n    // Add click behavior\n    miniMapContainer.append(\"rect\")\n      .attr(\"width\", miniMapSize)\n      .attr(\"height\", miniMapSize)\n      .attr(\"fill\", \"transparent\")\n      .attr(\"stroke\", \"none\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", (event) => {\n        if (!zoomRef.current) return;\n        \n        // Get click position relative to mini-map\n        const [x, y] = d3.pointer(event);\n        \n        // Calculate the center point in the main view\n        const centerX = (x / miniMapSize) * dimensions.width;\n        const centerY = (y / miniMapSize) * dimensions.height;\n        \n        // Create a transform that centers on the clicked point\n        const transform = d3.zoomIdentity\n          .translate(dimensions.width / 2, dimensions.height / 2)\n          .scale(1)\n          .translate(-centerX, -centerY);\n        \n        // Apply the transform with a smooth transition\n        svg.transition()\n          .duration(750)\n          .call(zoomRef.current.transform, transform);\n      });\n    \n    // Return cleanup function\n    return () => {\n      svg.selectAll(\".mini-map-container\").remove();\n      if (miniMapSimulation) miniMapSimulation.stop();\n    };\n  }, [dimensions, graphData, colorScale]);\n\n  // Simulate loading data on initial render - without createMiniMap dependency\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Add a separate effect to create the mini-map after loading\n  useEffect(() => {\n    if (!loading && showMiniMap && svgRef.current) {\n      const timer = setTimeout(() => {\n        createMiniMap();\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [loading, showMiniMap, dimensions]);\n\n  // Create a minimap when needed\n  useEffect(() => {\n    // Only create minimap if the SVG ref exists, dimensions are valid, and showMiniMap is true\n    if (svgRef.current && dimensions.width > 0 && dimensions.height > 0 && showMiniMap) {\n      // Remove any existing mini-map first to prevent duplicates\n      d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n      \n      const cleanupMiniMap = createMiniMap();\n      return cleanupMiniMap;\n    } else {\n      // Clean up any existing mini-map if showMiniMap is false\n      d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n    }\n  }, [showMiniMap, graphData, dimensions.width, dimensions.height, selectedNode]);\n\n  // Update dimensions when window resizes\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const updateDimensions = () => {\n      if (containerRef.current) {\n        const { width, height } = containerRef.current.getBoundingClientRect();\n        setDimensions({ width, height });\n      }\n    };\n    \n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        const { width, height } = entry.contentRect;\n        setDimensions({ width, height });\n      }\n    });\n    \n    resizeObserver.observe(containerRef.current);\n    updateDimensions();\n    \n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  // Adjust container dimensions when panel is open\n  useEffect(() => {\n    if (containerRef.current) {\n      const containerWidth = containerRef.current.clientWidth;\n      const containerHeight = containerRef.current.clientHeight;\n      \n      // Adjust dimensions based on panel state\n      if (showAIInsightsPanel && !isPanelCollapsed) {\n        // Reduce width to make room for the panel\n        setDimensions({\n          width: containerWidth - panelWidth,\n          height: containerHeight\n        });\n      } else {\n        // Use full width\n        setDimensions({\n          width: containerWidth,\n          height: containerHeight\n        });\n      }\n    }\n  }, [showAIInsightsPanel, isPanelCollapsed, panelWidth]);\n\n  // Recenter view when panel state changes\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      centerView();\n    }, 300);\n    \n    return () => clearTimeout(timer);\n  }, [showAIInsightsPanel, isPanelCollapsed]);\n\n  // Recalculate feedback counts when feedback items change\n  useEffect(() => {\n    if (feedbackItems.length > 0) {\n      recalculateFeedbackCounts();\n    }\n  }, [feedbackItems]);\n\n  // Main visualization rendering effect\n  useEffect(() => {\n    if (!svgRef.current || !dimensions.width || !dimensions.height) return;\n    \n    console.log(\"Rendering with data:\", graphData);\n    \n    // Clear the SVG\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    \n    // Create a container group for all elements\n    const g = svg.append(\"g\");\n    \n    // Set up zoom behavior\n    const zoom = d3.zoom()\n      .scaleExtent([0.1, 4])\n      .on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      });\n    \n    svg.call(zoom);\n    zoomRef.current = zoom;\n    \n    // Verify we have valid data\n    if (!graphData.nodes || !graphData.links || \n        !Array.isArray(graphData.nodes) || !Array.isArray(graphData.links) ||\n        graphData.nodes.length === 0) {\n      console.error(\"Invalid or empty graph data:\", graphData);\n      return;\n    }\n    \n    // Create working copies of the data with proper link references\n    const nodes = graphData.nodes.map(node => ({...node}));\n    \n    // Normalize links to ensure proper format for D3\n    const normalizedLinks = graphData.links.map(link => {\n      // Extract source and target IDs consistently\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      \n      // Return a new link object with just IDs (D3 will convert to objects)\n      return {\n        source: sourceId,\n        target: targetId,\n        strength: link.strength || 0.5\n      };\n    });\n    \n    // Verify all links have valid source and target nodes\n    const validLinks = normalizedLinks.filter(link => {\n      const sourceExists = nodes.some(node => node.id === link.source);\n      const targetExists = nodes.some(node => node.id === link.target);\n      if (!sourceExists) console.warn(`Link has invalid source: ${link.source}`);\n      if (!targetExists) console.warn(`Link has invalid target: ${link.target}`);\n      return sourceExists && targetExists;\n    });\n    \n    console.log(`Found ${validLinks.length} valid links out of ${normalizedLinks.length}`);\n    \n    // Create the force simulation with strong link forces\n    const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(validLinks)\n        .id(d => d.id)\n        .distance(100)\n        .strength(1)) // Stronger link force for better connections\n      .force(\"charge\", d3.forceManyBody().strength(-300))\n      .force(\"center\", d3.forceCenter(dimensions.width / 2, dimensions.height / 2))\n      .force(\"collide\", d3.forceCollide(30));\n    \n    simulationRef.current = simulation;\n    \n    // Create the links\n    const link = g.append(\"g\")\n      .attr(\"class\", \"links\")\n      .selectAll(\"line\")\n      .data(validLinks)\n      .enter()\n      .append(\"line\")\n      .attr(\"stroke-width\", d => Math.max(2, d.strength * 6))\n      .attr(\"stroke\", \"#ccc\")\n      .attr(\"opacity\", d => {\n        // Apply opacity to links based on highlight mode\n        if (highlightMode === 'none') return 0.8;  // Default opacity\n        \n        // Get source and target node objects\n        const sourceNode = typeof d.source === 'object' ? d.source : nodes.find(n => n.id === d.source);\n        const targetNode = typeof d.target === 'object' ? d.target : nodes.find(n => n.id === d.target);\n        \n        if (!sourceNode || !targetNode) return 0.2;  // Fade out if invalid link\n        \n        // Highlight links between nodes of the highlighted type\n        if (highlightMode === 'themes' && \n            (sourceNode.type === 'theme' || targetNode.type === 'theme')) {\n          return 1.0;\n        }\n        \n        if (highlightMode === 'feedback' && \n            (sourceNode.type === 'feedback' || targetNode.type === 'feedback')) {\n          return 1.0;\n        }\n        \n        if (highlightMode === 'personas' && \n            (sourceNode.type === 'persona' || targetNode.type === 'persona')) {\n          return 1.0;\n        }\n        \n        return 0.2;  // Fade out non-highlighted links\n      });\n    \n    // Create the nodes\n    const node = g.append(\"g\")\n      .attr(\"class\", \"nodes\")\n      .selectAll(\"g\")\n      .data(nodes)\n      .enter()\n      .append(\"g\")\n      .call(d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended))\n      .on(\"click\", (event, d) => {\n        // Prevent text selection\n        event.preventDefault();\n        document.getSelection().removeAllRanges();\n        \n        // Call the node click handler\n        handleNodeClick(d, event);\n      });\n    \n    // Add circles to nodes with appropriate colors\n    node.append(\"circle\")\n      .attr(\"r\", d => {\n        if (d.type === \"theme\") return 20 + (d.feedbackCount / 2);\n        if (d.type === \"persona\") return 15;\n        return 10; // Smaller feedback nodes\n      })\n      .attr(\"fill\", d => {\n        // Update this section to use sentiment-based coloring for feedback nodes\n        if (d.type === \"feedback\") {\n          if (d.sentiment === \"Positive\") return colorScale(\"feedback-positive\");\n          if (d.sentiment === \"Negative\") return colorScale(\"feedback-negative\");\n          return colorScale(\"feedback-neutral\"); // Default to neutral if sentiment is not set or is \"Neutral\"\n        }\n        return colorScale(d.type);\n      })\n      .attr(\"stroke\", d => {\n        // Add a special stroke to highlighted nodes\n        if (highlightMode !== 'none') {\n          if (highlightMode === 'themes' && d.type === 'theme') {\n            return \"#FFD700\"; // Gold stroke for highlighted theme nodes\n          }\n          if (highlightMode === 'feedback' && d.type === 'feedback') {\n            return \"#FFD700\"; // Gold stroke for highlighted feedback nodes\n          }\n          if (highlightMode === 'personas' && d.type === 'persona') {\n            return \"#FFD700\"; // Gold stroke for highlighted persona nodes\n          }\n        }\n        return \"#fff\"; // Default white stroke\n      })\n      .attr(\"stroke-width\", d => {\n        // Thicker stroke for highlighted nodes\n        if (highlightMode !== 'none') {\n          if (highlightMode === 'themes' && d.type === 'theme') return 3;\n          if (highlightMode === 'feedback' && d.type === 'feedback') return 3;\n          if (highlightMode === 'personas' && d.type === 'persona') return 3;\n        }\n        return 2; // Default stroke width\n      })\n      .attr(\"opacity\", d => {\n        // Apply opacity to nodes based on highlight mode\n        if (highlightMode === 'none') return 1.0;  // Full opacity if no highlighting\n        \n        // Highlight specific node types\n        if (highlightMode === 'themes' && d.type === 'theme') return 1.0;\n        if (highlightMode === 'feedback' && d.type === 'feedback') return 1.0;\n        if (highlightMode === 'personas' && d.type === 'persona') return 1.0;\n        \n        return 0.3;  // Fade out non-highlighted nodes\n      });\n    \n    // Add labels with better positioning\n    node.append(\"text\")\n      .text(d => d.name)\n      .attr(\"x\", 0)\n      .attr(\"y\", d => {\n        if (d.type === \"theme\") return 30 + (d.feedbackCount / 2);\n        if (d.type === \"persona\") return 25;\n        return 22; // Position feedback labels\n      })\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", d => d.type === \"feedback\" ? \"10px\" : \"12px\") // Smaller text for feedback\n      .attr(\"fill\", d => {\n        // Make text more visible for highlighted nodes\n        if (highlightMode !== 'none') {\n          if (highlightMode === 'themes' && d.type === 'theme') return \"#000\";\n          if (highlightMode === 'feedback' && d.type === 'feedback') return \"#000\";\n          if (highlightMode === 'personas' && d.type === 'persona') return \"#000\";\n          return \"#999\"; // Faded text for non-highlighted nodes\n        }\n        return \"#333\"; // Default text color\n      })\n      .attr(\"opacity\", d => {\n        // Match opacity with the node circles\n        if (highlightMode === 'none') return 1.0;\n        \n        if (highlightMode === 'themes' && d.type === 'theme') return 1.0;\n        if (highlightMode === 'feedback' && d.type === 'feedback') return 1.0;\n        if (highlightMode === 'personas' && d.type === 'persona') return 1.0;\n        \n        return 0.3;\n      });\n    \n    // Add title for tooltip that shows full feedback text\n    node.append(\"title\")\n      .text(d => d.type === \"feedback\" ? d.title : d.name);\n    \n    // Run a few ticks before adding listener to get nodes in better positions\n    for (let i = 0; i < 20; i++) {\n      simulation.tick();\n    }\n    \n    // Update link positions immediately with node positions from simulation ticks\n    link\n      .attr(\"x1\", d => {\n        const source = nodes.find(n => n.id === d.source);\n        return source ? source.x : 0;\n      })\n      .attr(\"y1\", d => {\n        const source = nodes.find(n => n.id === d.source);\n        return source ? source.y : 0;\n      })\n      .attr(\"x2\", d => {\n        const target = nodes.find(n => n.id === d.target);\n        return target ? target.x : 0;\n      })\n      .attr(\"y2\", d => {\n        const target = nodes.find(n => n.id === d.target);\n        return target ? target.y : 0;\n      });\n    \n    // Now add the tick listener for ongoing updates\n    simulation.on(\"tick\", () => {\n      link\n        .attr(\"x1\", d => {\n          // Handle both ID and object references\n          const sourceId = typeof d.source === 'object' ? d.source.id : d.source;\n          const source = nodes.find(n => n.id === sourceId);\n          return source ? source.x : 0;\n        })\n        .attr(\"y1\", d => {\n          const sourceId = typeof d.source === 'object' ? d.source.id : d.source;\n          const source = nodes.find(n => n.id === sourceId);\n          return source ? source.y : 0;\n        })\n        .attr(\"x2\", d => {\n          const targetId = typeof d.target === 'object' ? d.target.id : d.target;\n          const target = nodes.find(n => n.id === targetId);\n          return target ? target.x : 0;\n        })\n        .attr(\"y2\", d => {\n          const targetId = typeof d.target === 'object' ? d.target.id : d.target;\n          const target = nodes.find(n => n.id === targetId);\n          return target ? target.y : 0;\n        });\n      \n      node.attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n    });\n    \n    // Drag functions\n    function dragstarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    \n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    \n    function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      \n      // Only release the node if it's not the selected node\n      if (!selectedNode || selectedNode.id !== d.id) {\n        d.fx = null;\n        d.fy = null;\n      }\n    }\n    \n    // Center the view\n    svg.call(zoom.transform, d3.zoomIdentity.translate(\n      dimensions.width / 2 - dimensions.width * 0.5,\n      dimensions.height / 2 - dimensions.height * 0.5\n    ).scale(0.8));\n    \n    // Clean up on unmount\n    return () => {\n      simulation.stop();\n    };\n  }, [dimensions, graphData, highlightMode, selectedNode]);\n\n  // Recalculate feedback counts based on graph connections\n  const recalculateFeedbackCounts = useCallback(() => {\n    // Create a map to track feedback counts\n    const feedbackCounts = {\n      themes: {},\n      personas: {},\n      features: {}\n    };\n    \n    // Count feedback for each node type based on connections\n    graphData.links.forEach(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      \n      const sourceNode = graphData.nodes.find(n => n.id === sourceId);\n      const targetNode = graphData.nodes.find(n => n.id === targetId);\n      \n      if (!sourceNode || !targetNode) return;\n      \n      // Count theme connections\n      if (sourceNode.type === \"theme\" && targetNode.type === \"feedback\") {\n        feedbackCounts.themes[sourceNode.id] = (feedbackCounts.themes[sourceNode.id] || 0) + 1;\n      }\n      else if (targetNode.type === \"theme\" && sourceNode.type === \"feedback\") {\n        feedbackCounts.themes[targetNode.id] = (feedbackCounts.themes[targetNode.id] || 0) + 1;\n      }\n      \n      // Count persona connections\n      if (sourceNode.type === \"persona\" && targetNode.type === \"feedback\") {\n        feedbackCounts.personas[sourceNode.id] = (feedbackCounts.personas[sourceNode.id] || 0) + 1;\n      }\n      else if (targetNode.type === \"persona\" && sourceNode.type === \"feedback\") {\n        feedbackCounts.personas[targetNode.id] = (feedbackCounts.personas[targetNode.id] || 0) + 1;\n      }\n    });\n    \n    // Update node feedback counts\n    const updatedNodes = graphData.nodes.map(node => {\n      if (node.type === \"theme\" && feedbackCounts.themes[node.id]) {\n        return { ...node, feedbackCount: feedbackCounts.themes[node.id] };\n      }\n      if (node.type === \"persona\" && feedbackCounts.personas[node.id]) {\n        return { ...node, feedbackCount: feedbackCounts.personas[node.id] };\n      }\n      return node;\n    });\n    \n    // Update the graph data\n    setGraphData(prevData => ({\n      ...prevData,\n      nodes: updatedNodes\n    }));\n  }, [graphData]);\n\n  // Import data from file with more robust processing\n  const importData = useCallback((event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    console.log(\"Starting import from file:\", file.name);\n    \n    // Use our async utility function\n    importFeedbackData(file)\n      .then(async (importedData) => {\n        console.log(\"Processed import data:\", importedData);\n        \n        // Process feedback nodes for sentiment analysis\n        const feedbackNodes = importedData.nodes.filter(node => \n          node.type === 'feedback' && !node.sentiment\n        );\n        \n        // If we have feedback nodes without sentiment, analyze them\n        if (feedbackNodes.length > 0) {\n          setIsAIProcessing(true);\n          \n          // Process in batches to avoid overwhelming the API\n          const batchSize = 5;\n          for (let i = 0; i < feedbackNodes.length; i += batchSize) {\n            const batch = feedbackNodes.slice(i, i + batchSize);\n            \n            // Process each node in the batch\n            await Promise.all(batch.map(async (node) => {\n              try {\n                const feedbackText = node.text || node.fullText || node.name || \"\";\n                const result = await analyzeSentiment(feedbackText);\n                node.sentiment = result.sentiment;\n              } catch (error) {\n                console.warn(`Error analyzing sentiment for node ${node.id}:`, error);\n                node.sentiment = \"Neutral\"; // Fallback\n              }\n            }));\n          }\n          \n          setIsAIProcessing(false);\n        }\n        \n        // Ensure node structure is compatible with visualization\n        const processedNodes = importedData.nodes.map(node => {\n          // Make sure each node has the essential properties\n          return {\n            ...node,\n            // Ensure these critical properties exist\n            id: node.id,\n            name: node.name || node.label || \"Unnamed\",\n            type: node.type || \"theme\",\n            // Add appropriate properties based on type\n            ...(node.type === 'theme' ? { feedbackCount: node.feedbackCount || 5 } : {}),\n            ...(node.type === 'feature' ? { priority: node.priority || 'Medium' } : {})\n          };\n        });\n        \n        // Update analytics data with sentiment distribution\n        const sentimentCounts = processedNodes\n          .filter(node => node.type === 'feedback' && node.sentiment)\n          .reduce((counts, node) => {\n            counts[node.sentiment] = (counts[node.sentiment] || 0) + 1;\n            return counts;\n          }, {});\n        \n        const updatedAnalytics = {\n          ...importedData.analytics,\n          sentimentDistribution: sentimentCounts\n        };\n        \n        setGraphData({ \n          nodes: processedNodes, \n          links: importedData.links || []\n        });\n        setInsights(importedData.insights || []);\n        setAnalyticsData(updatedAnalytics);\n        setLoading(false);\n        \n        // Reset any selections and force a re-center\n        setSelectedNode(null);\n        setTimeout(() => {\n          if (zoomRef.current) {\n            const svg = d3.select(svgRef.current);\n            const svgWidth = svg.node().getBoundingClientRect().width;\n            const svgHeight = svg.node().getBoundingClientRect().height;\n            \n            svg.transition()\n              .duration(750)\n              .call(zoomRef.current.transform, \n                d3.zoomIdentity\n                  .translate(svgWidth / 2, svgHeight / 2)\n                  .scale(0.8)\n              );\n          }\n        }, 300);\n      })\n      .catch(error => {\n        console.error(\"Error importing feedback data:\", error);\n        setError(`Error importing file: ${error.message || \"Unknown error\"}`);\n        setLoading(false);\n      });\n  }, []); // Remove fitToScreen from dependencies\n\n  // Helper function for keyword-based theme classification (used as fallback)\n  const mockClassifyFeedback = (text) => {\n    // Simple keyword-based classification\n    const lowerText = text.toLowerCase();\n    \n    if (lowerText.includes('crash') || lowerText.includes('error') || lowerText.includes('bug')) {\n      return { theme: 'Stability Issues' };\n    } else if (lowerText.includes('slow') || lowerText.includes('performance') || lowerText.includes('timeout')) {\n      return { theme: 'Performance' };\n    } else if (lowerText.includes('mobile') || lowerText.includes('app') || lowerText.includes('phone')) {\n      return { theme: 'Mobile Experience' };\n    } else if (lowerText.includes('ui') || lowerText.includes('interface') || lowerText.includes('design') || \n              lowerText.includes('layout') || lowerText.includes('look')) {\n      return { theme: 'User Interface' };\n    } else if (lowerText.includes('report') || lowerText.includes('dashboard')) {\n      return { theme: 'Reporting & Analytics' };\n    } else if (lowerText.includes('export') || lowerText.includes('excel') || lowerText.includes('pdf')) {\n      return { theme: 'Data Export & Import' };\n    } else if (lowerText.includes('search') || lowerText.includes('filter') || lowerText.includes('find')) {\n      return { theme: 'Search & Navigation' };\n    }\n    \n    return { theme: 'General Feedback' };\n  };\n  \n  // Helper function for feature generation (used as fallback)\n  const mockGenerateFeatureIdeas = (theme) => {\n    // Generate simple feature ideas based on theme\n    if (theme === 'Stability Issues') {\n      return [{ \n        name: 'Crash Prevention & Recovery', \n        priority: 'High'\n      }];\n    } else if (theme === 'Performance') {\n      return [{ \n        name: 'Performance Optimization', \n        priority: 'High'\n      }];\n    } else if (theme === 'Mobile Experience') {\n      return [{ \n        name: 'Responsive Design Overhaul', \n        priority: 'High'\n      }];\n    } else if (theme === 'User Interface') {\n      return [{ \n        name: 'UI Modernization', \n        priority: 'Medium'\n      }];\n    } else if (theme === 'Reporting & Analytics') {\n      return [{ \n        name: 'Custom Report Builder', \n        priority: 'High'\n      }];\n    } else if (theme === 'Data Export & Import') {\n      return [{ \n        name: 'Enhanced Export Options', \n        priority: 'High'\n      }];\n    } else {\n      return [{ \n        name: 'User Experience Improvements', \n        priority: 'Medium'\n      }];\n    }\n  };\n\n  // Process imported feedback with enhanced reliability\n  const processImportedFeedback = useCallback((feedbackItems) => {\n    if (!feedbackItems || feedbackItems.length === 0) {\n      setLoading(false);\n      return;\n    }\n    \n    console.log(`Processing ${feedbackItems.length} feedback items...`);\n    setIsAIProcessing(true);\n    \n    // Create a new graph structure\n    const newGraph = {\n      nodes: [],\n      links: []\n    };\n    \n    // Track created nodes to avoid duplicates\n    const nodeMap = {\n      personas: {},\n      themes: {},\n      features: {}\n    };\n    \n    // Step 1: First create all persona nodes from feedback\n    console.log(\"Creating persona nodes...\");\n    feedbackItems.forEach(item => {\n      if (!item.user_role) return;\n      \n      if (!nodeMap.personas[item.user_role]) {\n        const personaId = `persona-${Date.now()}-${Object.keys(nodeMap.personas).length}`;\n        const personaNode = {\n          id: personaId,\n          name: item.user_role,\n          type: \"persona\",\n          feedbackCount: 1\n        };\n        \n        newGraph.nodes.push(personaNode);\n        nodeMap.personas[item.user_role] = personaNode;\n        console.log(`Created persona node: ${item.user_role}`);\n      } else {\n        // Increment feedback count for existing persona\n        nodeMap.personas[item.user_role].feedbackCount += 1;\n      }\n    });\n    \n    // Step 2: Process each feedback to identify themes\n    // Use chunks to avoid overwhelming the system\n    console.log(\"Processing feedback to identify themes...\");\n    const processChunks = async () => {\n      const chunkSize = 5; // Process 5 at a time\n      const chunks = [];\n      \n      // Split feedback into chunks\n      for (let i = 0; i < feedbackItems.length; i += chunkSize) {\n        chunks.push(feedbackItems.slice(i, i + chunkSize));\n      }\n      \n      // Process each chunk\n      for (let i = 0; i < chunks.length; i++) {\n        const chunk = chunks[i];\n        console.log(`Processing chunk ${i+1} of ${chunks.length}...`);\n        \n        // Process items in this chunk\n        for (const item of chunk) {\n          if (!item.text || !item.user_role) continue;\n          \n          try {\n            // Attempt to use the AI classification service\n            console.log(`Classifying: \"${item.text.substring(0, 30)}...\"`);\n            let result;\n            \n            try {\n              // Try AI service first\n              result = await classifyFeedback(item.text);\n              console.log(\"AI classification result:\", result);\n            } catch (aiError) {\n              // If AI fails, use fallback classification\n              console.warn(\"AI classification failed, using fallback:\", aiError);\n              result = mockClassifyFeedback(item.text);\n              console.log(\"Fallback classification result:\", result);\n            }\n            \n            if (result && result.theme) {\n              // Create or update theme node\n              if (!nodeMap.themes[result.theme]) {\n                const themeId = `theme-${Date.now()}-${Object.keys(nodeMap.themes).length}`;\n                const themeNode = {\n                  id: themeId,\n                  name: result.theme,\n                  type: \"theme\",\n                  feedbackCount: 1\n                };\n                \n                newGraph.nodes.push(themeNode);\n                nodeMap.themes[result.theme] = themeNode;\n                console.log(`Created theme node: ${result.theme}`);\n              } else {\n                // Increment existing theme's feedback count\n                nodeMap.themes[result.theme].feedbackCount += 1;\n              }\n              \n              // Connect persona to theme\n              const personaNode = nodeMap.personas[item.user_role];\n              const themeNode = nodeMap.themes[result.theme];\n              \n              if (personaNode && themeNode) {\n                // Check if link already exists\n                const linkExists = newGraph.links.some(link => \n                  (link.source === personaNode.id && link.target === themeNode.id) ||\n                  (link.source === themeNode.id && link.target === personaNode.id)\n                );\n                \n                if (!linkExists) {\n                  newGraph.links.push({\n                    source: personaNode.id,\n                    target: themeNode.id,\n                    strength: 0.7\n                  });\n                  console.log(`Connected persona \"${personaNode.name}\" to theme \"${themeNode.name}\"`);\n                }\n              }\n            }\n          } catch (err) {\n            console.error(\"Error processing feedback item:\", err);\n          }\n        }\n        \n        // Update graph data every chunk to show progress\n        if (i < chunks.length - 1) {\n          setGraphData({...newGraph});\n          // Small delay to allow UI to update\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      }\n      \n      // Step 3: Generate feature suggestions for top themes\n      console.log(\"Generating feature suggestions...\");\n      const significantThemes = Object.values(nodeMap.themes)\n        .filter(theme => theme.feedbackCount >= 2)\n        .sort((a, b) => b.feedbackCount - a.feedbackCount)\n        .slice(0, 5); // Top 5 themes\n      \n      console.log(`Found ${significantThemes.length} significant themes for feature generation`);\n      \n      for (const theme of significantThemes) {\n        try {\n          // Get feedback related to this theme\n          const relatedFeedback = feedbackItems.filter(item => {\n            const text = item.text.toLowerCase();\n            return text.includes(theme.name.toLowerCase());\n          }).map(item => item.text);\n          \n          // Generate feature ideas\n          console.log(`Generating features for theme \"${theme.name}\" with ${relatedFeedback.length} feedback items`);\n          let featureIdeas;\n          \n          try {\n            // Try AI service first\n            featureIdeas = await generateFeatureIdeas(theme.name, relatedFeedback);\n            console.log(\"AI generated feature ideas:\", featureIdeas);\n          } catch (aiError) {\n            // If AI fails, use mock generation\n            console.warn(\"AI feature generation failed, using fallback:\", aiError);\n            featureIdeas = mockGenerateFeatureIdeas(theme.name, relatedFeedback);\n            console.log(\"Fallback feature ideas:\", featureIdeas);\n          }\n          \n          if (featureIdeas && featureIdeas.length > 0) {\n            // Create feature nodes\n            for (const idea of featureIdeas) {\n              const featureId = `feature-${Date.now()}-${Object.keys(nodeMap.features).length}`;\n              const featureNode = {\n                id: featureId,\n                name: idea.name,\n                description: idea.description || \"\",\n                type: \"feature\",\n                priority: idea.priority || \"Medium\"\n              };\n              \n              newGraph.nodes.push(featureNode);\n              nodeMap.features[featureNode.name] = featureNode;\n              console.log(`Created feature: ${featureNode.name}`);\n              \n              // Link feature to theme\n              newGraph.links.push({\n                source: theme.id,\n                target: featureId,\n                strength: 0.8\n              });\n              \n              // Find personas connected to this theme\n              newGraph.links.forEach(link => {\n                const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n                const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n                \n                if ((sourceId === theme.id || targetId === theme.id)) {\n                  const personaId = sourceId === theme.id ? targetId : sourceId;\n                  const personaNode = newGraph.nodes.find(n => n.id === personaId && n.type === 'persona');\n                  \n                  if (personaNode) {\n                    // Link persona to feature\n                    const existingLink = newGraph.links.some(l => \n                      (l.source === personaId && l.target === featureId) ||\n                      (l.source === featureId && l.target === personaId)\n                    );\n                    \n                    if (!existingLink) {\n                      newGraph.links.push({\n                        source: personaId,\n                        target: featureId,\n                        strength: 0.6\n                      });\n                      console.log(`Connected persona \"${personaNode.name}\" to feature \"${featureNode.name}\"`);\n                    }\n                  }\n                }\n              });\n            }\n          }\n        } catch (err) {\n          console.error(`Error generating features for theme \"${theme.name}\":`, err);\n        }\n      }\n      \n      // Ensure we have at least some features if none were generated\n      if (newGraph.nodes.filter(n => n.type === 'feature').length === 0) {\n        console.log(\"No features were generated - creating fallback features\");\n        \n        // Create a fallback feature for each major theme\n        for (const theme of significantThemes.slice(0, 3)) {\n          const featureId = `feature-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n          const featureNode = {\n            id: featureId,\n            name: `${theme.name} Improvement`,\n            type: \"feature\",\n            priority: theme.feedbackCount >= 5 ? \"High\" : \"Medium\",\n            fallback: true\n          };\n          \n          newGraph.nodes.push(featureNode);\n          console.log(`Created fallback feature: ${featureNode.name}`);\n          \n          // Link to theme\n          newGraph.links.push({\n            source: theme.id,\n            target: featureId,\n            strength: 0.8\n          });\n        }\n      }\n      \n      // Final graph update\n      console.log(\"Finalizing graph...\");\n      console.log(\"Final graph has:\", newGraph.nodes.length, \"nodes and\", newGraph.links.length, \"links\");\n      console.log(\"Nodes by type:\", {\n        personas: newGraph.nodes.filter(n => n.type === 'persona').length,\n        themes: newGraph.nodes.filter(n => n.type === 'theme').length,\n        features: newGraph.nodes.filter(n => n.type === 'feature').length\n      });\n      \n      setGraphData(newGraph);\n      \n      // Pre-compute positions for better visualization\n      setTimeout(() => {\n        if (simulationRef.current) {\n          simulationRef.current.stop();\n          \n          // Create a temporary simulation to calculate positions\n          const tempSimulation = d3.forceSimulation(newGraph.nodes)\n            .force(\"link\", d3.forceLink(newGraph.links).id(d => d.id).distance(100))\n            .force(\"charge\", d3.forceManyBody().strength(-300))\n            .force(\"center\", d3.forceCenter(dimensions.width/2, dimensions.height/2))\n            .force(\"collide\", d3.forceCollide(40));\n          \n          // Run several ticks to get a good initial layout\n          for (let i = 0; i < 100; i++) {\n            tempSimulation.tick();\n          }\n          \n          tempSimulation.stop();\n        }\n        \n        setIsAIProcessing(false);\n        setLoading(false);\n        console.log(\"Import processing complete\");\n      }, 100);\n    };\n    \n    // Start the processing\n    processChunks().catch(err => {\n      console.error(\"Error in processChunks:\", err);\n      setError(\"Error processing feedback. Please try again.\");\n      setIsAIProcessing(false);\n      setLoading(false);\n    });\n  }, [dimensions]);\n\n  // Update the handleNodeClick function to properly handle all node types with complete data\n  const handleNodeClick = useCallback((node, event) => {\n    if (!node) return;\n    \n    // Prevent text selection and set up the node selection\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (window.getSelection) {\n        window.getSelection().removeAllRanges();\n      }\n    }\n    \n    console.log(\"Node clicked, setting panel visible:\", node);\n    setSelectedNode(node);\n    \n    // Find connected nodes\n    const connectedLinks = graphData.links.filter(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === node.id || targetId === node.id;\n    });\n    \n    const connectedNodeIds = connectedLinks.map(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === node.id ? targetId : sourceId;\n    });\n    \n    const connectedNodes = graphData.nodes.filter(n => connectedNodeIds.includes(n.id));\n    \n    if (node.type === 'theme') {\n      // Theme node view - collect all relevant data\n      const connectedFeedback = connectedNodes.filter(n => n.type === \"feedback\" || n.type.startsWith(\"feedback\"));\n      const connectedPersonas = connectedNodes.filter(n => n.type === \"persona\");\n      \n      const sentimentCount = {\n        Positive: connectedFeedback.filter(n => n.sentiment === \"Positive\" || n.type === \"feedback-positive\").length,\n        Negative: connectedFeedback.filter(n => n.sentiment === \"Negative\" || n.type === \"feedback-negative\").length,\n        Neutral: connectedFeedback.filter(n => n.sentiment === \"Neutral\" || \n                                            (n.type !== \"feedback-positive\" && n.type !== \"feedback-negative\")).length\n      };\n      \n      // Example feedback for this theme (get full text)\n      const exampleFeedback = connectedFeedback.slice(0, 3).map(f => ({\n        text: f.fullText || f.originalText || f.completeText || f.text || f.content || \n              f.feedback || f.description || f.name || \"\",\n        sentiment: f.sentiment || \n                  (f.type === \"feedback-positive\" ? \"Positive\" : \n                   f.type === \"feedback-negative\" ? \"Negative\" : \"Neutral\")\n      }));\n      \n      setAIInsights({\n        isThemeView: true,\n        isPersonaView: false,\n        isFeedbackView: false,\n        theme: node.name,\n        feedbackCount: connectedFeedback.length,\n        sentimentDistribution: sentimentCount,\n        personas: connectedPersonas.map(p => p.name),\n        exampleFeedback: exampleFeedback,\n        insights: node.insights || insights.filter(i => i.relatedThemes?.includes(node.name)) || []\n      });\n    } \n    else if (node.type === 'persona') {\n      // Persona node view - collect all related themes and feedback\n      const connectedThemes = connectedNodes.filter(n => n.type === \"theme\");\n      \n      // Find all feedback indirectly connected to this persona through themes\n      let relatedFeedback = [];\n      \n      // First get directly connected feedback\n      const directFeedback = connectedNodes.filter(n => n.type === \"feedback\" || n.type.startsWith(\"feedback\"));\n      relatedFeedback = [...directFeedback];\n      \n      // Then get feedback connected through themes\n      for (const theme of connectedThemes) {\n        const themeLinks = graphData.links.filter(link => {\n          const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n          const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n          return (sourceId === theme.id || targetId === theme.id);\n        });\n        \n        const themeFeedbackIds = themeLinks.map(link => {\n          const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n          const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n          const connectedId = sourceId === theme.id ? targetId : sourceId;\n          return connectedId;\n        });\n        \n        const themeFeedback = graphData.nodes.filter(n => \n          themeFeedbackIds.includes(n.id) && \n          (n.type === \"feedback\" || n.type.startsWith(\"feedback\")) && \n          !relatedFeedback.some(f => f.id === n.id)\n        );\n        \n        relatedFeedback = [...relatedFeedback, ...themeFeedback];\n      }\n      \n      // Get sentiment distribution for this persona's feedback\n      const sentimentCount = {\n        Positive: relatedFeedback.filter(n => n.sentiment === \"Positive\" || n.type === \"feedback-positive\").length,\n        Negative: relatedFeedback.filter(n => n.sentiment === \"Negative\" || n.type === \"feedback-negative\").length,\n        Neutral: relatedFeedback.filter(n => n.sentiment === \"Neutral\" || \n                                         (n.type !== \"feedback-positive\" && n.type !== \"feedback-negative\")).length\n      };\n      \n      // Example feedback for this persona (get full text)\n      const exampleFeedback = relatedFeedback.slice(0, 3).map(f => ({\n        text: f.fullText || f.originalText || f.completeText || f.text || f.content || \n              f.feedback || f.description || f.name || \"\",\n        sentiment: f.sentiment || \n                  (f.type === \"feedback-positive\" ? \"Positive\" : \n                   f.type === \"feedback-negative\" ? \"Negative\" : \"Neutral\")\n      }));\n      \n      setAIInsights({\n        isThemeView: false,\n        isPersonaView: true,\n        isFeedbackView: false,\n        persona: node.name,\n        feedbackCount: relatedFeedback.length,\n        themes: connectedThemes.map(t => t.name),\n        sentimentDistribution: sentimentCount,\n        exampleFeedback: exampleFeedback,\n        insights: node.insights || insights.filter(i => i.relatedPersonas?.includes(node.name)) || []\n      });\n    }\n    else if (node.type.startsWith('feedback') || node.type === 'feedback') {\n      console.log(\"Feedback node clicked:\", node);\n      \n      // Use node.title as the full feedback text\n      let fullText = node.title || \"No feedback text available\";\n      \n      // If node.title isn't available, try other sources\n      if (!node.title) {\n        // Try standard fields\n        fullText = node.text || node.content || node.name || \"No feedback text available\";\n        \n        // Check feedbackItems if available\n        if (feedbackItems && feedbackItems.length > 0) {\n          const matchingItem = feedbackItems.find(item => item.id === node.id);\n          if (matchingItem && matchingItem.text) {\n            fullText = matchingItem.text;\n          }\n        }\n      }\n      \n      // Get related themes\n      const relatedThemes = connectedNodes\n        .filter(n => n.type === \"theme\")\n        .map(n => n.name);\n      \n      setAIInsights({\n        isThemeView: false,\n        isPersonaView: false,\n        isFeedbackView: true,\n        text: fullText,\n        sentiment: node.sentiment || 'Neutral',\n        persona: node.user_role || node.persona || node.user || \"Unknown user\",\n        themes: node.theme ? [node.theme] : (node.themes || relatedThemes || []),\n        id: node.id || \"Unknown\",\n        date: node.timestamp || node.date || \"Unknown\",\n        insights: node.insights || []\n      });\n    }\n    \n    // Make sure to call this at the end of all node types\n    setShowAIInsightsPanel(true);\n  }, [graphData, feedbackItems]);\n\n  // Zoom control functions\n  const zoomIn = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    \n    const svg = d3.select(svgRef.current);\n    const currentTransform = d3.zoomTransform(svg.node());\n    \n    svg.transition()\n      .duration(300)\n      .call(\n        zoomRef.current.transform,\n        d3.zoomIdentity\n          .translate(currentTransform.x, currentTransform.y)\n          .scale(currentTransform.k * 1.3)\n      );\n  }, []);\n\n  const zoomOut = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    \n    const svg = d3.select(svgRef.current);\n    const currentTransform = d3.zoomTransform(svg.node());\n    \n    svg.transition()\n      .duration(300)\n      .call(\n        zoomRef.current.transform,\n        d3.zoomIdentity\n          .translate(currentTransform.x, currentTransform.y)\n          .scale(currentTransform.k / 1.3)\n      );\n  }, []);\n\n  const centerView = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    \n    const svg = d3.select(svgRef.current);\n    \n    // Calculate the center point\n    const centerX = dimensions.width / 2;\n    const centerY = dimensions.height / 2;\n    \n    // Create a transform that centers the view\n    const transform = d3.zoomIdentity\n      .translate(centerX, centerY)\n      .scale(1)\n      .translate(-centerX, -centerY);\n    \n    // Apply the transform with a smooth transition\n    svg.transition()\n      .duration(750)\n      .call(zoomRef.current.transform, transform);\n  }, [dimensions]);\n\n  const fitToScreen = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current || !graphData.nodes.length) return;\n    \n    const svg = d3.select(svgRef.current);\n    \n    // Find the bounds of all nodes\n    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n    \n    graphData.nodes.forEach(node => {\n      if (!node.x || !node.y) return;\n      \n      if (node.x < minX) minX = node.x;\n      if (node.y < minY) minY = node.y;\n      if (node.x > maxX) maxX = node.x;\n      if (node.y > maxY) maxY = node.y;\n    });\n    \n    // If we don't have valid bounds, center view instead\n    if (!isFinite(minX) || !isFinite(minY) || !isFinite(maxX) || !isFinite(maxY)) {\n      centerView();\n      return;\n    }\n    \n    // Add padding\n    const padding = 50;\n    minX -= padding;\n    minY -= padding;\n    maxX += padding;\n    maxY += padding;\n    \n    // Calculate width and height of the content\n    const contentWidth = maxX - minX;\n    const contentHeight = maxY - minY;\n    \n    // Calculate scale to fit the content\n    const scale = Math.min(\n      dimensions.width / contentWidth,\n      dimensions.height / contentHeight,\n      2 // Maximum scale factor\n    ) * 0.9; // 90% to add some margin\n    \n    // Calculate the center of the content\n    const centerX = (minX + maxX) / 2;\n    const centerY = (minY + maxY) / 2;\n    \n    // Create a transform that centers and scales the content\n    const transform = d3.zoomIdentity\n      .translate(dimensions.width / 2, dimensions.height / 2)\n      .scale(scale)\n      .translate(-centerX, -centerY);\n    \n    // Apply the transform with a smooth transition\n    svg.transition()\n      .duration(750)\n      .call(zoomRef.current.transform, transform);\n  }, [dimensions, graphData.nodes, centerView]);\n\n  // Toggle mini-map visibility\n  const toggleMiniMap = useCallback(() => {\n    setShowMiniMap(!showMiniMap);\n  }, [showMiniMap]);\n\n  const handleDataImported = (importedData) => {\n    if (importedData) {\n      setGraphData({ \n        nodes: importedData.nodes || [], \n        links: importedData.links || [] \n      });\n      setInsights(importedData.insights || []);\n    }\n  };\n\n  // Add these functions back\n  const exportData = useCallback(() => {\n    // Prepare complete export with all AI data\n    const completeExportData = {\n      // Include the graph structure\n      nodes: graphData.nodes.map(node => ({\n        ...node,\n        // If there are any D3-specific properties that shouldn't be exported, filter them out here\n        fx: undefined,\n        fy: undefined,\n        index: undefined,\n        vx: undefined,\n        vy: undefined,\n        x: undefined,\n        y: undefined\n      })),\n      links: graphData.links.map(link => {\n        // Ensure links use id strings rather than object references\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n        \n        return {\n          source: sourceId,\n          target: targetId,\n          strength: link.strength || 0.5\n        };\n      }),\n      \n      // Include all AI-generated insights\n      insights: insights || [],\n      \n      // Include analytics data with sentiment distribution\n      analytics: {\n        ...analyticsData,\n        // Ensure sentiment distribution is included\n        sentimentDistribution: analyticsData?.sentimentDistribution || {\n          Positive: graphData.nodes.filter(n => n.type === 'feedback' && n.sentiment === 'Positive').length,\n          Negative: graphData.nodes.filter(n => n.type === 'feedback' && n.sentiment === 'Negative').length,\n          Neutral: graphData.nodes.filter(n => n.type === 'feedback' && n.sentiment === 'Neutral').length\n        },\n        exportDate: new Date().toISOString(),\n        exportVersion: \"1.0\"\n      },\n      \n      // Include raw feedback data if available\n      feedbackItems: feedbackItems || []\n    };\n\n    // Convert to JSON string with nice formatting\n    const dataStr = JSON.stringify(completeExportData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n    const exportFileDefaultName = 'feedback-insights-data.json';\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n    \n    console.log(\"Exported data with AI insights and sentiment analysis\");\n  }, [graphData, insights, analyticsData, feedbackItems]);\n\n  // Reset to initial data\n  const resetVisualization = useCallback(() => {\n    if (window.confirm(\"Are you sure you want to reset? This will remove all custom data.\")) {\n      setGraphData(initialData);\n      setSelectedNode(null);\n      setHighlightMode('none');\n    }\n  }, []);\n\n  // Loading screen\n  if (loading) {\n    return (\n      <div className=\"flex flex-col h-full items-center justify-center bg-gray-50\">\n        <div className=\"text-2xl text-blue-800 mb-4\">Loading Insights Network...</div>\n        <div className=\"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n\n  // Error screen\n  if (error) {\n    return (\n      <div className=\"flex flex-col h-full items-center justify-center bg-gray-50\">\n        <div className=\"text-2xl text-red-800 mb-4\">Error Loading Data</div>\n        <div className=\"text-gray-600\">{error}</div>\n        <button \n          className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          onClick={() => window.location.reload()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  // Then in the return statement, replace the existing AI panel with the improved one\n  return (\n    <div className=\"relative w-full h-full\">\n      {/* Empty state - show only when no data is loaded */}\n      {(!graphData || !graphData.nodes || graphData.nodes.length === 0) && (\n        <div className=\"absolute inset-0 flex items-center justify-center p-8\">\n          <div className=\"max-w-2xl bg-white rounded-lg shadow-lg p-8 text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">\n              Getting Started with Feedback Force\n            </h2>\n            \n            <div className=\"text-left space-y-6\">\n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0 bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-4 mt-1\">\n                  1\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-gray-700 mb-2\">Prepare Your Data</h3>\n                  <p className=\"text-gray-600 mb-2\">Format your feedback as JSON following this structure:</p>\n                  <pre className=\"bg-gray-50 p-4 rounded-md text-sm overflow-x-auto border border-gray-200\">\n                    {`{\n  \"id\": \"feedback-id\",\n  \"text\": \"The actual feedback comment text\",\n  \"user_role\": \"User role (e.g. Admin)\",\n  \"timestamp\": \"xxx\"\n}`}\n                  </pre>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0 bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-4 mt-1\">\n                  2\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-gray-700 mb-2\">Import Your Data</h3>\n                  <p className=\"text-gray-600\">Click the <span className=\"font-medium text-blue-600\">Import</span> button to upload your JSON feedback file</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0 bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-4 mt-1\">\n                  3\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-gray-700 mb-2\">Visualize</h3>\n                  <p className=\"text-gray-600\">Use <span className=\"font-medium text-blue-600\">\"Center View,\"</span> <span className=\"font-medium text-blue-600\">\"Mini-Map,\"</span> or <span className=\"font-medium text-blue-600\">\"Fit to Screen\"</span> to explore your feedback network</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0 bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center mr-4 mt-1\">\n                  4\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-gray-700 mb-2\">Analyze</h3>\n                  <p className=\"text-gray-600\">Apply filters with <span className=\"font-medium text-blue-600\">Highlight</span>, <span className=\"font-medium text-blue-600\">Themes</span>, and <span className=\"font-medium text-blue-600\">User Role</span> options to discover patterns</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Existing visualization code */}\n      {/* ... */}\n    </div>\n  );\n};\n\nexport default UserResearchNetwork;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}