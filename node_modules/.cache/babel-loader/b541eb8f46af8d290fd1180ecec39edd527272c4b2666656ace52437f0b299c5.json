{"ast":null,"code":"/**\n * Data processing utility for user feedback visualization\n */\n\n// Simple keyword-based theme extraction\nconst extractThemesFromText = text => {\n  // Common themes in user feedback and associated keywords\n  const themeKeywords = {\n    'Performance': ['slow', 'fast', 'speed', 'load', 'time', 'performance', 'lag', 'wait', 'responsive'],\n    'UI/UX': ['ui', 'interface', 'design', 'layout', 'look', 'feel', 'confusing', 'intuitive', 'user-friendly', 'difficult'],\n    'Feature Request': ['add', 'feature', 'missing', 'would like', 'could use', 'should have', 'wish', 'want'],\n    'Bug': ['bug', 'issue', 'problem', 'doesn\\'t work', 'broken', 'error', 'fail', 'crash', 'not working'],\n    'Navigation': ['find', 'locate', 'menu', 'navigation', 'search', 'access', 'navigate', 'path', 'route'],\n    'Mobile Experience': ['mobile', 'phone', 'app', 'tablet', 'responsive', 'screen size'],\n    'Content': ['content', 'text', 'image', 'video', 'information', 'data', 'read', 'view'],\n    'Security': ['secure', 'security', 'privacy', 'safe', 'protect', 'login', 'password'],\n    'Dashboard': ['dashboard', 'statistics', 'metrics', 'analytics', 'charts', 'data visualization'],\n    'Positive Feedback': ['great', 'good', 'excellent', 'love', 'like', 'best', 'amazing', 'awesome']\n  };\n  const extractedThemes = [];\n  const textLower = text.toLowerCase();\n\n  // Check each theme's keywords against the text\n  Object.entries(themeKeywords).forEach(([theme, keywords]) => {\n    for (const keyword of keywords) {\n      if (textLower.includes(keyword.toLowerCase())) {\n        extractedThemes.push(theme);\n        break; // Once we've found a match for this theme, no need to check other keywords\n      }\n    }\n  });\n\n  // If no themes were found, categorize as \"General Feedback\"\n  if (extractedThemes.length === 0) {\n    extractedThemes.push(\"General Feedback\");\n  }\n  return extractedThemes;\n};\n\n// Process raw feedback data into visualization-ready format\nexport const processFeedbackData = rawData => {\n  if (!rawData || !Array.isArray(rawData)) {\n    console.error(\"Invalid data format. Expected an array.\");\n    return {\n      nodes: [],\n      links: [],\n      themes: []\n    };\n  }\n  try {\n    console.log(\"Processing feedback data:\", rawData);\n\n    // Process each feedback item to extract themes\n    const processedData = rawData.map((item, index) => {\n      // Extract themes from feedback text using NLP-like approach\n      let themes = [];\n      if (item.text) {\n        // Extract themes from text using keyword matching\n        themes = extractThemesFromText(item.text);\n      } else if (item.themes && Array.isArray(item.themes)) {\n        // If themes are already provided, use them\n        themes = item.themes;\n      } else if (item.theme) {\n        // If a single theme is provided, use it\n        themes = [item.theme];\n      }\n      return {\n        ...item,\n        themes: themes\n      };\n    });\n\n    // Extract all unique themes\n    const themeSet = new Set();\n    processedData.forEach(item => {\n      if (item.themes && Array.isArray(item.themes)) {\n        item.themes.forEach(theme => themeSet.add(theme));\n      }\n    });\n    const themes = Array.from(themeSet);\n\n    // Create nodes based on feedback items and themes\n    const nodes = [];\n\n    // Add all themes as nodes\n    themes.forEach(theme => {\n      nodes.push({\n        id: `theme-${theme.replace(/\\s+/g, '-').toLowerCase()}`,\n        name: theme,\n        type: 'theme',\n        feedbackCount: processedData.filter(item => item.themes && item.themes.includes(theme)).length\n      });\n    });\n\n    // Add all feedback items as nodes\n    processedData.forEach((item, index) => {\n      nodes.push({\n        id: item.id || `feedback-${index}`,\n        name: item.text ? item.text.substring(0, 30) + '...' : `Feedback ${index + 1}`,\n        feedback: item.text || \"\",\n        type: 'feedback',\n        user_role: item.user_role || \"Anonymous\",\n        timestamp: item.timestamp,\n        themes: item.themes || []\n      });\n    });\n\n    // Add all user roles (personas) as nodes\n    const roles = new Set();\n    processedData.forEach(item => {\n      if (item.user_role) {\n        roles.add(item.user_role);\n      }\n    });\n    Array.from(roles).forEach(role => {\n      nodes.push({\n        id: `persona-${role.replace(/\\s+/g, '-').toLowerCase()}`,\n        name: role,\n        type: 'persona',\n        feedbackCount: processedData.filter(item => item.user_role === role).length\n      });\n    });\n\n    // Generate links between nodes\n    const links = [];\n\n    // Link feedback to themes\n    processedData.forEach((item, index) => {\n      const feedbackId = item.id || `feedback-${index}`;\n\n      // Connect feedback to themes\n      if (item.themes && item.themes.length > 0) {\n        item.themes.forEach(theme => {\n          const themeId = `theme-${theme.replace(/\\s+/g, '-').toLowerCase()}`;\n          links.push({\n            source: feedbackId,\n            target: themeId,\n            strength: 0.7\n          });\n        });\n      }\n\n      // Connect feedback to user role (persona)\n      if (item.user_role) {\n        const personaId = `persona-${item.user_role.replace(/\\s+/g, '-').toLowerCase()}`;\n        links.push({\n          source: feedbackId,\n          target: personaId,\n          strength: 0.9\n        });\n      }\n    });\n\n    // Generate theme connections (themes are connected if they share feedback items)\n    const themeConnections = {};\n    processedData.forEach(item => {\n      if (item.themes && item.themes.length > 1) {\n        // For each pair of themes in this feedback\n        for (let i = 0; i < item.themes.length; i++) {\n          for (let j = i + 1; j < item.themes.length; j++) {\n            const theme1 = item.themes[i];\n            const theme2 = item.themes[j];\n\n            // Create a unique key for this theme pair\n            const key = [theme1, theme2].sort().join('---');\n            if (themeConnections[key]) {\n              themeConnections[key].strength += 0.1;\n              themeConnections[key].count += 1;\n            } else {\n              themeConnections[key] = {\n                source: `theme-${theme1.replace(/\\s+/g, '-').toLowerCase()}`,\n                target: `theme-${theme2.replace(/\\s+/g, '-').toLowerCase()}`,\n                strength: 0.5,\n                count: 1\n              };\n            }\n          }\n        }\n      }\n    });\n\n    // Add theme connections to links\n    Object.values(themeConnections).forEach(conn => {\n      links.push({\n        source: conn.source,\n        target: conn.target,\n        strength: Math.min(conn.strength, 1),\n        label: `${conn.count} shared feedback`\n      });\n    });\n\n    // Generate AI insights summary\n    const aiInsights = {\n      totalFeedback: processedData.length,\n      themeCount: themes.length,\n      topThemes: [...themes].slice(0, 5),\n      // Top 5 themes\n      personaCount: roles.size,\n      topPersonas: [...roles].slice(0, 3),\n      themeFeedbackCounts: themes.map(theme => ({\n        theme,\n        count: processedData.filter(item => item.themes && item.themes.includes(theme)).length\n      })).sort((a, b) => b.count - a.count)\n    };\n\n    // Return complete processed data\n    return {\n      nodes,\n      links,\n      themes,\n      aiInsights\n    };\n  } catch (error) {\n    console.error(\"Error processing feedback data:\", error);\n    return {\n      nodes: [],\n      links: [],\n      themes: [],\n      aiInsights: {}\n    };\n  }\n};","map":{"version":3,"names":["extractThemesFromText","text","themeKeywords","extractedThemes","textLower","toLowerCase","Object","entries","forEach","theme","keywords","keyword","includes","push","length","processFeedbackData","rawData","Array","isArray","console","error","nodes","links","themes","log","processedData","map","item","index","themeSet","Set","add","from","id","replace","name","type","feedbackCount","filter","substring","feedback","user_role","timestamp","roles","role","feedbackId","themeId","source","target","strength","personaId","themeConnections","i","j","theme1","theme2","key","sort","join","count","values","conn","Math","min","label","aiInsights","totalFeedback","themeCount","topThemes","slice","personaCount","size","topPersonas","themeFeedbackCounts","a","b"],"sources":["/Users/faisalshariff/Feedback Force/src/utils/dataProcessor.js"],"sourcesContent":["/**\n * Data processing utility for user feedback visualization\n */\n\n// Simple keyword-based theme extraction\nconst extractThemesFromText = (text) => {\n  // Common themes in user feedback and associated keywords\n  const themeKeywords = {\n    'Performance': ['slow', 'fast', 'speed', 'load', 'time', 'performance', 'lag', 'wait', 'responsive'],\n    'UI/UX': ['ui', 'interface', 'design', 'layout', 'look', 'feel', 'confusing', 'intuitive', 'user-friendly', 'difficult'],\n    'Feature Request': ['add', 'feature', 'missing', 'would like', 'could use', 'should have', 'wish', 'want'],\n    'Bug': ['bug', 'issue', 'problem', 'doesn\\'t work', 'broken', 'error', 'fail', 'crash', 'not working'],\n    'Navigation': ['find', 'locate', 'menu', 'navigation', 'search', 'access', 'navigate', 'path', 'route'],\n    'Mobile Experience': ['mobile', 'phone', 'app', 'tablet', 'responsive', 'screen size'],\n    'Content': ['content', 'text', 'image', 'video', 'information', 'data', 'read', 'view'],\n    'Security': ['secure', 'security', 'privacy', 'safe', 'protect', 'login', 'password'],\n    'Dashboard': ['dashboard', 'statistics', 'metrics', 'analytics', 'charts', 'data visualization'],\n    'Positive Feedback': ['great', 'good', 'excellent', 'love', 'like', 'best', 'amazing', 'awesome']\n  };\n\n  const extractedThemes = [];\n  const textLower = text.toLowerCase();\n\n  // Check each theme's keywords against the text\n  Object.entries(themeKeywords).forEach(([theme, keywords]) => {\n    for (const keyword of keywords) {\n      if (textLower.includes(keyword.toLowerCase())) {\n        extractedThemes.push(theme);\n        break; // Once we've found a match for this theme, no need to check other keywords\n      }\n    }\n  });\n\n  // If no themes were found, categorize as \"General Feedback\"\n  if (extractedThemes.length === 0) {\n    extractedThemes.push(\"General Feedback\");\n  }\n\n  return extractedThemes;\n};\n\n// Process raw feedback data into visualization-ready format\nexport const processFeedbackData = (rawData) => {\n  if (!rawData || !Array.isArray(rawData)) {\n    console.error(\"Invalid data format. Expected an array.\");\n    return { nodes: [], links: [], themes: [] };\n  }\n\n  try {\n    console.log(\"Processing feedback data:\", rawData);\n    \n    // Process each feedback item to extract themes\n    const processedData = rawData.map((item, index) => {\n      // Extract themes from feedback text using NLP-like approach\n      let themes = [];\n      \n      if (item.text) {\n        // Extract themes from text using keyword matching\n        themes = extractThemesFromText(item.text);\n      } else if (item.themes && Array.isArray(item.themes)) {\n        // If themes are already provided, use them\n        themes = item.themes;\n      } else if (item.theme) {\n        // If a single theme is provided, use it\n        themes = [item.theme];\n      }\n      \n      return {\n        ...item,\n        themes: themes\n      };\n    });\n    \n    // Extract all unique themes\n    const themeSet = new Set();\n    processedData.forEach(item => {\n      if (item.themes && Array.isArray(item.themes)) {\n        item.themes.forEach(theme => themeSet.add(theme));\n      }\n    });\n    \n    const themes = Array.from(themeSet);\n    \n    // Create nodes based on feedback items and themes\n    const nodes = [];\n    \n    // Add all themes as nodes\n    themes.forEach(theme => {\n      nodes.push({\n        id: `theme-${theme.replace(/\\s+/g, '-').toLowerCase()}`,\n        name: theme,\n        type: 'theme',\n        feedbackCount: processedData.filter(item => \n          item.themes && item.themes.includes(theme)\n        ).length\n      });\n    });\n    \n    // Add all feedback items as nodes\n    processedData.forEach((item, index) => {\n      nodes.push({\n        id: item.id || `feedback-${index}`,\n        name: item.text ? item.text.substring(0, 30) + '...' : `Feedback ${index + 1}`,\n        feedback: item.text || \"\",\n        type: 'feedback',\n        user_role: item.user_role || \"Anonymous\",\n        timestamp: item.timestamp,\n        themes: item.themes || []\n      });\n    });\n    \n    // Add all user roles (personas) as nodes\n    const roles = new Set();\n    processedData.forEach(item => {\n      if (item.user_role) {\n        roles.add(item.user_role);\n      }\n    });\n    \n    Array.from(roles).forEach(role => {\n      nodes.push({\n        id: `persona-${role.replace(/\\s+/g, '-').toLowerCase()}`,\n        name: role,\n        type: 'persona',\n        feedbackCount: processedData.filter(item => item.user_role === role).length\n      });\n    });\n    \n    // Generate links between nodes\n    const links = [];\n    \n    // Link feedback to themes\n    processedData.forEach((item, index) => {\n      const feedbackId = item.id || `feedback-${index}`;\n      \n      // Connect feedback to themes\n      if (item.themes && item.themes.length > 0) {\n        item.themes.forEach(theme => {\n          const themeId = `theme-${theme.replace(/\\s+/g, '-').toLowerCase()}`;\n          links.push({\n            source: feedbackId,\n            target: themeId,\n            strength: 0.7\n          });\n        });\n      }\n      \n      // Connect feedback to user role (persona)\n      if (item.user_role) {\n        const personaId = `persona-${item.user_role.replace(/\\s+/g, '-').toLowerCase()}`;\n        links.push({\n          source: feedbackId,\n          target: personaId,\n          strength: 0.9\n        });\n      }\n    });\n    \n    // Generate theme connections (themes are connected if they share feedback items)\n    const themeConnections = {};\n    \n    processedData.forEach(item => {\n      if (item.themes && item.themes.length > 1) {\n        // For each pair of themes in this feedback\n        for (let i = 0; i < item.themes.length; i++) {\n          for (let j = i + 1; j < item.themes.length; j++) {\n            const theme1 = item.themes[i];\n            const theme2 = item.themes[j];\n            \n            // Create a unique key for this theme pair\n            const key = [theme1, theme2].sort().join('---');\n            \n            if (themeConnections[key]) {\n              themeConnections[key].strength += 0.1;\n              themeConnections[key].count += 1;\n            } else {\n              themeConnections[key] = {\n                source: `theme-${theme1.replace(/\\s+/g, '-').toLowerCase()}`,\n                target: `theme-${theme2.replace(/\\s+/g, '-').toLowerCase()}`,\n                strength: 0.5,\n                count: 1\n              };\n            }\n          }\n        }\n      }\n    });\n    \n    // Add theme connections to links\n    Object.values(themeConnections).forEach(conn => {\n      links.push({\n        source: conn.source,\n        target: conn.target,\n        strength: Math.min(conn.strength, 1),\n        label: `${conn.count} shared feedback`\n      });\n    });\n    \n    // Generate AI insights summary\n    const aiInsights = {\n      totalFeedback: processedData.length,\n      themeCount: themes.length,\n      topThemes: [...themes].slice(0, 5), // Top 5 themes\n      personaCount: roles.size,\n      topPersonas: [...roles].slice(0, 3),\n      themeFeedbackCounts: themes.map(theme => ({\n        theme,\n        count: processedData.filter(item => \n          item.themes && item.themes.includes(theme)\n        ).length\n      })).sort((a, b) => b.count - a.count)\n    };\n    \n    // Return complete processed data\n    return {\n      nodes,\n      links,\n      themes,\n      aiInsights\n    };\n  } catch (error) {\n    console.error(\"Error processing feedback data:\", error);\n    return { nodes: [], links: [], themes: [], aiInsights: {} };\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}