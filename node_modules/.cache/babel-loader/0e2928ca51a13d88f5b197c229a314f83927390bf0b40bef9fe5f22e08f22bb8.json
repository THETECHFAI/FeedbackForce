{"ast":null,"code":"import axios from 'axios';\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\n\n// You'll need to set this in your environment variables\nconst API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\nexport const classifyFeedback = async (feedbackItems, existingThemes = []) => {\n  try {\n    const existingThemeNames = existingThemes.map(theme => theme.name);\n    const prompt = `\nYou are an expert user researcher analyzing product feedback. \nAnalyze the following user feedback items and:\n1. Categorize each into appropriate themes\n2. Identify if any feedback requires new themes (not in the existing themes list)\n3. Assign a priority score (1-10) based on urgency and impact\n4. Analyze sentiment (positive, negative, neutral)\n\nExisting themes: ${existingThemeNames.length > 0 ? existingThemeNames.join(', ') : 'None yet'}\n\nFeedback items:\n${feedbackItems.map((item, index) => `${index + 1}. \"${item.text}\" (from ${item.user_role})`).join('\\n')}\n\nRespond in JSON format like this:\n{\n  \"results\": [\n    {\n      \"feedbackIndex\": 0,\n      \"theme\": \"Theme Name\",\n      \"isNewTheme\": true/false,\n      \"priority\": 7,\n      \"sentiment\": \"negative\",\n      \"keywords\": [\"keyword1\", \"keyword2\"]\n    }\n  ],\n  \"newThemes\": [\n    {\n      \"name\": \"New Theme Name\",\n      \"description\": \"Brief description of what this theme encompasses\"\n    }\n  ]\n}\n`;\n    const response = await axios.post(OPENAI_API_URL, {\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: \"You are an AI assistant that analyzes user feedback and categorizes it into themes.\"\n      }, {\n        role: \"user\",\n        content: prompt\n      }],\n      temperature: 0.3,\n      max_tokens: 2000\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEY}`\n      }\n    });\n\n    // Extract and parse the JSON response\n    const content = response.data.choices[0].message.content;\n    const jsonMatch = content.match(/```json\\n([\\s\\S]*)\\n```/) || content.match(/{[\\s\\S]*}/);\n    if (jsonMatch) {\n      return JSON.parse(jsonMatch[1] || jsonMatch[0]);\n    } else {\n      throw new Error(\"Failed to parse JSON response from OpenAI\");\n    }\n  } catch (error) {\n    console.error(\"Error classifying feedback:\", error);\n    throw error;\n  }\n};\nexport const generateFeatureIdeas = async themes => {\n  try {\n    const prompt = `\nYou are a product strategist helping to convert user feedback themes into actionable feature ideas.\nFor each of the following themes, suggest 1-2 feature ideas that would address the user needs.\n\nThemes:\n${themes.map((theme, index) => `${index + 1}. \"${theme.name}\" (${theme.feedbackCount} feedback items, priority: ${theme.priority || 'Medium'})`).join('\\n')}\n\nFor each theme, provide:\n1. Feature name\n2. Brief description\n3. Priority (High/Medium/Low)\n4. Implementation complexity (High/Medium/Low)\n\nRespond in JSON format like this:\n{\n  \"features\": [\n    {\n      \"themeIndex\": 0,\n      \"name\": \"Feature Name\",\n      \"description\": \"Brief description of the feature\",\n      \"priority\": \"High\",\n      \"complexity\": \"Medium\"\n    }\n  ]\n}\n`;\n    const response = await axios.post(OPENAI_API_URL, {\n      model: \"gpt-4\",\n      messages: [{\n        role: \"system\",\n        content: \"You are an AI assistant that generates feature ideas based on user feedback themes.\"\n      }, {\n        role: \"user\",\n        content: prompt\n      }],\n      temperature: 0.7,\n      max_tokens: 2000\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_KEY}`\n      }\n    });\n\n    // Extract and parse the JSON response\n    const content = response.data.choices[0].message.content;\n    const jsonMatch = content.match(/```json\\n([\\s\\S]*)\\n```/) || content.match(/{[\\s\\S]*}/);\n    if (jsonMatch) {\n      return JSON.parse(jsonMatch[1] || jsonMatch[0]);\n    } else {\n      throw new Error(\"Failed to parse JSON response from OpenAI\");\n    }\n  } catch (error) {\n    console.error(\"Error generating feature ideas:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","OPENAI_API_URL","API_KEY","process","env","REACT_APP_OPENAI_API_KEY","classifyFeedback","feedbackItems","existingThemes","existingThemeNames","map","theme","name","prompt","length","join","item","index","text","user_role","response","post","model","messages","role","content","temperature","max_tokens","headers","data","choices","message","jsonMatch","match","JSON","parse","Error","error","console","generateFeatureIdeas","themes","feedbackCount","priority"],"sources":["/Users/faisalshariff/Feedback Force/src/services/openaiService.js"],"sourcesContent":["import axios from 'axios';\n\nconst OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';\n\n// You'll need to set this in your environment variables\nconst API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n\nexport const classifyFeedback = async (feedbackItems, existingThemes = []) => {\n  try {\n    const existingThemeNames = existingThemes.map(theme => theme.name);\n    \n    const prompt = `\nYou are an expert user researcher analyzing product feedback. \nAnalyze the following user feedback items and:\n1. Categorize each into appropriate themes\n2. Identify if any feedback requires new themes (not in the existing themes list)\n3. Assign a priority score (1-10) based on urgency and impact\n4. Analyze sentiment (positive, negative, neutral)\n\nExisting themes: ${existingThemeNames.length > 0 ? existingThemeNames.join(', ') : 'None yet'}\n\nFeedback items:\n${feedbackItems.map((item, index) => `${index + 1}. \"${item.text}\" (from ${item.user_role})`).join('\\n')}\n\nRespond in JSON format like this:\n{\n  \"results\": [\n    {\n      \"feedbackIndex\": 0,\n      \"theme\": \"Theme Name\",\n      \"isNewTheme\": true/false,\n      \"priority\": 7,\n      \"sentiment\": \"negative\",\n      \"keywords\": [\"keyword1\", \"keyword2\"]\n    }\n  ],\n  \"newThemes\": [\n    {\n      \"name\": \"New Theme Name\",\n      \"description\": \"Brief description of what this theme encompasses\"\n    }\n  ]\n}\n`;\n\n    const response = await axios.post(\n      OPENAI_API_URL,\n      {\n        model: \"gpt-4\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an AI assistant that analyzes user feedback and categorizes it into themes.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        temperature: 0.3,\n        max_tokens: 2000\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        }\n      }\n    );\n\n    // Extract and parse the JSON response\n    const content = response.data.choices[0].message.content;\n    const jsonMatch = content.match(/```json\\n([\\s\\S]*)\\n```/) || content.match(/{[\\s\\S]*}/);\n    \n    if (jsonMatch) {\n      return JSON.parse(jsonMatch[1] || jsonMatch[0]);\n    } else {\n      throw new Error(\"Failed to parse JSON response from OpenAI\");\n    }\n  } catch (error) {\n    console.error(\"Error classifying feedback:\", error);\n    throw error;\n  }\n};\n\nexport const generateFeatureIdeas = async (themes) => {\n  try {\n    const prompt = `\nYou are a product strategist helping to convert user feedback themes into actionable feature ideas.\nFor each of the following themes, suggest 1-2 feature ideas that would address the user needs.\n\nThemes:\n${themes.map((theme, index) => \n  `${index + 1}. \"${theme.name}\" (${theme.feedbackCount} feedback items, priority: ${theme.priority || 'Medium'})`\n).join('\\n')}\n\nFor each theme, provide:\n1. Feature name\n2. Brief description\n3. Priority (High/Medium/Low)\n4. Implementation complexity (High/Medium/Low)\n\nRespond in JSON format like this:\n{\n  \"features\": [\n    {\n      \"themeIndex\": 0,\n      \"name\": \"Feature Name\",\n      \"description\": \"Brief description of the feature\",\n      \"priority\": \"High\",\n      \"complexity\": \"Medium\"\n    }\n  ]\n}\n`;\n\n    const response = await axios.post(\n      OPENAI_API_URL,\n      {\n        model: \"gpt-4\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an AI assistant that generates feature ideas based on user feedback themes.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 2000\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${API_KEY}`\n        }\n      }\n    );\n\n    // Extract and parse the JSON response\n    const content = response.data.choices[0].message.content;\n    const jsonMatch = content.match(/```json\\n([\\s\\S]*)\\n```/) || content.match(/{[\\s\\S]*}/);\n    \n    if (jsonMatch) {\n      return JSON.parse(jsonMatch[1] || jsonMatch[0]);\n    } else {\n      throw new Error(\"Failed to parse JSON response from OpenAI\");\n    }\n  } catch (error) {\n    console.error(\"Error generating feature ideas:\", error);\n    throw error;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}