{"ast":null,"code":"var _jsxFileName = \"/Users/faisalshariff/Feedback Force/src/components/UserResearchNetwork.js\",\n  _s = $RefreshSig$();\n// UserResearchNetwork.js\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { classifyFeedback, generateFeatureIdeas } from '../services/openaiService';\nimport FeedbackImporter from './FeedbackImporter';\nimport { processFeedbackData, importFeedbackData } from '../utils/importData';\nimport Legend from './Legend';\n\n// Color scale for node types\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colorScale = d3.scaleOrdinal().domain([\"theme\", \"feedback\", \"persona\"]).range([\"#3182CE\", \"#38A169\", \"#DD6B20\"]); // Blue, Green, Orange\n\n// Initial data structure\nconst initialData = {\n  nodes: [{\n    id: \"theme1\",\n    name: \"Performance\",\n    type: \"theme\",\n    feedbackCount: 10\n  }, {\n    id: \"theme2\",\n    name: \"User Interface\",\n    type: \"theme\",\n    feedbackCount: 8\n  }, {\n    id: \"theme3\",\n    name: \"Mobile Experience\",\n    type: \"theme\",\n    feedbackCount: 6\n  }, {\n    id: \"persona1\",\n    name: \"Data Analyst\",\n    type: \"persona\"\n  }, {\n    id: \"persona2\",\n    name: \"Marketing Manager\",\n    type: \"persona\"\n  }, {\n    id: \"feature1\",\n    name: \"Performance Optimization\",\n    type: \"feature\",\n    priority: \"High\"\n  }],\n  links: [{\n    source: \"theme1\",\n    target: \"persona1\",\n    strength: 0.7\n  }, {\n    source: \"theme2\",\n    target: \"persona1\",\n    strength: 0.5\n  }, {\n    source: \"theme1\",\n    target: \"feature1\",\n    strength: 0.8\n  }, {\n    source: \"persona1\",\n    target: \"feature1\",\n    strength: 0.6\n  }]\n};\n\n// Add this code near the top of your file where you define colorScale\nconst sentimentColorScale = {\n  \"Positive\": \"#68D391\",\n  // Green\n  \"Negative\": \"#FC8181\",\n  // Red\n  \"Neutral\": \"#CBD5E0\" // Gray\n};\n\n// Main component\nconst UserResearchNetwork = () => {\n  _s();\n  // Refs\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const zoomRef = useRef(null);\n  const simulationRef = useRef(null);\n\n  // State\n  const [dimensions, setDimensions] = useState({\n    width: 800,\n    height: 600\n  });\n  const [graphData, setGraphData] = useState({\n    nodes: [],\n    links: []\n  });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [highlightMode, setHighlightMode] = useState('none');\n  const [feedbackWeight, setFeedbackWeight] = useState(5);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Modal states\n  const [showModal, setShowModal] = useState(false);\n  const [modalType, setModalType] = useState(''); // 'theme' or 'feature'\n  const [showConnectionModal, setShowConnectionModal] = useState(false);\n  const [showFeedbackModal, setShowFeedbackModal] = useState(false);\n\n  // Node form state\n  const [newNodeName, setNewNodeName] = useState('');\n  const [newNodeFeedbackCount, setNewNodeFeedbackCount] = useState(10);\n  const [newNodePriority, setNewNodePriority] = useState('Medium');\n\n  // Connection state\n  const [connectionSource, setConnectionSource] = useState(null);\n  const [connectionTarget, setConnectionTarget] = useState('');\n  const [connectionStrength, setConnectionStrength] = useState(0.5);\n  const [availableTargets, setAvailableTargets] = useState([]);\n  const [multipleConnections, setMultipleConnections] = useState([]);\n\n  // Minimap state - set to true by default\n  const [showMiniMap, setShowMiniMap] = useState(true);\n\n  // Search state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n\n  // AI state\n  const [isAIProcessing, setIsAIProcessing] = useState(false);\n  const [aiError, setAIError] = useState(null);\n  const [feedbackItems, setFeedbackItems] = useState([]);\n  const [showAIInsightsPanel, setShowAIInsightsPanel] = useState(false);\n  const [aiInsights, setAIInsights] = useState(null);\n  const [isPanelCollapsed, setIsPanelCollapsed] = useState(false);\n  const [panelWidth, setPanelWidth] = useState(320);\n\n  // New feedback state\n  const [newFeedback, setNewFeedback] = useState('');\n  const [newFeedbackRole, setNewFeedbackRole] = useState('');\n  const [insights, setInsights] = useState([]);\n  const [analyticsData, setAnalyticsData] = useState(null);\n\n  // New theme selection state\n  const [selectedThemeForFeedback, setSelectedThemeForFeedback] = useState('');\n\n  // MiniMap implementation - define this before any useEffects that use it\n  const createMiniMap = useCallback(() => {\n    if (!svgRef.current || !graphData.nodes || graphData.nodes.length === 0) return () => {};\n    const svg = d3.select(svgRef.current);\n\n    // Remove any existing mini-map\n    svg.selectAll(\".mini-map-container\").remove();\n\n    // Calculate mini-map size based on the main SVG dimensions\n    const miniMapSize = Math.min(dimensions.width, dimensions.height) * 0.25;\n    const miniMapMargin = 20;\n\n    // Create a container for the mini-map\n    const miniMapContainer = svg.append(\"g\").attr(\"class\", \"mini-map-container\").attr(\"transform\", `translate(${miniMapMargin}, ${miniMapMargin})`);\n\n    // Add a background rectangle\n    miniMapContainer.append(\"rect\").attr(\"width\", miniMapSize).attr(\"height\", miniMapSize).attr(\"fill\", \"#f0f4f8\").attr(\"fill-opacity\", 0.9).attr(\"stroke\", \"#3182CE\").attr(\"stroke-width\", 2).attr(\"rx\", 6);\n\n    // Create a separate mini-map simulation\n    const miniMapNodes = graphData.nodes.map(node => ({\n      ...node,\n      miniX: Math.random() * miniMapSize,\n      miniY: Math.random() * miniMapSize\n    }));\n\n    // Create links array with proper source/target references\n    const miniMapLinks = graphData.links.map(link => {\n      // Extract source and target IDs consistently\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return {\n        source: sourceId,\n        target: targetId\n      };\n    }).filter(link => {\n      // Filter out links with invalid source or target\n      return miniMapNodes.some(n => n.id === link.source) && miniMapNodes.some(n => n.id === link.target);\n    });\n\n    // Create a separate force simulation just for the mini-map\n    const miniMapSimulation = d3.forceSimulation(miniMapNodes).force(\"link\", d3.forceLink(miniMapLinks).id(d => d.id).distance(5)).force(\"charge\", d3.forceManyBody().strength(-20)).force(\"center\", d3.forceCenter(miniMapSize / 2, miniMapSize / 2)).force(\"collide\", d3.forceCollide().radius(4));\n\n    // Add mini-map links\n    const miniLinks = miniMapContainer.selectAll(\".mini-link\").data(miniMapLinks).enter().append(\"line\").attr(\"class\", \"mini-link\").attr(\"stroke\", \"#ccc\").attr(\"stroke-width\", 0.5);\n\n    // Add mini-map nodes\n    const miniNodes = miniMapContainer.selectAll(\".mini-node\").data(miniMapNodes).enter().append(\"circle\").attr(\"class\", \"mini-node\").attr(\"r\", 3).attr(\"fill\", d => {\n      // Use the same color scale but with higher opacity\n      const baseColor = colorScale(d.type);\n      return d3.color(baseColor).brighter(0.3);\n    }).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1);\n\n    // Add a label\n    miniMapContainer.append(\"text\").attr(\"x\", 10).attr(\"y\", 15).attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").attr(\"fill\", \"#2D3748\").text(\"Network Overview\");\n\n    // Add a border to show the current viewport\n    const viewportRect = miniMapContainer.append(\"rect\").attr(\"class\", \"mini-map-viewport\").attr(\"width\", miniMapSize).attr(\"height\", miniMapSize).attr(\"fill\", \"none\").attr(\"stroke\", \"#3182ce\").attr(\"stroke-width\", 2).attr(\"stroke-dasharray\", \"4,4\");\n\n    // Run the mini-map simulation for a fixed number of ticks\n    miniMapSimulation.stop();\n    for (let i = 0; i < 300; i++) {\n      miniMapSimulation.tick();\n    }\n\n    // Update the mini-map nodes with their final positions\n    miniLinks.attr(\"x1\", d => {\n      const source = miniMapNodes.find(n => n.id === d.source);\n      return source ? source.miniX : 0;\n    }).attr(\"y1\", d => {\n      const source = miniMapNodes.find(n => n.id === d.source);\n      return source ? source.miniY : 0;\n    }).attr(\"x2\", d => {\n      const target = miniMapNodes.find(n => n.id === d.target);\n      return target ? target.miniX : 0;\n    }).attr(\"y2\", d => {\n      const target = miniMapNodes.find(n => n.id === d.target);\n      return target ? target.miniY : 0;\n    });\n    miniNodes.attr(\"cx\", d => d.miniX).attr(\"cy\", d => d.miniY);\n\n    // Add click behavior\n    miniMapContainer.append(\"rect\").attr(\"width\", miniMapSize).attr(\"height\", miniMapSize).attr(\"fill\", \"transparent\").attr(\"stroke\", \"none\").style(\"cursor\", \"pointer\").on(\"click\", event => {\n      if (!zoomRef.current) return;\n\n      // Get click position relative to mini-map\n      const [x, y] = d3.pointer(event);\n\n      // Calculate the center point in the main view\n      const centerX = x / miniMapSize * dimensions.width;\n      const centerY = y / miniMapSize * dimensions.height;\n\n      // Create a transform that centers on the clicked point\n      const transform = d3.zoomIdentity.translate(dimensions.width / 2, dimensions.height / 2).scale(1).translate(-centerX, -centerY);\n\n      // Apply the transform with a smooth transition\n      svg.transition().duration(750).call(zoomRef.current.transform, transform);\n    });\n\n    // Return cleanup function\n    return () => {\n      svg.selectAll(\".mini-map-container\").remove();\n      if (miniMapSimulation) miniMapSimulation.stop();\n    };\n  }, [dimensions, graphData, colorScale]);\n\n  // Simulate loading data on initial render - without createMiniMap dependency\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Add a separate effect to create the mini-map after loading\n  useEffect(() => {\n    if (!loading && showMiniMap && svgRef.current) {\n      const timer = setTimeout(() => {\n        createMiniMap();\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [loading, showMiniMap, dimensions]);\n\n  // Create a minimap when needed\n  useEffect(() => {\n    // Only create minimap if the SVG ref exists, dimensions are valid, and showMiniMap is true\n    if (svgRef.current && dimensions.width > 0 && dimensions.height > 0 && showMiniMap) {\n      // Remove any existing mini-map first to prevent duplicates\n      d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n      const cleanupMiniMap = createMiniMap();\n      return cleanupMiniMap;\n    } else {\n      // Clean up any existing mini-map if showMiniMap is false\n      d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n    }\n  }, [showMiniMap, graphData, dimensions.width, dimensions.height, selectedNode]);\n\n  // Update dimensions when window resizes\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const updateDimensions = () => {\n      if (containerRef.current) {\n        const {\n          width,\n          height\n        } = containerRef.current.getBoundingClientRect();\n        setDimensions({\n          width,\n          height\n        });\n      }\n    };\n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        const {\n          width,\n          height\n        } = entry.contentRect;\n        setDimensions({\n          width,\n          height\n        });\n      }\n    });\n    resizeObserver.observe(containerRef.current);\n    updateDimensions();\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  // Adjust container dimensions when panel is open\n  useEffect(() => {\n    if (containerRef.current) {\n      const containerWidth = containerRef.current.clientWidth;\n      const containerHeight = containerRef.current.clientHeight;\n\n      // Adjust dimensions based on panel state\n      if (showAIInsightsPanel && !isPanelCollapsed) {\n        // Reduce width to make room for the panel\n        setDimensions({\n          width: containerWidth - panelWidth,\n          height: containerHeight\n        });\n      } else {\n        // Use full width\n        setDimensions({\n          width: containerWidth,\n          height: containerHeight\n        });\n      }\n    }\n  }, [showAIInsightsPanel, isPanelCollapsed, panelWidth]);\n\n  // Recenter view when panel state changes\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      centerView();\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [showAIInsightsPanel, isPanelCollapsed]);\n\n  // Recalculate feedback counts when feedback items change\n  useEffect(() => {\n    if (feedbackItems.length > 0) {\n      recalculateFeedbackCounts();\n    }\n  }, [feedbackItems]);\n\n  // Main visualization rendering effect\n  useEffect(() => {\n    if (!svgRef.current || !dimensions.width || !dimensions.height) return;\n    console.log(\"Rendering with data:\", graphData);\n\n    // Clear the SVG\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n\n    // Create a container group for all elements\n    const g = svg.append(\"g\");\n\n    // Set up zoom behavior\n    const zoom = d3.zoom().scaleExtent([0.1, 4]).on(\"zoom\", event => {\n      g.attr(\"transform\", event.transform);\n    });\n    svg.call(zoom);\n    zoomRef.current = zoom;\n\n    // Verify we have valid data\n    if (!graphData.nodes || !graphData.links || !Array.isArray(graphData.nodes) || !Array.isArray(graphData.links) || graphData.nodes.length === 0) {\n      console.error(\"Invalid or empty graph data:\", graphData);\n      return;\n    }\n\n    // Create working copies of the data with proper link references\n    const nodes = graphData.nodes.map(node => ({\n      ...node\n    }));\n\n    // Normalize links to ensure proper format for D3\n    const normalizedLinks = graphData.links.map(link => {\n      // Extract source and target IDs consistently\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n\n      // Return a new link object with just IDs (D3 will convert to objects)\n      return {\n        source: sourceId,\n        target: targetId,\n        strength: link.strength || 0.5\n      };\n    });\n\n    // Verify all links have valid source and target nodes\n    const validLinks = normalizedLinks.filter(link => {\n      const sourceExists = nodes.some(node => node.id === link.source);\n      const targetExists = nodes.some(node => node.id === link.target);\n      if (!sourceExists) console.warn(`Link has invalid source: ${link.source}`);\n      if (!targetExists) console.warn(`Link has invalid target: ${link.target}`);\n      return sourceExists && targetExists;\n    });\n    console.log(`Found ${validLinks.length} valid links out of ${normalizedLinks.length}`);\n\n    // Create the force simulation with strong link forces\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(validLinks).id(d => d.id).distance(100).strength(1)) // Stronger link force for better connections\n    .force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(dimensions.width / 2, dimensions.height / 2)).force(\"collide\", d3.forceCollide(30));\n    simulationRef.current = simulation;\n\n    // Create the links\n    const link = g.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(validLinks).enter().append(\"line\").attr(\"stroke\", d => {\n      // Get the source and target nodes\n      const source = nodes.find(n => n.id === d.source);\n      const target = nodes.find(n => n.id === d.target);\n      if (!source || !target) return \"#999\";\n      const sourceType = source.type;\n      const targetType = target.type;\n      if (sourceType === \"theme\" && targetType === \"feature\") return \"#90CDF4\"; // Light blue\n      if (sourceType === \"feature\" && targetType === \"theme\") return \"#90CDF4\"; // Light blue\n      if (sourceType === \"theme\" && targetType === \"persona\") return \"#FBD38D\"; // Light orange\n      if (sourceType === \"persona\" && targetType === \"theme\") return \"#FBD38D\"; // Light orange\n      if (sourceType === \"persona\" && targetType === \"feature\") return \"#9AE6B4\"; // Light green\n      if (sourceType === \"feature\" && targetType === \"persona\") return \"#9AE6B4\"; // Light green\n\n      return \"#999\"; // Default gray\n    }).attr(\"stroke-opacity\", 0.6).attr(\"stroke-width\", d => Math.max(2, d.strength * 6)); // Thicker lines for visibility\n\n    // Create the nodes\n    const node = g.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"g\").data(nodes).enter().append(\"g\").call(d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended)).on(\"click\", (event, d) => {\n      event.stopPropagation();\n      if (selectedNode && selectedNode.id === d.id) {\n        // If clicking the same node again, release it\n        d.fx = null;\n        d.fy = null;\n        setSelectedNode(null);\n      } else {\n        // If clicking a new node, fix its position\n        d.fx = d.x;\n        d.fy = d.y;\n        setSelectedNode(d);\n        handleNodeClick(d);\n      }\n    });\n\n    // Add circles to nodes with appropriate colors\n    node.append(\"circle\").attr(\"r\", d => {\n      if (d.type === \"theme\") return 20 + d.feedbackCount / 2;\n      if (d.type === \"persona\") return 15;\n      return 10; // Smaller feedback nodes\n    }).attr(\"fill\", d => {\n      // For feedback nodes, color by sentiment if available\n      if (d.type === \"feedback\" && d.sentiment) {\n        if (d.sentiment === \"Positive\") return \"#68D391\"; // Green\n        if (d.sentiment === \"Negative\") return \"#FC8181\"; // Red\n        return \"#CBD5E0\"; // Gray for neutral\n      }\n      // Otherwise use the standard color scale\n      return colorScale(d.type);\n    }).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 2);\n\n    // Add labels with better positioning\n    node.append(\"text\").text(d => d.name).attr(\"x\", 0).attr(\"y\", d => {\n      if (d.type === \"theme\") return 30 + d.feedbackCount / 2;\n      if (d.type === \"persona\") return 25;\n      return 22; // Position feedback labels\n    }).attr(\"text-anchor\", \"middle\").attr(\"font-size\", d => d.type === \"feedback\" ? \"10px\" : \"12px\") // Smaller text for feedback\n    .attr(\"fill\", \"#333\");\n\n    // Add title for tooltip that shows full feedback text\n    node.append(\"title\").text(d => d.type === \"feedback\" ? d.title : d.name);\n\n    // Run a few ticks before adding listener to get nodes in better positions\n    for (let i = 0; i < 20; i++) {\n      simulation.tick();\n    }\n\n    // Update link positions immediately with node positions from simulation ticks\n    link.attr(\"x1\", d => {\n      const source = nodes.find(n => n.id === d.source);\n      return source ? source.x : 0;\n    }).attr(\"y1\", d => {\n      const source = nodes.find(n => n.id === d.source);\n      return source ? source.y : 0;\n    }).attr(\"x2\", d => {\n      const target = nodes.find(n => n.id === d.target);\n      return target ? target.x : 0;\n    }).attr(\"y2\", d => {\n      const target = nodes.find(n => n.id === d.target);\n      return target ? target.y : 0;\n    });\n\n    // Now add the tick listener for ongoing updates\n    simulation.on(\"tick\", () => {\n      link.attr(\"x1\", d => {\n        // Handle both ID and object references\n        const sourceId = typeof d.source === 'object' ? d.source.id : d.source;\n        const source = nodes.find(n => n.id === sourceId);\n        return source ? source.x : 0;\n      }).attr(\"y1\", d => {\n        const sourceId = typeof d.source === 'object' ? d.source.id : d.source;\n        const source = nodes.find(n => n.id === sourceId);\n        return source ? source.y : 0;\n      }).attr(\"x2\", d => {\n        const targetId = typeof d.target === 'object' ? d.target.id : d.target;\n        const target = nodes.find(n => n.id === targetId);\n        return target ? target.x : 0;\n      }).attr(\"y2\", d => {\n        const targetId = typeof d.target === 'object' ? d.target.id : d.target;\n        const target = nodes.find(n => n.id === targetId);\n        return target ? target.y : 0;\n      });\n      node.attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n    });\n\n    // Drag functions\n    function dragstarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n\n      // Only release the node if it's not the selected node\n      if (!selectedNode || selectedNode.id !== d.id) {\n        d.fx = null;\n        d.fy = null;\n      }\n    }\n\n    // Center the view\n    svg.call(zoom.transform, d3.zoomIdentity.translate(dimensions.width / 2 - dimensions.width * 0.5, dimensions.height / 2 - dimensions.height * 0.5).scale(0.8));\n\n    // Clean up on unmount\n    return () => {\n      simulation.stop();\n    };\n  }, [dimensions, graphData, feedbackWeight, highlightMode, selectedNode]);\n\n  // Recalculate feedback counts based on graph connections\n  const recalculateFeedbackCounts = useCallback(() => {\n    // Create a map to track feedback counts\n    const feedbackCounts = {\n      themes: {},\n      personas: {},\n      features: {}\n    };\n\n    // Count feedback for each node type based on connections\n    graphData.links.forEach(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      const sourceNode = graphData.nodes.find(n => n.id === sourceId);\n      const targetNode = graphData.nodes.find(n => n.id === targetId);\n      if (!sourceNode || !targetNode) return;\n\n      // Count theme connections\n      if (sourceNode.type === \"theme\" && targetNode.type === \"feedback\") {\n        feedbackCounts.themes[sourceNode.id] = (feedbackCounts.themes[sourceNode.id] || 0) + 1;\n      } else if (targetNode.type === \"theme\" && sourceNode.type === \"feedback\") {\n        feedbackCounts.themes[targetNode.id] = (feedbackCounts.themes[targetNode.id] || 0) + 1;\n      }\n\n      // Count persona connections\n      if (sourceNode.type === \"persona\" && targetNode.type === \"feedback\") {\n        feedbackCounts.personas[sourceNode.id] = (feedbackCounts.personas[sourceNode.id] || 0) + 1;\n      } else if (targetNode.type === \"persona\" && sourceNode.type === \"feedback\") {\n        feedbackCounts.personas[targetNode.id] = (feedbackCounts.personas[targetNode.id] || 0) + 1;\n      }\n    });\n\n    // Update node feedback counts\n    const updatedNodes = graphData.nodes.map(node => {\n      if (node.type === \"theme\" && feedbackCounts.themes[node.id]) {\n        return {\n          ...node,\n          feedbackCount: feedbackCounts.themes[node.id]\n        };\n      }\n      if (node.type === \"persona\" && feedbackCounts.personas[node.id]) {\n        return {\n          ...node,\n          feedbackCount: feedbackCounts.personas[node.id]\n        };\n      }\n      return node;\n    });\n\n    // Update the graph data\n    setGraphData(prevData => ({\n      ...prevData,\n      nodes: updatedNodes\n    }));\n  }, [graphData]);\n\n  // Import data from file with more robust processing\n  const importData = useCallback(event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    setLoading(true);\n    setError(null);\n    console.log(\"Starting import from file:\", file.name);\n\n    // Use our async utility function\n    importFeedbackData(file).then(importedData => {\n      console.log(\"Processed import data:\", importedData);\n\n      // Ensure node structure is compatible with visualization\n      const processedNodes = importedData.nodes.map(node => {\n        // Make sure each node has the essential properties\n        return {\n          ...node,\n          // Ensure these critical properties exist\n          id: node.id,\n          name: node.name || node.label || \"Unnamed\",\n          type: node.type || \"theme\",\n          // Add appropriate properties based on type\n          ...(node.type === 'theme' ? {\n            feedbackCount: node.feedbackCount || 5\n          } : {}),\n          ...(node.type === 'feature' ? {\n            priority: node.priority || 'Medium'\n          } : {})\n        };\n      });\n      setGraphData({\n        nodes: processedNodes,\n        links: importedData.links || []\n      });\n      setInsights(importedData.insights || []);\n      setAnalyticsData(importedData.analytics || null);\n      setLoading(false);\n\n      // Reset any selections and force a re-center\n      setSelectedNode(null);\n      // Use a timeout without directly referencing fitToScreen\n      setTimeout(() => {\n        if (zoomRef.current) {\n          const svg = d3.select(svgRef.current);\n          const svgWidth = svg.node().getBoundingClientRect().width;\n          const svgHeight = svg.node().getBoundingClientRect().height;\n          svg.transition().duration(750).call(zoomRef.current.transform, d3.zoomIdentity.translate(svgWidth / 2, svgHeight / 2).scale(0.8));\n        }\n      }, 300);\n    }).catch(error => {\n      console.error(\"Error importing feedback data:\", error);\n      setError(`Error importing file: ${error.message || \"Unknown error\"}`);\n      setLoading(false);\n    });\n  }, []); // Remove fitToScreen from dependencies\n\n  // Helper function for keyword-based theme classification (used as fallback)\n  const mockClassifyFeedback = text => {\n    // Simple keyword-based classification\n    const lowerText = text.toLowerCase();\n\n    // First determine sentiment\n    let sentiment = \"Neutral\";\n\n    // Check for negative sentiment keywords\n    if (lowerText.includes('bad') || lowerText.includes('terrible') || lowerText.includes('awful') || lowerText.includes('poor') || lowerText.includes('hate') || lowerText.includes('worst') || lowerText.includes('difficult') || lowerText.includes('problem') || lowerText.includes('issue') || lowerText.includes('bug') || lowerText.includes('crash') || lowerText.includes('error') || lowerText.includes('not working') || lowerText.includes('doesn\\'t work') || lowerText.includes('frustrated') || lowerText.includes('annoying')) {\n      sentiment = \"Negative\";\n    }\n    // Check for positive sentiment keywords\n    else if (lowerText.includes('good') || lowerText.includes('great') || lowerText.includes('excellent') || lowerText.includes('awesome') || lowerText.includes('love') || lowerText.includes('best') || lowerText.includes('helpful') || lowerText.includes('easy') || lowerText.includes('intuitive') || lowerText.includes('fantastic')) {\n      sentiment = \"Positive\";\n    }\n\n    // Then determine theme\n    let theme = \"General Feedback\";\n    if (lowerText.includes('crash') || lowerText.includes('error') || lowerText.includes('bug')) {\n      theme = 'Stability Issues';\n    } else if (lowerText.includes('slow') || lowerText.includes('performance') || lowerText.includes('timeout')) {\n      theme = 'Performance';\n    } else if (lowerText.includes('mobile') || lowerText.includes('app') || lowerText.includes('phone')) {\n      theme = 'Mobile Experience';\n    } else if (lowerText.includes('ui') || lowerText.includes('interface') || lowerText.includes('design') || lowerText.includes('layout') || lowerText.includes('look')) {\n      theme = 'User Interface';\n    } else if (lowerText.includes('report') || lowerText.includes('dashboard')) {\n      theme = 'Reporting & Analytics';\n    } else if (lowerText.includes('export') || lowerText.includes('excel') || lowerText.includes('pdf')) {\n      theme = 'Data Export & Import';\n    } else if (lowerText.includes('search') || lowerText.includes('filter') || lowerText.includes('find')) {\n      theme = 'Search & Navigation';\n    }\n    return {\n      theme: theme,\n      sentiment: sentiment\n    };\n  };\n\n  // Helper function for feature generation (used as fallback)\n  const mockGenerateFeatureIdeas = theme => {\n    // Generate simple feature ideas based on theme\n    if (theme === 'Stability Issues') {\n      return [{\n        name: 'Crash Prevention & Recovery',\n        priority: 'High'\n      }];\n    } else if (theme === 'Performance') {\n      return [{\n        name: 'Performance Optimization',\n        priority: 'High'\n      }];\n    } else if (theme === 'Mobile Experience') {\n      return [{\n        name: 'Responsive Design Overhaul',\n        priority: 'High'\n      }];\n    } else if (theme === 'User Interface') {\n      return [{\n        name: 'UI Modernization',\n        priority: 'Medium'\n      }];\n    } else if (theme === 'Reporting & Analytics') {\n      return [{\n        name: 'Custom Report Builder',\n        priority: 'High'\n      }];\n    } else if (theme === 'Data Export & Import') {\n      return [{\n        name: 'Enhanced Export Options',\n        priority: 'High'\n      }];\n    } else {\n      return [{\n        name: 'User Experience Improvements',\n        priority: 'Medium'\n      }];\n    }\n  };\n\n  // Process imported feedback with enhanced reliability\n  const processImportedFeedback = useCallback(feedbackItems => {\n    if (!feedbackItems || feedbackItems.length === 0) {\n      setLoading(false);\n      return;\n    }\n    console.log(`Processing ${feedbackItems.length} feedback items...`);\n    setIsAIProcessing(true);\n\n    // Create a new graph structure\n    const newGraph = {\n      nodes: [],\n      links: []\n    };\n\n    // Track created nodes to avoid duplicates\n    const nodeMap = {\n      personas: {},\n      themes: {},\n      features: {}\n    };\n\n    // Step 1: First create all persona nodes from feedback\n    console.log(\"Creating persona nodes...\");\n    feedbackItems.forEach(item => {\n      if (!item.user_role) return;\n      if (!nodeMap.personas[item.user_role]) {\n        const personaId = `persona-${Date.now()}-${Object.keys(nodeMap.personas).length}`;\n        const personaNode = {\n          id: personaId,\n          name: item.user_role,\n          type: \"persona\",\n          feedbackCount: 1\n        };\n        newGraph.nodes.push(personaNode);\n        nodeMap.personas[item.user_role] = personaNode;\n        console.log(`Created persona node: ${item.user_role}`);\n      } else {\n        // Increment feedback count for existing persona\n        nodeMap.personas[item.user_role].feedbackCount += 1;\n      }\n    });\n\n    // Step 2: Process each feedback to identify themes\n    // Use chunks to avoid overwhelming the system\n    console.log(\"Processing feedback to identify themes...\");\n    const processChunks = async () => {\n      const chunkSize = 5; // Process 5 at a time\n      const chunks = [];\n\n      // Split feedback into chunks\n      for (let i = 0; i < feedbackItems.length; i += chunkSize) {\n        chunks.push(feedbackItems.slice(i, i + chunkSize));\n      }\n\n      // Process each chunk\n      for (let i = 0; i < chunks.length; i++) {\n        const chunk = chunks[i];\n        console.log(`Processing chunk ${i + 1} of ${chunks.length}...`);\n\n        // Process items in this chunk\n        for (const item of chunk) {\n          if (!item.text || !item.user_role) continue;\n          try {\n            // Attempt to use the AI classification service\n            console.log(`Classifying: \"${item.text.substring(0, 30)}...\"`);\n            let result;\n            try {\n              // Try AI service first\n              result = await classifyFeedback(item.text);\n              console.log(\"AI classification result:\", result);\n            } catch (aiError) {\n              // If AI fails, use fallback classification\n              console.warn(\"AI classification failed, using fallback:\", aiError);\n              result = mockClassifyFeedback(item.text);\n              console.log(\"Fallback classification result:\", result);\n            }\n            if (result) {\n              // Create feedback node with sentiment\n              const feedbackId = `feedback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n              const feedbackNode = {\n                id: feedbackId,\n                name: item.text.substring(0, 30) + \"...\",\n                text: item.text,\n                type: \"feedback\",\n                user_role: item.user_role,\n                timestamp: item.timestamp || new Date().toISOString(),\n                sentiment: result.sentiment || \"Neutral\" // Store sentiment\n              };\n\n              // ... rest of your node creation code\n              newGraph.nodes.push(feedbackNode);\n              nodeMap.personas[item.user_role] = feedbackNode;\n              console.log(`Created feedback node: ${item.user_role}`);\n            }\n          } catch (err) {\n            console.error(\"Error processing feedback item:\", err);\n          }\n        }\n\n        // Update graph data every chunk to show progress\n        if (i < chunks.length - 1) {\n          setGraphData({\n            ...newGraph\n          });\n          // Small delay to allow UI to update\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      }\n\n      // Step 3: Generate feature suggestions for top themes\n      console.log(\"Generating feature suggestions...\");\n      const significantThemes = Object.values(nodeMap.themes).filter(theme => theme.feedbackCount >= 2).sort((a, b) => b.feedbackCount - a.feedbackCount).slice(0, 5); // Top 5 themes\n\n      console.log(`Found ${significantThemes.length} significant themes for feature generation`);\n      for (const theme of significantThemes) {\n        try {\n          // Get feedback related to this theme\n          const relatedFeedback = feedbackItems.filter(item => {\n            const text = item.text.toLowerCase();\n            return text.includes(theme.name.toLowerCase());\n          }).map(item => item.text);\n\n          // Generate feature ideas\n          console.log(`Generating features for theme \"${theme.name}\" with ${relatedFeedback.length} feedback items`);\n          let featureIdeas;\n          try {\n            // Try AI service first\n            featureIdeas = await generateFeatureIdeas(theme.name, relatedFeedback);\n            console.log(\"AI generated feature ideas:\", featureIdeas);\n          } catch (aiError) {\n            // If AI fails, use mock generation\n            console.warn(\"AI feature generation failed, using fallback:\", aiError);\n            featureIdeas = mockGenerateFeatureIdeas(theme.name, relatedFeedback);\n            console.log(\"Fallback feature ideas:\", featureIdeas);\n          }\n          if (featureIdeas && featureIdeas.length > 0) {\n            // Create feature nodes\n            for (const idea of featureIdeas) {\n              const featureId = `feature-${Date.now()}-${Object.keys(nodeMap.features).length}`;\n              const featureNode = {\n                id: featureId,\n                name: idea.name,\n                description: idea.description || \"\",\n                type: \"feature\",\n                priority: idea.priority || \"Medium\"\n              };\n              newGraph.nodes.push(featureNode);\n              nodeMap.features[featureNode.name] = featureNode;\n              console.log(`Created feature: ${featureNode.name}`);\n\n              // Link feature to theme\n              newGraph.links.push({\n                source: theme.id,\n                target: featureId,\n                strength: 0.8\n              });\n\n              // Find personas connected to this theme\n              newGraph.links.forEach(link => {\n                const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n                const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n                if (sourceId === theme.id || targetId === theme.id) {\n                  const personaId = sourceId === theme.id ? targetId : sourceId;\n                  const personaNode = newGraph.nodes.find(n => n.id === personaId && n.type === 'persona');\n                  if (personaNode) {\n                    // Link persona to feature\n                    const existingLink = newGraph.links.some(l => l.source === personaId && l.target === featureId || l.source === featureId && l.target === personaId);\n                    if (!existingLink) {\n                      newGraph.links.push({\n                        source: personaId,\n                        target: featureId,\n                        strength: 0.6\n                      });\n                      console.log(`Connected persona \"${personaNode.name}\" to feature \"${featureNode.name}\"`);\n                    }\n                  }\n                }\n              });\n            }\n          }\n        } catch (err) {\n          console.error(`Error generating features for theme \"${theme.name}\":`, err);\n        }\n      }\n\n      // Ensure we have at least some features if none were generated\n      if (newGraph.nodes.filter(n => n.type === 'feature').length === 0) {\n        console.log(\"No features were generated - creating fallback features\");\n\n        // Create a fallback feature for each major theme\n        for (const theme of significantThemes.slice(0, 3)) {\n          const featureId = `feature-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n          const featureNode = {\n            id: featureId,\n            name: `${theme.name} Improvement`,\n            type: \"feature\",\n            priority: theme.feedbackCount >= 5 ? \"High\" : \"Medium\",\n            fallback: true\n          };\n          newGraph.nodes.push(featureNode);\n          console.log(`Created fallback feature: ${featureNode.name}`);\n\n          // Link to theme\n          newGraph.links.push({\n            source: theme.id,\n            target: featureId,\n            strength: 0.8\n          });\n        }\n      }\n\n      // Final graph update\n      console.log(\"Finalizing graph...\");\n      console.log(\"Final graph has:\", newGraph.nodes.length, \"nodes and\", newGraph.links.length, \"links\");\n      console.log(\"Nodes by type:\", {\n        personas: newGraph.nodes.filter(n => n.type === 'persona').length,\n        themes: newGraph.nodes.filter(n => n.type === 'theme').length,\n        features: newGraph.nodes.filter(n => n.type === 'feature').length\n      });\n      setGraphData(newGraph);\n\n      // Pre-compute positions for better visualization\n      setTimeout(() => {\n        if (simulationRef.current) {\n          simulationRef.current.stop();\n\n          // Create a temporary simulation to calculate positions\n          const tempSimulation = d3.forceSimulation(newGraph.nodes).force(\"link\", d3.forceLink(newGraph.links).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(dimensions.width / 2, dimensions.height / 2)).force(\"collide\", d3.forceCollide(40));\n\n          // Run several ticks to get a good initial layout\n          for (let i = 0; i < 100; i++) {\n            tempSimulation.tick();\n          }\n          tempSimulation.stop();\n        }\n        setIsAIProcessing(false);\n        setLoading(false);\n        console.log(\"Import processing complete\");\n      }, 100);\n    };\n\n    // Start the processing\n    processChunks().catch(err => {\n      console.error(\"Error in processChunks:\", err);\n      setError(\"Error processing feedback. Please try again.\");\n      setIsAIProcessing(false);\n      setLoading(false);\n    });\n  }, [dimensions]);\n\n  // Add a new node (theme or feature)\n  const handleAddNode = useCallback(() => {\n    if (!newNodeName.trim()) {\n      alert(\"Please enter a node name\");\n      return;\n    }\n    let newNode;\n    if (modalType === 'theme') {\n      newNode = {\n        id: `theme-${Date.now()}`,\n        name: newNodeName,\n        type: \"theme\",\n        feedbackCount: newNodeFeedbackCount\n      };\n    } else if (modalType === 'feature') {\n      newNode = {\n        id: `feature-${Date.now()}`,\n        name: newNodeName,\n        type: \"feature\",\n        priority: newNodePriority\n      };\n    }\n    if (newNode) {\n      setGraphData(prevData => ({\n        nodes: [...prevData.nodes, newNode],\n        links: [...prevData.links]\n      }));\n      setShowModal(false);\n      setNewNodeName('');\n      setNewNodeFeedbackCount(10);\n      setNewNodePriority('Medium');\n    }\n  }, [modalType, newNodeName, newNodeFeedbackCount, newNodePriority]);\n\n  // Handle node selection and display node details\n  const handleNodeClick = useCallback(node => {\n    if (!node) return;\n\n    // Find connected nodes\n    const connectedLinks = graphData.links.filter(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === node.id || targetId === node.id;\n    });\n    const connectedNodeIds = connectedLinks.map(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === node.id ? targetId : sourceId;\n    });\n    const connectedNodes = graphData.nodes.filter(n => connectedNodeIds.includes(n.id));\n\n    // Prepare insights\n    let insights = {\n      results: [],\n      nodeType: node.type,\n      nodeId: node.id\n    };\n    if (node.type === \"theme\") {\n      // Theme view\n      insights.theme = node.name;\n      insights.feedbackCount = node.feedbackCount || 0;\n\n      // Connected features\n      const connectedFeatures = connectedNodes.filter(n => n.type === \"feature\");\n      if (connectedFeatures.length > 0) {\n        insights.connectedFeatures = connectedFeatures;\n      }\n\n      // Connected personas\n      const connectedPersonas = connectedNodes.filter(n => n.type === \"persona\");\n      if (connectedPersonas.length > 0) {\n        insights.connectedPersonas = connectedPersonas;\n      }\n\n      // Find feedback related to this theme\n      if (feedbackItems.length > 0) {\n        // For themes, we need to find feedback that might be related\n        // This is a simple string matching approach, but could be enhanced\n        const relatedFeedback = feedbackItems.filter(item => item.text.toLowerCase().includes(node.name.toLowerCase()));\n        if (relatedFeedback.length > 0) {\n          insights.relatedFeedback = relatedFeedback.map(item => ({\n            text: item.text,\n            user_role: item.user_role,\n            timestamp: item.timestamp\n          }));\n        }\n      }\n    } else if (node.type === \"feature\") {\n      // Feature view\n      insights.isFeatureView = true;\n      insights.name = node.name;\n      insights.priority = node.priority || \"Medium\";\n      insights.description = node.description || \"\";\n\n      // Connected themes\n      const connectedThemes = connectedNodes.filter(n => n.type === \"theme\");\n      if (connectedThemes.length > 0) {\n        insights.connectedThemes = connectedThemes;\n      }\n\n      // Connected personas\n      const connectedPersonas = connectedNodes.filter(n => n.type === \"persona\");\n      if (connectedPersonas.length > 0) {\n        insights.connectedPersonas = connectedPersonas;\n      }\n    } else if (node.type === \"persona\") {\n      // Persona view\n      insights.persona = node.name;\n      insights.feedbackCount = node.feedbackCount || 0;\n\n      // Connected themes\n      const connectedThemes = connectedNodes.filter(n => n.type === \"theme\");\n      if (connectedThemes.length > 0) {\n        insights.connectedThemes = connectedThemes;\n      }\n\n      // Connected features\n      const connectedFeatures = connectedNodes.filter(n => n.type === \"feature\");\n      if (connectedFeatures.length > 0) {\n        insights.connectedFeatures = connectedFeatures;\n      }\n\n      // Find feedback from this persona\n      if (feedbackItems.length > 0) {\n        const personaFeedback = feedbackItems.filter(item => item.user_role === node.name);\n        if (personaFeedback.length > 0) {\n          insights.results = personaFeedback.map(item => ({\n            text: item.text,\n            user_role: item.user_role,\n            timestamp: item.timestamp || new Date().toISOString()\n          }));\n        }\n      }\n    } else if (node.type === \"feedback\") {\n      // Feedback node view - ensure we get the complete feedback text\n      insights.isFeedbackView = true;\n\n      // Debug: Print the node object to console\n      console.log('Feedback node clicked:', node);\n\n      // Get the full text - prioritizing full versions and checking all possible properties\n      // Note: The order here is important - put the most likely to contain full text first\n      insights.feedbackText = node.fullText || node.originalText || node.completeText || node.text || node.content || node.feedback || node.description || node.title || node.name || \"\";\n\n      // If we have access to feedbackItems array, try to find a matching item with full text\n      if (feedbackItems && feedbackItems.length > 0) {\n        // Try to find a matching feedback item by id or text\n        const matchingItem = feedbackItems.find(item => item.id === node.id || item.text && node.text && item.text.includes(node.text) || item.text && node.name && item.text.includes(node.name));\n        if (matchingItem && matchingItem.text) {\n          // Use the full text from the matching item\n          insights.feedbackText = matchingItem.text;\n\n          // Also update user role and timestamp if available\n          if (matchingItem.user_role) {\n            insights.user_role = matchingItem.user_role;\n          }\n          if (matchingItem.timestamp) {\n            insights.timestamp = matchingItem.timestamp;\n          }\n        }\n      }\n\n      // Always prefer the node's user_role if available\n      insights.user_role = node.user_role || node.persona || node.role || insights.user_role || \"Unknown User\";\n      insights.timestamp = node.timestamp || node.date || node.created_at || new Date().toISOString();\n\n      // Get related themes if available\n      if (node.themes) {\n        insights.relatedThemes = node.themes;\n      } else {\n        // Try to find related themes from connections\n        const relatedThemes = connectedNodes.filter(n => n.type === \"theme\").map(n => n.name);\n        if (relatedThemes.length > 0) {\n          insights.relatedThemes = relatedThemes;\n        }\n      }\n\n      // Get sentiment if available\n      if (node.sentiment) {\n        insights.sentiment = node.sentiment;\n      }\n    }\n\n    // Update insights and show panel\n    setAIInsights(insights);\n    setShowAIInsightsPanel(true);\n\n    // Ensure mini-map is recreated if it should be visible\n    if (showMiniMap) {\n      // Use setTimeout to ensure this happens after the current render cycle\n      setTimeout(() => {\n        // Call the function directly instead of using a reference\n        if (svgRef.current) {\n          d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n          createMiniMap();\n        }\n      }, 0);\n    }\n  }, [graphData, feedbackItems, showMiniMap]);\n\n  // Create a connection between nodes\n  const handleConnectionSubmit = useCallback(() => {\n    if (!connectionSource || !connectionTarget) return;\n\n    // Check if connection already exists\n    const existingConnection = graphData.links.some(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === connectionSource.id && targetId === connectionTarget || sourceId === connectionTarget && targetId === connectionSource.id;\n    });\n    if (!existingConnection) {\n      const newLink = {\n        source: connectionSource.id,\n        target: connectionTarget,\n        strength: connectionStrength\n      };\n      setGraphData(prevData => ({\n        ...prevData,\n        links: [...prevData.links, newLink]\n      }));\n    }\n    setShowConnectionModal(false);\n    setConnectionSource(null);\n    setConnectionTarget('');\n    setConnectionStrength(0.5);\n  }, [connectionSource, connectionTarget, connectionStrength, graphData]);\n\n  // Initialize connection creation\n  const connectNodes = useCallback(() => {\n    if (!selectedNode) return;\n\n    // Find suitable targets (different type than selected node)\n    const targets = graphData.nodes.filter(n => n.id !== selectedNode.id && n.type !== selectedNode.type);\n    if (targets.length === 0) {\n      alert(\"No compatible nodes found to connect with.\");\n      return;\n    }\n    setConnectionSource(selectedNode);\n    setAvailableTargets(targets);\n    setConnectionTarget(targets[0].id);\n    setConnectionStrength(0.5);\n    setShowConnectionModal(true);\n  }, [selectedNode, graphData]);\n\n  // Export the current graph data\n  const exportData = useCallback(() => {\n    const dataStr = JSON.stringify(graphData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n    const exportFileDefaultName = 'feedback-insights-data.json';\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  }, [graphData]);\n\n  // Reset to initial data\n  const resetVisualization = useCallback(() => {\n    if (window.confirm(\"Are you sure you want to reset? This will remove all custom data.\")) {\n      setGraphData(initialData);\n      setSelectedNode(null);\n      setHighlightMode('none');\n    }\n  }, []);\n\n  // Handle adding new feedback with better visualization\n  const handleAddFeedback = useCallback(async () => {\n    if (!newFeedback || !newFeedbackRole) {\n      setAIError(\"Please provide both feedback text and user role.\");\n      return;\n    }\n    setIsAIProcessing(true);\n    setAIError(null);\n    try {\n      // Analyze sentiment\n      let sentiment = \"Neutral\";\n      try {\n        const result = await classifyFeedback(newFeedback);\n        sentiment = result.sentiment || \"Neutral\";\n      } catch (error) {\n        // Use fallback\n        const fallbackResult = mockClassifyFeedback(newFeedback);\n        sentiment = fallbackResult.sentiment || \"Neutral\";\n      }\n\n      // Create a new feedback node\n      const feedbackId = `feedback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n      // Add the new feedback node\n      setGraphData(prevData => ({\n        ...prevData,\n        nodes: [...prevData.nodes, {\n          id: feedbackId,\n          name: newFeedback.substring(0, 30) + \"...\",\n          text: newFeedback,\n          type: \"feedback\",\n          user_role: newFeedbackRole,\n          timestamp: new Date().toISOString(),\n          sentiment: sentiment // Store the sentiment\n        }]\n      }));\n\n      // If the user selected a specific theme, connect to it directly\n      if (selectedThemeForFeedback) {\n        const selectedTheme = graphData.nodes.find(node => node.id === selectedThemeForFeedback);\n        if (selectedTheme) {\n          // Connect to the selected theme\n          connectFeedbackToThemeById(feedbackId, selectedThemeForFeedback);\n          setIsAIProcessing(false);\n        }\n      } else {\n        // No theme selected - use AI or fallback as before\n        try {\n          // First try to use the AI service if available\n          classifyFeedback(newFeedback).then(classification => {\n            // Successfully classified with AI\n            connectFeedbackToTheme(feedbackId, classification.theme);\n            setIsAIProcessing(false);\n          }).catch(error => {\n            console.warn(\"AI classification failed, using fallback:\", error);\n            // Use fallback classification\n            const fallbackClassification = mockClassifyFeedback(newFeedback);\n            connectFeedbackToTheme(feedbackId, fallbackClassification.theme);\n            setIsAIProcessing(false);\n          });\n        } catch (error) {\n          console.error(\"Error in feedback processing:\", error);\n          // Still use fallback even if there's an error\n          const fallbackClassification = mockClassifyFeedback(newFeedback);\n          connectFeedbackToTheme(feedbackId, fallbackClassification.theme);\n          setIsAIProcessing(false);\n          setAIError(\"Error processing feedback, but added with basic classification\");\n        }\n      }\n\n      // Reset form fields\n      setShowFeedbackModal(false);\n      setNewFeedback('');\n      setNewFeedbackRole('');\n      setSelectedThemeForFeedback('');\n    } catch (error) {\n      // ... error handling\n    }\n  }, [newFeedback, newFeedbackRole, selectedThemeForFeedback]);\n\n  // First, let's define connectFeedbackToPersona before it's used\n  const connectFeedbackToPersona = useCallback((feedbackId, roleName) => {\n    // Skip if no role name\n    if (!roleName) return;\n\n    // Check if persona exists\n    let personaNode = graphData.nodes.find(node => node.type === \"persona\" && node.name.toLowerCase() === roleName.toLowerCase());\n\n    // If persona doesn't exist, create it\n    if (!personaNode) {\n      personaNode = {\n        id: `persona-${roleName.replace(/\\s+/g, '-').toLowerCase()}`,\n        name: roleName,\n        type: \"persona\"\n      };\n\n      // Add the new persona node\n      setGraphData(prevData => ({\n        nodes: [...prevData.nodes, personaNode],\n        links: [...prevData.links]\n      }));\n    }\n\n    // Add connection between feedback and persona\n    setGraphData(prevData => {\n      // Create the new link\n      const newLink = {\n        source: feedbackId,\n        target: personaNode.id,\n        strength: 0.5\n      };\n\n      // Add link only if it doesn't already exist\n      const linkExists = prevData.links.some(link => {\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n        return sourceId === feedbackId && targetId === personaNode.id || sourceId === personaNode.id && targetId === feedbackId;\n      });\n      return {\n        nodes: prevData.nodes,\n        links: linkExists ? prevData.links : [...prevData.links, newLink]\n      };\n    });\n  }, [graphData]);\n\n  // Then define connectFeedbackToTheme with a proper implementation\n  const connectFeedbackToTheme = useCallback((feedbackId, themeName) => {\n    // Check if theme exists\n    let themeNode = graphData.nodes.find(node => node.type === \"theme\" && node.name.toLowerCase() === themeName.toLowerCase());\n\n    // If theme doesn't exist, create it\n    if (!themeNode) {\n      themeNode = {\n        id: `theme-${themeName.replace(/\\s+/g, '-').toLowerCase()}`,\n        name: themeName,\n        type: \"theme\",\n        feedbackCount: 1\n      };\n\n      // Add the new theme node\n      setGraphData(prevData => ({\n        nodes: [...prevData.nodes, themeNode],\n        links: [...prevData.links]\n      }));\n    } else {\n      // Update theme's feedback count\n      setGraphData(prevData => ({\n        ...prevData,\n        nodes: prevData.nodes.map(node => node.id === themeNode.id ? {\n          ...node,\n          feedbackCount: (node.feedbackCount || 0) + 1\n        } : node)\n      }));\n    }\n\n    // Add connection between feedback and theme\n    setGraphData(prevData => {\n      // Create the new link\n      const newLink = {\n        source: feedbackId,\n        target: themeNode.id,\n        strength: 0.7\n      };\n\n      // Add link only if it doesn't already exist\n      const linkExists = prevData.links.some(link => {\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n        return sourceId === feedbackId && targetId === themeNode.id || sourceId === themeNode.id && targetId === feedbackId;\n      });\n      return {\n        nodes: prevData.nodes,\n        links: linkExists ? prevData.links : [...prevData.links, newLink]\n      };\n    });\n\n    // If the user role is provided, try to connect to a persona\n    const feedbackNode = graphData.nodes.find(n => n.id === feedbackId);\n    if (feedbackNode && feedbackNode.user_role) {\n      connectFeedbackToPersona(feedbackId, feedbackNode.user_role);\n    }\n\n    // Restart the simulation to reposition nodes\n    if (simulationRef.current) {\n      simulationRef.current.alpha(0.3).restart();\n    }\n  }, []);\n\n  // And finally connectFeedbackToThemeById with a proper implementation\n  const connectFeedbackToThemeById = useCallback((feedbackId, themeId) => {\n    // Find the theme node\n    const themeNode = graphData.nodes.find(node => node.id === themeId);\n    if (!themeNode) return;\n\n    // Update theme's feedback count\n    setGraphData(prevData => ({\n      ...prevData,\n      nodes: prevData.nodes.map(node => node.id === themeId ? {\n        ...node,\n        feedbackCount: (node.feedbackCount || 0) + 1\n      } : node)\n    }));\n\n    // Add connection between feedback and theme\n    setGraphData(prevData => {\n      // Create the new link\n      const newLink = {\n        source: feedbackId,\n        target: themeId,\n        strength: 0.7\n      };\n\n      // Add link only if it doesn't already exist\n      const linkExists = prevData.links.some(link => {\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n        return sourceId === feedbackId && targetId === themeId || sourceId === themeId && targetId === feedbackId;\n      });\n      return {\n        nodes: prevData.nodes,\n        links: linkExists ? prevData.links : [...prevData.links, newLink]\n      };\n    });\n\n    // If the user role is provided, try to connect to a persona\n    const feedbackNode = graphData.nodes.find(n => n.id === feedbackId);\n    if (feedbackNode && feedbackNode.user_role) {\n      connectFeedbackToPersona(feedbackId, feedbackNode.user_role);\n    }\n\n    // Restart the simulation to reposition nodes\n    if (simulationRef.current) {\n      simulationRef.current.alpha(0.3).restart();\n    }\n  }, []);\n\n  // Zoom control functions\n  const zoomIn = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    const svg = d3.select(svgRef.current);\n    const currentTransform = d3.zoomTransform(svg.node());\n    svg.transition().duration(300).call(zoomRef.current.transform, d3.zoomIdentity.translate(currentTransform.x, currentTransform.y).scale(currentTransform.k * 1.3));\n  }, []);\n  const zoomOut = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    const svg = d3.select(svgRef.current);\n    const currentTransform = d3.zoomTransform(svg.node());\n    svg.transition().duration(300).call(zoomRef.current.transform, d3.zoomIdentity.translate(currentTransform.x, currentTransform.y).scale(currentTransform.k / 1.3));\n  }, []);\n  const centerView = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    const svg = d3.select(svgRef.current);\n\n    // Calculate the center point\n    const centerX = dimensions.width / 2;\n    const centerY = dimensions.height / 2;\n\n    // Create a transform that centers the view\n    const transform = d3.zoomIdentity.translate(centerX, centerY).scale(1).translate(-centerX, -centerY);\n\n    // Apply the transform with a smooth transition\n    svg.transition().duration(750).call(zoomRef.current.transform, transform);\n  }, [dimensions]);\n  const fitToScreen = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current || !graphData.nodes.length) return;\n    const svg = d3.select(svgRef.current);\n\n    // Find the bounds of all nodes\n    let minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity;\n    graphData.nodes.forEach(node => {\n      if (!node.x || !node.y) return;\n      if (node.x < minX) minX = node.x;\n      if (node.y < minY) minY = node.y;\n      if (node.x > maxX) maxX = node.x;\n      if (node.y > maxY) maxY = node.y;\n    });\n\n    // If we don't have valid bounds, center view instead\n    if (!isFinite(minX) || !isFinite(minY) || !isFinite(maxX) || !isFinite(maxY)) {\n      centerView();\n      return;\n    }\n\n    // Add padding\n    const padding = 50;\n    minX -= padding;\n    minY -= padding;\n    maxX += padding;\n    maxY += padding;\n\n    // Calculate width and height of the content\n    const contentWidth = maxX - minX;\n    const contentHeight = maxY - minY;\n\n    // Calculate scale to fit the content\n    const scale = Math.min(dimensions.width / contentWidth, dimensions.height / contentHeight, 2 // Maximum scale factor\n    ) * 0.9; // 90% to add some margin\n\n    // Calculate the center of the content\n    const centerX = (minX + maxX) / 2;\n    const centerY = (minY + maxY) / 2;\n\n    // Create a transform that centers and scales the content\n    const transform = d3.zoomIdentity.translate(dimensions.width / 2, dimensions.height / 2).scale(scale).translate(-centerX, -centerY);\n\n    // Apply the transform with a smooth transition\n    svg.transition().duration(750).call(zoomRef.current.transform, transform);\n  }, [dimensions, graphData.nodes, centerView]);\n\n  // Toggle mini-map visibility\n  const toggleMiniMap = useCallback(() => {\n    setShowMiniMap(!showMiniMap);\n  }, [showMiniMap]);\n  const handleDataImported = importedData => {\n    if (importedData) {\n      setGraphData({\n        nodes: importedData.nodes || [],\n        links: importedData.links || []\n      });\n      setInsights(importedData.insights || []);\n    }\n  };\n\n  // Define the Legend component inside UserResearchNetwork.js\n  const LegendComponent = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute left-4 bottom-20 bg-white p-3 rounded-lg shadow-md border border-gray-200 z-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-sm font-semibold mb-2\",\n        children: \"Legend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1788,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-xs font-medium text-gray-700\",\n            children: \"Node Types\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1792,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 rounded-full mr-2\",\n              style: {\n                backgroundColor: \"#3182CE\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1794,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs\",\n              children: \"Theme\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1795,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1793,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 rounded-full mr-2\",\n              style: {\n                backgroundColor: \"#38A169\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1798,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs\",\n              children: \"Feedback\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1799,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1797,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 rounded-full mr-2\",\n              style: {\n                backgroundColor: \"#DD6B20\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1802,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs\",\n              children: \"User Role\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1803,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1801,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1791,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-1 pt-2 border-t border-gray-200\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-xs font-medium text-gray-700\",\n            children: \"Feedback Sentiment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1808,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 rounded-full mr-2\",\n              style: {\n                backgroundColor: sentimentColorScale[\"Positive\"]\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1810,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs\",\n              children: \"Positive\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1811,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1809,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 rounded-full mr-2\",\n              style: {\n                backgroundColor: sentimentColorScale[\"Negative\"]\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1814,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs\",\n              children: \"Negative\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1815,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1813,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-4 h-4 rounded-full mr-2\",\n              style: {\n                backgroundColor: sentimentColorScale[\"Neutral\"]\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1818,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs\",\n              children: \"Neutral\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1819,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1817,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1807,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1790,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1787,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Load initial data\n  useEffect(() => {\n    if (!loading && graphData.nodes.length === 0) {\n      setGraphData(initialData);\n    }\n  }, [loading, graphData.nodes.length]);\n\n  // Loading screen\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col h-full items-center justify-center bg-gray-50\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-2xl text-blue-800 mb-4\",\n        children: \"Loading Insights Network...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1838,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1839,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1837,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Error screen\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col h-full items-center justify-center bg-gray-50\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-2xl text-red-800 mb-4\",\n        children: \"Error Loading Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1848,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-gray-600\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1849,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\",\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1850,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1847,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative w-full h-full\",\n    ref: containerRef,\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      className: \"w-full h-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1862,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LegendComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1865,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-4 right-4 flex space-x-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded-full\",\n        onClick: zoomIn,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xl\",\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1873,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1869,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded-full\",\n        onClick: zoomOut,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xl\",\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1879,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1875,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded-full\",\n        onClick: fitToScreen,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xl\",\n          children: \"\\u22A1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1885,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1881,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1868,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1861,\n    columnNumber: 5\n  }, this);\n};\n_s(UserResearchNetwork, \"BM7E75kEb8DFZanG6S3g1P+rpvk=\");\n_c = UserResearchNetwork;\nexport default UserResearchNetwork;\nvar _c;\n$RefreshReg$(_c, \"UserResearchNetwork\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","d3","classifyFeedback","generateFeatureIdeas","FeedbackImporter","processFeedbackData","importFeedbackData","Legend","jsxDEV","_jsxDEV","colorScale","scaleOrdinal","domain","range","initialData","nodes","id","name","type","feedbackCount","priority","links","source","target","strength","sentimentColorScale","UserResearchNetwork","_s","svgRef","containerRef","zoomRef","simulationRef","dimensions","setDimensions","width","height","graphData","setGraphData","selectedNode","setSelectedNode","highlightMode","setHighlightMode","feedbackWeight","setFeedbackWeight","loading","setLoading","error","setError","showModal","setShowModal","modalType","setModalType","showConnectionModal","setShowConnectionModal","showFeedbackModal","setShowFeedbackModal","newNodeName","setNewNodeName","newNodeFeedbackCount","setNewNodeFeedbackCount","newNodePriority","setNewNodePriority","connectionSource","setConnectionSource","connectionTarget","setConnectionTarget","connectionStrength","setConnectionStrength","availableTargets","setAvailableTargets","multipleConnections","setMultipleConnections","showMiniMap","setShowMiniMap","searchTerm","setSearchTerm","searchResults","setSearchResults","showSearchResults","setShowSearchResults","isAIProcessing","setIsAIProcessing","aiError","setAIError","feedbackItems","setFeedbackItems","showAIInsightsPanel","setShowAIInsightsPanel","aiInsights","setAIInsights","isPanelCollapsed","setIsPanelCollapsed","panelWidth","setPanelWidth","newFeedback","setNewFeedback","newFeedbackRole","setNewFeedbackRole","insights","setInsights","analyticsData","setAnalyticsData","selectedThemeForFeedback","setSelectedThemeForFeedback","createMiniMap","current","length","svg","select","selectAll","remove","miniMapSize","Math","min","miniMapMargin","miniMapContainer","append","attr","miniMapNodes","map","node","miniX","random","miniY","miniMapLinks","link","sourceId","targetId","filter","some","n","miniMapSimulation","forceSimulation","force","forceLink","d","distance","forceManyBody","forceCenter","forceCollide","radius","miniLinks","data","enter","miniNodes","baseColor","color","brighter","text","viewportRect","stop","i","tick","find","style","on","event","x","y","pointer","centerX","centerY","transform","zoomIdentity","translate","scale","transition","duration","call","timer","setTimeout","clearTimeout","cleanupMiniMap","updateDimensions","getBoundingClientRect","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","window","removeEventListener","disconnect","containerWidth","clientWidth","containerHeight","clientHeight","centerView","recalculateFeedbackCounts","console","log","g","zoom","scaleExtent","Array","isArray","normalizedLinks","validLinks","sourceExists","targetExists","warn","simulation","sourceType","targetType","max","drag","dragstarted","dragged","dragended","stopPropagation","fx","fy","handleNodeClick","sentiment","title","active","alphaTarget","restart","feedbackCounts","themes","personas","features","forEach","sourceNode","targetNode","updatedNodes","prevData","importData","file","files","then","importedData","processedNodes","label","analytics","svgWidth","svgHeight","catch","message","mockClassifyFeedback","lowerText","toLowerCase","includes","theme","mockGenerateFeatureIdeas","processImportedFeedback","newGraph","nodeMap","item","user_role","personaId","Date","now","Object","keys","personaNode","push","processChunks","chunkSize","chunks","slice","chunk","substring","result","feedbackId","toString","substr","feedbackNode","timestamp","toISOString","err","Promise","resolve","significantThemes","values","sort","a","b","relatedFeedback","featureIdeas","idea","featureId","featureNode","description","existingLink","l","fallback","tempSimulation","handleAddNode","trim","alert","newNode","connectedLinks","connectedNodeIds","connectedNodes","results","nodeType","nodeId","connectedFeatures","connectedPersonas","isFeatureView","connectedThemes","persona","personaFeedback","isFeedbackView","feedbackText","fullText","originalText","completeText","content","feedback","matchingItem","role","date","created_at","relatedThemes","handleConnectionSubmit","existingConnection","newLink","connectNodes","targets","exportData","dataStr","JSON","stringify","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","document","createElement","setAttribute","click","resetVisualization","confirm","handleAddFeedback","fallbackResult","selectedTheme","connectFeedbackToThemeById","classification","connectFeedbackToTheme","fallbackClassification","connectFeedbackToPersona","roleName","replace","linkExists","themeName","themeNode","alpha","themeId","zoomIn","currentTransform","zoomTransform","k","zoomOut","fitToScreen","minX","Infinity","minY","maxX","maxY","isFinite","padding","contentWidth","contentHeight","toggleMiniMap","handleDataImported","LegendComponent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","onClick","location","reload","ref","_c","$RefreshReg$"],"sources":["/Users/faisalshariff/Feedback Force/src/components/UserResearchNetwork.js"],"sourcesContent":["// UserResearchNetwork.js\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport { classifyFeedback, generateFeatureIdeas } from '../services/openaiService';\n\nimport FeedbackImporter from './FeedbackImporter';\nimport { processFeedbackData, importFeedbackData } from '../utils/importData';\nimport Legend from './Legend';\n\n// Color scale for node types\nconst colorScale = d3.scaleOrdinal()\n  .domain([\"theme\", \"feedback\", \"persona\"])\n  .range([\"#3182CE\", \"#38A169\", \"#DD6B20\"]); // Blue, Green, Orange\n\n// Initial data structure\nconst initialData = {\n  nodes: [\n    { id: \"theme1\", name: \"Performance\", type: \"theme\", feedbackCount: 10 },\n    { id: \"theme2\", name: \"User Interface\", type: \"theme\", feedbackCount: 8 },\n    { id: \"theme3\", name: \"Mobile Experience\", type: \"theme\", feedbackCount: 6 },\n    { id: \"persona1\", name: \"Data Analyst\", type: \"persona\" },\n    { id: \"persona2\", name: \"Marketing Manager\", type: \"persona\" },\n    { id: \"feature1\", name: \"Performance Optimization\", type: \"feature\", priority: \"High\" }\n  ],\n  links: [\n    { source: \"theme1\", target: \"persona1\", strength: 0.7 },\n    { source: \"theme2\", target: \"persona1\", strength: 0.5 },\n    { source: \"theme1\", target: \"feature1\", strength: 0.8 },\n    { source: \"persona1\", target: \"feature1\", strength: 0.6 }\n  ]\n};\n\n// Add this code near the top of your file where you define colorScale\nconst sentimentColorScale = {\n  \"Positive\": \"#68D391\", // Green\n  \"Negative\": \"#FC8181\", // Red\n  \"Neutral\": \"#CBD5E0\"   // Gray\n};\n\n// Main component\nconst UserResearchNetwork = () => {\n  // Refs\n  const svgRef = useRef(null);\n  const containerRef = useRef(null);\n  const zoomRef = useRef(null);\n  const simulationRef = useRef(null);\n  \n  // State\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] });\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [highlightMode, setHighlightMode] = useState('none');\n  const [feedbackWeight, setFeedbackWeight] = useState(5);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Modal states\n  const [showModal, setShowModal] = useState(false);\n  const [modalType, setModalType] = useState(''); // 'theme' or 'feature'\n  const [showConnectionModal, setShowConnectionModal] = useState(false);\n  const [showFeedbackModal, setShowFeedbackModal] = useState(false);\n\n  // Node form state\n  const [newNodeName, setNewNodeName] = useState('');\n  const [newNodeFeedbackCount, setNewNodeFeedbackCount] = useState(10);\n  const [newNodePriority, setNewNodePriority] = useState('Medium');\n  \n  // Connection state\n  const [connectionSource, setConnectionSource] = useState(null);\n  const [connectionTarget, setConnectionTarget] = useState('');\n  const [connectionStrength, setConnectionStrength] = useState(0.5);\n  const [availableTargets, setAvailableTargets] = useState([]);\n  const [multipleConnections, setMultipleConnections] = useState([]);\n  \n  // Minimap state - set to true by default\n  const [showMiniMap, setShowMiniMap] = useState(true);\n  \n  // Search state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  \n  // AI state\n  const [isAIProcessing, setIsAIProcessing] = useState(false);\n  const [aiError, setAIError] = useState(null);\n  const [feedbackItems, setFeedbackItems] = useState([]);\n  const [showAIInsightsPanel, setShowAIInsightsPanel] = useState(false);\n  const [aiInsights, setAIInsights] = useState(null);\n  const [isPanelCollapsed, setIsPanelCollapsed] = useState(false);\n  const [panelWidth, setPanelWidth] = useState(320);\n  \n  // New feedback state\n  const [newFeedback, setNewFeedback] = useState('');\n  const [newFeedbackRole, setNewFeedbackRole] = useState('');\n\n  const [insights, setInsights] = useState([]);\n  const [analyticsData, setAnalyticsData] = useState(null);\n\n  // New theme selection state\n  const [selectedThemeForFeedback, setSelectedThemeForFeedback] = useState('');\n\n  // MiniMap implementation - define this before any useEffects that use it\n  const createMiniMap = useCallback(() => {\n    if (!svgRef.current || !graphData.nodes || graphData.nodes.length === 0) return () => {};\n    \n    const svg = d3.select(svgRef.current);\n    \n    // Remove any existing mini-map\n    svg.selectAll(\".mini-map-container\").remove();\n    \n    // Calculate mini-map size based on the main SVG dimensions\n    const miniMapSize = Math.min(dimensions.width, dimensions.height) * 0.25;\n    const miniMapMargin = 20;\n    \n    // Create a container for the mini-map\n    const miniMapContainer = svg.append(\"g\")\n      .attr(\"class\", \"mini-map-container\")\n      .attr(\"transform\", `translate(${miniMapMargin}, ${miniMapMargin})`);\n    \n    // Add a background rectangle\n    miniMapContainer.append(\"rect\")\n      .attr(\"width\", miniMapSize)\n      .attr(\"height\", miniMapSize)\n      .attr(\"fill\", \"#f0f4f8\")\n      .attr(\"fill-opacity\", 0.9)\n      .attr(\"stroke\", \"#3182CE\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"rx\", 6);\n    \n    // Create a separate mini-map simulation\n    const miniMapNodes = graphData.nodes.map(node => ({\n      ...node,\n      miniX: Math.random() * miniMapSize,\n      miniY: Math.random() * miniMapSize\n    }));\n    \n    // Create links array with proper source/target references\n    const miniMapLinks = graphData.links.map(link => {\n      // Extract source and target IDs consistently\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      \n      return {\n        source: sourceId,\n        target: targetId\n      };\n    }).filter(link => {\n      // Filter out links with invalid source or target\n      return miniMapNodes.some(n => n.id === link.source) && \n             miniMapNodes.some(n => n.id === link.target);\n    });\n    \n    // Create a separate force simulation just for the mini-map\n    const miniMapSimulation = d3.forceSimulation(miniMapNodes)\n      .force(\"link\", d3.forceLink(miniMapLinks).id(d => d.id).distance(5))\n      .force(\"charge\", d3.forceManyBody().strength(-20))\n      .force(\"center\", d3.forceCenter(miniMapSize / 2, miniMapSize / 2))\n      .force(\"collide\", d3.forceCollide().radius(4));\n    \n    // Add mini-map links\n    const miniLinks = miniMapContainer.selectAll(\".mini-link\")\n      .data(miniMapLinks)\n      .enter()\n      .append(\"line\")\n      .attr(\"class\", \"mini-link\")\n      .attr(\"stroke\", \"#ccc\")\n      .attr(\"stroke-width\", 0.5);\n    \n    // Add mini-map nodes\n    const miniNodes = miniMapContainer.selectAll(\".mini-node\")\n      .data(miniMapNodes)\n      .enter()\n      .append(\"circle\")\n      .attr(\"class\", \"mini-node\")\n      .attr(\"r\", 3)\n      .attr(\"fill\", d => {\n        // Use the same color scale but with higher opacity\n        const baseColor = colorScale(d.type);\n        return d3.color(baseColor).brighter(0.3);\n      })\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 1);\n    \n    // Add a label\n    miniMapContainer.append(\"text\")\n      .attr(\"x\", 10)\n      .attr(\"y\", 15)\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", \"#2D3748\")\n      .text(\"Network Overview\");\n    \n    // Add a border to show the current viewport\n    const viewportRect = miniMapContainer.append(\"rect\")\n      .attr(\"class\", \"mini-map-viewport\")\n      .attr(\"width\", miniMapSize)\n      .attr(\"height\", miniMapSize)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#3182ce\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"stroke-dasharray\", \"4,4\");\n    \n    // Run the mini-map simulation for a fixed number of ticks\n    miniMapSimulation.stop();\n    for (let i = 0; i < 300; i++) {\n      miniMapSimulation.tick();\n    }\n    \n    // Update the mini-map nodes with their final positions\n    miniLinks\n      .attr(\"x1\", d => {\n        const source = miniMapNodes.find(n => n.id === d.source);\n        return source ? source.miniX : 0;\n      })\n      .attr(\"y1\", d => {\n        const source = miniMapNodes.find(n => n.id === d.source);\n        return source ? source.miniY : 0;\n      })\n      .attr(\"x2\", d => {\n        const target = miniMapNodes.find(n => n.id === d.target);\n        return target ? target.miniX : 0;\n      })\n      .attr(\"y2\", d => {\n        const target = miniMapNodes.find(n => n.id === d.target);\n        return target ? target.miniY : 0;\n      });\n    \n    miniNodes\n      .attr(\"cx\", d => d.miniX)\n      .attr(\"cy\", d => d.miniY);\n    \n    // Add click behavior\n    miniMapContainer.append(\"rect\")\n      .attr(\"width\", miniMapSize)\n      .attr(\"height\", miniMapSize)\n      .attr(\"fill\", \"transparent\")\n      .attr(\"stroke\", \"none\")\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", (event) => {\n        if (!zoomRef.current) return;\n        \n        // Get click position relative to mini-map\n        const [x, y] = d3.pointer(event);\n        \n        // Calculate the center point in the main view\n        const centerX = (x / miniMapSize) * dimensions.width;\n        const centerY = (y / miniMapSize) * dimensions.height;\n        \n        // Create a transform that centers on the clicked point\n        const transform = d3.zoomIdentity\n          .translate(dimensions.width / 2, dimensions.height / 2)\n          .scale(1)\n          .translate(-centerX, -centerY);\n        \n        // Apply the transform with a smooth transition\n        svg.transition()\n          .duration(750)\n          .call(zoomRef.current.transform, transform);\n      });\n    \n    // Return cleanup function\n    return () => {\n      svg.selectAll(\".mini-map-container\").remove();\n      if (miniMapSimulation) miniMapSimulation.stop();\n    };\n  }, [dimensions, graphData, colorScale]);\n\n  // Simulate loading data on initial render - without createMiniMap dependency\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Add a separate effect to create the mini-map after loading\n  useEffect(() => {\n    if (!loading && showMiniMap && svgRef.current) {\n      const timer = setTimeout(() => {\n        createMiniMap();\n      }, 100);\n      return () => clearTimeout(timer);\n    }\n  }, [loading, showMiniMap, dimensions]);\n\n  // Create a minimap when needed\n  useEffect(() => {\n    // Only create minimap if the SVG ref exists, dimensions are valid, and showMiniMap is true\n    if (svgRef.current && dimensions.width > 0 && dimensions.height > 0 && showMiniMap) {\n      // Remove any existing mini-map first to prevent duplicates\n      d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n      \n      const cleanupMiniMap = createMiniMap();\n      return cleanupMiniMap;\n    } else {\n      // Clean up any existing mini-map if showMiniMap is false\n      d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n    }\n  }, [showMiniMap, graphData, dimensions.width, dimensions.height, selectedNode]);\n\n  // Update dimensions when window resizes\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    const updateDimensions = () => {\n      if (containerRef.current) {\n        const { width, height } = containerRef.current.getBoundingClientRect();\n        setDimensions({ width, height });\n      }\n    };\n    \n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        const { width, height } = entry.contentRect;\n        setDimensions({ width, height });\n      }\n    });\n    \n    resizeObserver.observe(containerRef.current);\n    updateDimensions();\n    \n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  // Adjust container dimensions when panel is open\n  useEffect(() => {\n    if (containerRef.current) {\n      const containerWidth = containerRef.current.clientWidth;\n      const containerHeight = containerRef.current.clientHeight;\n      \n      // Adjust dimensions based on panel state\n      if (showAIInsightsPanel && !isPanelCollapsed) {\n        // Reduce width to make room for the panel\n        setDimensions({\n          width: containerWidth - panelWidth,\n          height: containerHeight\n        });\n      } else {\n        // Use full width\n        setDimensions({\n          width: containerWidth,\n          height: containerHeight\n        });\n      }\n    }\n  }, [showAIInsightsPanel, isPanelCollapsed, panelWidth]);\n\n  // Recenter view when panel state changes\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      centerView();\n    }, 300);\n    \n    return () => clearTimeout(timer);\n  }, [showAIInsightsPanel, isPanelCollapsed]);\n\n  // Recalculate feedback counts when feedback items change\n  useEffect(() => {\n    if (feedbackItems.length > 0) {\n      recalculateFeedbackCounts();\n    }\n  }, [feedbackItems]);\n\n  // Main visualization rendering effect\n  useEffect(() => {\n    if (!svgRef.current || !dimensions.width || !dimensions.height) return;\n    \n    console.log(\"Rendering with data:\", graphData);\n    \n    // Clear the SVG\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    \n    // Create a container group for all elements\n    const g = svg.append(\"g\");\n    \n    // Set up zoom behavior\n    const zoom = d3.zoom()\n      .scaleExtent([0.1, 4])\n      .on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      });\n    \n    svg.call(zoom);\n    zoomRef.current = zoom;\n    \n    // Verify we have valid data\n    if (!graphData.nodes || !graphData.links || \n        !Array.isArray(graphData.nodes) || !Array.isArray(graphData.links) ||\n        graphData.nodes.length === 0) {\n      console.error(\"Invalid or empty graph data:\", graphData);\n      return;\n    }\n    \n    // Create working copies of the data with proper link references\n    const nodes = graphData.nodes.map(node => ({...node}));\n    \n    // Normalize links to ensure proper format for D3\n    const normalizedLinks = graphData.links.map(link => {\n      // Extract source and target IDs consistently\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      \n      // Return a new link object with just IDs (D3 will convert to objects)\n      return {\n        source: sourceId,\n        target: targetId,\n        strength: link.strength || 0.5\n      };\n    });\n    \n    // Verify all links have valid source and target nodes\n    const validLinks = normalizedLinks.filter(link => {\n      const sourceExists = nodes.some(node => node.id === link.source);\n      const targetExists = nodes.some(node => node.id === link.target);\n      if (!sourceExists) console.warn(`Link has invalid source: ${link.source}`);\n      if (!targetExists) console.warn(`Link has invalid target: ${link.target}`);\n      return sourceExists && targetExists;\n    });\n    \n    console.log(`Found ${validLinks.length} valid links out of ${normalizedLinks.length}`);\n    \n    // Create the force simulation with strong link forces\n    const simulation = d3.forceSimulation(nodes)\n      .force(\"link\", d3.forceLink(validLinks)\n        .id(d => d.id)\n        .distance(100)\n        .strength(1)) // Stronger link force for better connections\n      .force(\"charge\", d3.forceManyBody().strength(-300))\n      .force(\"center\", d3.forceCenter(dimensions.width / 2, dimensions.height / 2))\n      .force(\"collide\", d3.forceCollide(30));\n    \n    simulationRef.current = simulation;\n    \n    // Create the links\n    const link = g.append(\"g\")\n      .attr(\"class\", \"links\")\n      .selectAll(\"line\")\n      .data(validLinks)\n      .enter()\n      .append(\"line\")\n      .attr(\"stroke\", d => {\n        // Get the source and target nodes\n        const source = nodes.find(n => n.id === d.source);\n        const target = nodes.find(n => n.id === d.target);\n        \n        if (!source || !target) return \"#999\";\n        \n        const sourceType = source.type;\n        const targetType = target.type;\n        \n        if (sourceType === \"theme\" && targetType === \"feature\") return \"#90CDF4\"; // Light blue\n        if (sourceType === \"feature\" && targetType === \"theme\") return \"#90CDF4\"; // Light blue\n        if (sourceType === \"theme\" && targetType === \"persona\") return \"#FBD38D\"; // Light orange\n        if (sourceType === \"persona\" && targetType === \"theme\") return \"#FBD38D\"; // Light orange\n        if (sourceType === \"persona\" && targetType === \"feature\") return \"#9AE6B4\"; // Light green\n        if (sourceType === \"feature\" && targetType === \"persona\") return \"#9AE6B4\"; // Light green\n        \n        return \"#999\"; // Default gray\n      })\n      .attr(\"stroke-opacity\", 0.6)\n      .attr(\"stroke-width\", d => Math.max(2, d.strength * 6)); // Thicker lines for visibility\n    \n    // Create the nodes\n    const node = g.append(\"g\")\n      .attr(\"class\", \"nodes\")\n      .selectAll(\"g\")\n      .data(nodes)\n      .enter()\n      .append(\"g\")\n      .call(d3.drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended))\n      .on(\"click\", (event, d) => {\n        event.stopPropagation();\n        \n        if (selectedNode && selectedNode.id === d.id) {\n          // If clicking the same node again, release it\n          d.fx = null;\n          d.fy = null;\n          setSelectedNode(null);\n        } else {\n          // If clicking a new node, fix its position\n          d.fx = d.x;\n          d.fy = d.y;\n          setSelectedNode(d);\n          handleNodeClick(d);\n        }\n      });\n    \n    // Add circles to nodes with appropriate colors\n    node.append(\"circle\")\n      .attr(\"r\", d => {\n        if (d.type === \"theme\") return 20 + (d.feedbackCount / 2);\n        if (d.type === \"persona\") return 15;\n        return 10; // Smaller feedback nodes\n      })\n      .attr(\"fill\", d => {\n        // For feedback nodes, color by sentiment if available\n        if (d.type === \"feedback\" && d.sentiment) {\n          if (d.sentiment === \"Positive\") return \"#68D391\"; // Green\n          if (d.sentiment === \"Negative\") return \"#FC8181\"; // Red\n          return \"#CBD5E0\"; // Gray for neutral\n        }\n        // Otherwise use the standard color scale\n        return colorScale(d.type);\n      })\n      .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 2);\n    \n    // Add labels with better positioning\n    node.append(\"text\")\n      .text(d => d.name)\n      .attr(\"x\", 0)\n      .attr(\"y\", d => {\n        if (d.type === \"theme\") return 30 + (d.feedbackCount / 2);\n        if (d.type === \"persona\") return 25;\n        return 22; // Position feedback labels\n      })\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", d => d.type === \"feedback\" ? \"10px\" : \"12px\") // Smaller text for feedback\n      .attr(\"fill\", \"#333\");\n    \n    // Add title for tooltip that shows full feedback text\n    node.append(\"title\")\n      .text(d => d.type === \"feedback\" ? d.title : d.name);\n    \n    // Run a few ticks before adding listener to get nodes in better positions\n    for (let i = 0; i < 20; i++) {\n      simulation.tick();\n    }\n    \n    // Update link positions immediately with node positions from simulation ticks\n    link\n      .attr(\"x1\", d => {\n        const source = nodes.find(n => n.id === d.source);\n        return source ? source.x : 0;\n      })\n      .attr(\"y1\", d => {\n        const source = nodes.find(n => n.id === d.source);\n        return source ? source.y : 0;\n      })\n      .attr(\"x2\", d => {\n        const target = nodes.find(n => n.id === d.target);\n        return target ? target.x : 0;\n      })\n      .attr(\"y2\", d => {\n        const target = nodes.find(n => n.id === d.target);\n        return target ? target.y : 0;\n      });\n    \n    // Now add the tick listener for ongoing updates\n    simulation.on(\"tick\", () => {\n      link\n        .attr(\"x1\", d => {\n          // Handle both ID and object references\n          const sourceId = typeof d.source === 'object' ? d.source.id : d.source;\n          const source = nodes.find(n => n.id === sourceId);\n          return source ? source.x : 0;\n        })\n        .attr(\"y1\", d => {\n          const sourceId = typeof d.source === 'object' ? d.source.id : d.source;\n          const source = nodes.find(n => n.id === sourceId);\n          return source ? source.y : 0;\n        })\n        .attr(\"x2\", d => {\n          const targetId = typeof d.target === 'object' ? d.target.id : d.target;\n          const target = nodes.find(n => n.id === targetId);\n          return target ? target.x : 0;\n        })\n        .attr(\"y2\", d => {\n          const targetId = typeof d.target === 'object' ? d.target.id : d.target;\n          const target = nodes.find(n => n.id === targetId);\n          return target ? target.y : 0;\n        });\n      \n      node.attr(\"transform\", d => `translate(${d.x}, ${d.y})`);\n    });\n    \n    // Drag functions\n    function dragstarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    \n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    \n    function dragended(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      \n      // Only release the node if it's not the selected node\n      if (!selectedNode || selectedNode.id !== d.id) {\n        d.fx = null;\n        d.fy = null;\n      }\n    }\n    \n    // Center the view\n    svg.call(zoom.transform, d3.zoomIdentity.translate(\n      dimensions.width / 2 - dimensions.width * 0.5,\n      dimensions.height / 2 - dimensions.height * 0.5\n    ).scale(0.8));\n    \n    // Clean up on unmount\n    return () => {\n      simulation.stop();\n    };\n  }, [dimensions, graphData, feedbackWeight, highlightMode, selectedNode]);\n\n  // Recalculate feedback counts based on graph connections\n  const recalculateFeedbackCounts = useCallback(() => {\n    // Create a map to track feedback counts\n    const feedbackCounts = {\n      themes: {},\n      personas: {},\n      features: {}\n    };\n    \n    // Count feedback for each node type based on connections\n    graphData.links.forEach(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      \n      const sourceNode = graphData.nodes.find(n => n.id === sourceId);\n      const targetNode = graphData.nodes.find(n => n.id === targetId);\n      \n      if (!sourceNode || !targetNode) return;\n      \n      // Count theme connections\n      if (sourceNode.type === \"theme\" && targetNode.type === \"feedback\") {\n        feedbackCounts.themes[sourceNode.id] = (feedbackCounts.themes[sourceNode.id] || 0) + 1;\n      }\n      else if (targetNode.type === \"theme\" && sourceNode.type === \"feedback\") {\n        feedbackCounts.themes[targetNode.id] = (feedbackCounts.themes[targetNode.id] || 0) + 1;\n      }\n      \n      // Count persona connections\n      if (sourceNode.type === \"persona\" && targetNode.type === \"feedback\") {\n        feedbackCounts.personas[sourceNode.id] = (feedbackCounts.personas[sourceNode.id] || 0) + 1;\n      }\n      else if (targetNode.type === \"persona\" && sourceNode.type === \"feedback\") {\n        feedbackCounts.personas[targetNode.id] = (feedbackCounts.personas[targetNode.id] || 0) + 1;\n      }\n    });\n    \n    // Update node feedback counts\n    const updatedNodes = graphData.nodes.map(node => {\n      if (node.type === \"theme\" && feedbackCounts.themes[node.id]) {\n        return { ...node, feedbackCount: feedbackCounts.themes[node.id] };\n      }\n      if (node.type === \"persona\" && feedbackCounts.personas[node.id]) {\n        return { ...node, feedbackCount: feedbackCounts.personas[node.id] };\n      }\n      return node;\n    });\n    \n    // Update the graph data\n    setGraphData(prevData => ({\n      ...prevData,\n      nodes: updatedNodes\n    }));\n  }, [graphData]);\n\n  // Import data from file with more robust processing\n  const importData = useCallback((event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    console.log(\"Starting import from file:\", file.name);\n    \n    // Use our async utility function\n    importFeedbackData(file)\n      .then(importedData => {\n        console.log(\"Processed import data:\", importedData);\n        \n        // Ensure node structure is compatible with visualization\n        const processedNodes = importedData.nodes.map(node => {\n          // Make sure each node has the essential properties\n          return {\n            ...node,\n            // Ensure these critical properties exist\n            id: node.id,\n            name: node.name || node.label || \"Unnamed\",\n            type: node.type || \"theme\",\n            // Add appropriate properties based on type\n            ...(node.type === 'theme' ? { feedbackCount: node.feedbackCount || 5 } : {}),\n            ...(node.type === 'feature' ? { priority: node.priority || 'Medium' } : {})\n          };\n        });\n        \n        setGraphData({ \n          nodes: processedNodes, \n          links: importedData.links || []\n        });\n        setInsights(importedData.insights || []);\n        setAnalyticsData(importedData.analytics || null);\n        setLoading(false);\n        \n        // Reset any selections and force a re-center\n        setSelectedNode(null);\n        // Use a timeout without directly referencing fitToScreen\n        setTimeout(() => {\n          if (zoomRef.current) {\n            const svg = d3.select(svgRef.current);\n            const svgWidth = svg.node().getBoundingClientRect().width;\n            const svgHeight = svg.node().getBoundingClientRect().height;\n            \n            svg.transition()\n              .duration(750)\n              .call(zoomRef.current.transform, \n                d3.zoomIdentity\n                  .translate(svgWidth / 2, svgHeight / 2)\n                  .scale(0.8)\n              );\n          }\n        }, 300);\n      })\n      .catch(error => {\n        console.error(\"Error importing feedback data:\", error);\n        setError(`Error importing file: ${error.message || \"Unknown error\"}`);\n        setLoading(false);\n      });\n  }, []); // Remove fitToScreen from dependencies\n\n  // Helper function for keyword-based theme classification (used as fallback)\n  const mockClassifyFeedback = (text) => {\n    // Simple keyword-based classification\n    const lowerText = text.toLowerCase();\n    \n    // First determine sentiment\n    let sentiment = \"Neutral\";\n    \n    // Check for negative sentiment keywords\n    if (lowerText.includes('bad') || lowerText.includes('terrible') || \n        lowerText.includes('awful') || lowerText.includes('poor') ||\n        lowerText.includes('hate') || lowerText.includes('worst') ||\n        lowerText.includes('difficult') || lowerText.includes('problem') ||\n        lowerText.includes('issue') || lowerText.includes('bug') ||\n        lowerText.includes('crash') || lowerText.includes('error') ||\n        lowerText.includes('not working') || lowerText.includes('doesn\\'t work') ||\n        lowerText.includes('frustrated') || lowerText.includes('annoying')) {\n      sentiment = \"Negative\";\n    }\n    // Check for positive sentiment keywords\n    else if (lowerText.includes('good') || lowerText.includes('great') || \n             lowerText.includes('excellent') || lowerText.includes('awesome') ||\n             lowerText.includes('love') || lowerText.includes('best') ||\n             lowerText.includes('helpful') || lowerText.includes('easy') ||\n             lowerText.includes('intuitive') || lowerText.includes('fantastic')) {\n      sentiment = \"Positive\";\n    }\n    \n    // Then determine theme\n    let theme = \"General Feedback\";\n    \n    if (lowerText.includes('crash') || lowerText.includes('error') || lowerText.includes('bug')) {\n      theme = 'Stability Issues';\n    } else if (lowerText.includes('slow') || lowerText.includes('performance') || lowerText.includes('timeout')) {\n      theme = 'Performance';\n    } else if (lowerText.includes('mobile') || lowerText.includes('app') || lowerText.includes('phone')) {\n      theme = 'Mobile Experience';\n    } else if (lowerText.includes('ui') || lowerText.includes('interface') || lowerText.includes('design') || \n              lowerText.includes('layout') || lowerText.includes('look')) {\n      theme = 'User Interface';\n    } else if (lowerText.includes('report') || lowerText.includes('dashboard')) {\n      theme = 'Reporting & Analytics';\n    } else if (lowerText.includes('export') || lowerText.includes('excel') || lowerText.includes('pdf')) {\n      theme = 'Data Export & Import';\n    } else if (lowerText.includes('search') || lowerText.includes('filter') || lowerText.includes('find')) {\n      theme = 'Search & Navigation';\n    }\n    \n    return { \n      theme: theme,\n      sentiment: sentiment \n    };\n  };\n  \n  // Helper function for feature generation (used as fallback)\n  const mockGenerateFeatureIdeas = (theme) => {\n    // Generate simple feature ideas based on theme\n    if (theme === 'Stability Issues') {\n      return [{ \n        name: 'Crash Prevention & Recovery', \n        priority: 'High'\n      }];\n    } else if (theme === 'Performance') {\n      return [{ \n        name: 'Performance Optimization', \n        priority: 'High'\n      }];\n    } else if (theme === 'Mobile Experience') {\n      return [{ \n        name: 'Responsive Design Overhaul', \n        priority: 'High'\n      }];\n    } else if (theme === 'User Interface') {\n      return [{ \n        name: 'UI Modernization', \n        priority: 'Medium'\n      }];\n    } else if (theme === 'Reporting & Analytics') {\n      return [{ \n        name: 'Custom Report Builder', \n        priority: 'High'\n      }];\n    } else if (theme === 'Data Export & Import') {\n      return [{ \n        name: 'Enhanced Export Options', \n        priority: 'High'\n      }];\n    } else {\n      return [{ \n        name: 'User Experience Improvements', \n        priority: 'Medium'\n      }];\n    }\n  };\n\n  // Process imported feedback with enhanced reliability\n  const processImportedFeedback = useCallback((feedbackItems) => {\n    if (!feedbackItems || feedbackItems.length === 0) {\n      setLoading(false);\n      return;\n    }\n    \n    console.log(`Processing ${feedbackItems.length} feedback items...`);\n    setIsAIProcessing(true);\n    \n    // Create a new graph structure\n    const newGraph = {\n      nodes: [],\n      links: []\n    };\n    \n    // Track created nodes to avoid duplicates\n    const nodeMap = {\n      personas: {},\n      themes: {},\n      features: {}\n    };\n    \n    // Step 1: First create all persona nodes from feedback\n    console.log(\"Creating persona nodes...\");\n    feedbackItems.forEach(item => {\n      if (!item.user_role) return;\n      \n      if (!nodeMap.personas[item.user_role]) {\n        const personaId = `persona-${Date.now()}-${Object.keys(nodeMap.personas).length}`;\n        const personaNode = {\n          id: personaId,\n          name: item.user_role,\n          type: \"persona\",\n          feedbackCount: 1\n        };\n        \n        newGraph.nodes.push(personaNode);\n        nodeMap.personas[item.user_role] = personaNode;\n        console.log(`Created persona node: ${item.user_role}`);\n      } else {\n        // Increment feedback count for existing persona\n        nodeMap.personas[item.user_role].feedbackCount += 1;\n      }\n    });\n    \n    // Step 2: Process each feedback to identify themes\n    // Use chunks to avoid overwhelming the system\n    console.log(\"Processing feedback to identify themes...\");\n    const processChunks = async () => {\n      const chunkSize = 5; // Process 5 at a time\n      const chunks = [];\n      \n      // Split feedback into chunks\n      for (let i = 0; i < feedbackItems.length; i += chunkSize) {\n        chunks.push(feedbackItems.slice(i, i + chunkSize));\n      }\n      \n      // Process each chunk\n      for (let i = 0; i < chunks.length; i++) {\n        const chunk = chunks[i];\n        console.log(`Processing chunk ${i+1} of ${chunks.length}...`);\n        \n        // Process items in this chunk\n        for (const item of chunk) {\n          if (!item.text || !item.user_role) continue;\n          \n          try {\n            // Attempt to use the AI classification service\n            console.log(`Classifying: \"${item.text.substring(0, 30)}...\"`);\n            let result;\n            \n            try {\n              // Try AI service first\n              result = await classifyFeedback(item.text);\n              console.log(\"AI classification result:\", result);\n            } catch (aiError) {\n              // If AI fails, use fallback classification\n              console.warn(\"AI classification failed, using fallback:\", aiError);\n              result = mockClassifyFeedback(item.text);\n              console.log(\"Fallback classification result:\", result);\n            }\n            \n            if (result) {\n              // Create feedback node with sentiment\n              const feedbackId = `feedback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n              const feedbackNode = {\n                id: feedbackId,\n                name: item.text.substring(0, 30) + \"...\",\n                text: item.text,\n                type: \"feedback\",\n                user_role: item.user_role,\n                timestamp: item.timestamp || new Date().toISOString(),\n                sentiment: result.sentiment || \"Neutral\" // Store sentiment\n              };\n              \n              // ... rest of your node creation code\n              newGraph.nodes.push(feedbackNode);\n              nodeMap.personas[item.user_role] = feedbackNode;\n              console.log(`Created feedback node: ${item.user_role}`);\n            }\n          } catch (err) {\n            console.error(\"Error processing feedback item:\", err);\n          }\n        }\n        \n        // Update graph data every chunk to show progress\n        if (i < chunks.length - 1) {\n          setGraphData({...newGraph});\n          // Small delay to allow UI to update\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      }\n      \n      // Step 3: Generate feature suggestions for top themes\n      console.log(\"Generating feature suggestions...\");\n      const significantThemes = Object.values(nodeMap.themes)\n        .filter(theme => theme.feedbackCount >= 2)\n        .sort((a, b) => b.feedbackCount - a.feedbackCount)\n        .slice(0, 5); // Top 5 themes\n      \n      console.log(`Found ${significantThemes.length} significant themes for feature generation`);\n      \n      for (const theme of significantThemes) {\n        try {\n          // Get feedback related to this theme\n          const relatedFeedback = feedbackItems.filter(item => {\n            const text = item.text.toLowerCase();\n            return text.includes(theme.name.toLowerCase());\n          }).map(item => item.text);\n          \n          // Generate feature ideas\n          console.log(`Generating features for theme \"${theme.name}\" with ${relatedFeedback.length} feedback items`);\n          let featureIdeas;\n          \n          try {\n            // Try AI service first\n            featureIdeas = await generateFeatureIdeas(theme.name, relatedFeedback);\n            console.log(\"AI generated feature ideas:\", featureIdeas);\n          } catch (aiError) {\n            // If AI fails, use mock generation\n            console.warn(\"AI feature generation failed, using fallback:\", aiError);\n            featureIdeas = mockGenerateFeatureIdeas(theme.name, relatedFeedback);\n            console.log(\"Fallback feature ideas:\", featureIdeas);\n          }\n          \n          if (featureIdeas && featureIdeas.length > 0) {\n            // Create feature nodes\n            for (const idea of featureIdeas) {\n              const featureId = `feature-${Date.now()}-${Object.keys(nodeMap.features).length}`;\n              const featureNode = {\n                id: featureId,\n                name: idea.name,\n                description: idea.description || \"\",\n                type: \"feature\",\n                priority: idea.priority || \"Medium\"\n              };\n              \n              newGraph.nodes.push(featureNode);\n              nodeMap.features[featureNode.name] = featureNode;\n              console.log(`Created feature: ${featureNode.name}`);\n              \n              // Link feature to theme\n              newGraph.links.push({\n                source: theme.id,\n                target: featureId,\n                strength: 0.8\n              });\n              \n              // Find personas connected to this theme\n              newGraph.links.forEach(link => {\n                const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n                const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n                \n                if ((sourceId === theme.id || targetId === theme.id)) {\n                  const personaId = sourceId === theme.id ? targetId : sourceId;\n                  const personaNode = newGraph.nodes.find(n => n.id === personaId && n.type === 'persona');\n                  \n                  if (personaNode) {\n                    // Link persona to feature\n                    const existingLink = newGraph.links.some(l => \n                      (l.source === personaId && l.target === featureId) ||\n                      (l.source === featureId && l.target === personaId)\n                    );\n                    \n                    if (!existingLink) {\n                      newGraph.links.push({\n                        source: personaId,\n                        target: featureId,\n                        strength: 0.6\n                      });\n                      console.log(`Connected persona \"${personaNode.name}\" to feature \"${featureNode.name}\"`);\n                    }\n                  }\n                }\n              });\n            }\n          }\n        } catch (err) {\n          console.error(`Error generating features for theme \"${theme.name}\":`, err);\n        }\n      }\n      \n      // Ensure we have at least some features if none were generated\n      if (newGraph.nodes.filter(n => n.type === 'feature').length === 0) {\n        console.log(\"No features were generated - creating fallback features\");\n        \n        // Create a fallback feature for each major theme\n        for (const theme of significantThemes.slice(0, 3)) {\n          const featureId = `feature-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n          const featureNode = {\n            id: featureId,\n            name: `${theme.name} Improvement`,\n            type: \"feature\",\n            priority: theme.feedbackCount >= 5 ? \"High\" : \"Medium\",\n            fallback: true\n          };\n          \n          newGraph.nodes.push(featureNode);\n          console.log(`Created fallback feature: ${featureNode.name}`);\n          \n          // Link to theme\n          newGraph.links.push({\n            source: theme.id,\n            target: featureId,\n            strength: 0.8\n          });\n        }\n      }\n      \n      // Final graph update\n      console.log(\"Finalizing graph...\");\n      console.log(\"Final graph has:\", newGraph.nodes.length, \"nodes and\", newGraph.links.length, \"links\");\n      console.log(\"Nodes by type:\", {\n        personas: newGraph.nodes.filter(n => n.type === 'persona').length,\n        themes: newGraph.nodes.filter(n => n.type === 'theme').length,\n        features: newGraph.nodes.filter(n => n.type === 'feature').length\n      });\n      \n      setGraphData(newGraph);\n      \n      // Pre-compute positions for better visualization\n      setTimeout(() => {\n        if (simulationRef.current) {\n          simulationRef.current.stop();\n          \n          // Create a temporary simulation to calculate positions\n          const tempSimulation = d3.forceSimulation(newGraph.nodes)\n            .force(\"link\", d3.forceLink(newGraph.links).id(d => d.id).distance(100))\n            .force(\"charge\", d3.forceManyBody().strength(-300))\n            .force(\"center\", d3.forceCenter(dimensions.width/2, dimensions.height/2))\n            .force(\"collide\", d3.forceCollide(40));\n          \n          // Run several ticks to get a good initial layout\n          for (let i = 0; i < 100; i++) {\n            tempSimulation.tick();\n          }\n          \n          tempSimulation.stop();\n        }\n        \n        setIsAIProcessing(false);\n        setLoading(false);\n        console.log(\"Import processing complete\");\n      }, 100);\n    };\n    \n    // Start the processing\n    processChunks().catch(err => {\n      console.error(\"Error in processChunks:\", err);\n      setError(\"Error processing feedback. Please try again.\");\n      setIsAIProcessing(false);\n      setLoading(false);\n    });\n  }, [dimensions]);\n\n  // Add a new node (theme or feature)\n  const handleAddNode = useCallback(() => {\n    if (!newNodeName.trim()) {\n      alert(\"Please enter a node name\");\n      return;\n    }\n    \n    let newNode;\n    \n    if (modalType === 'theme') {\n      newNode = {\n        id: `theme-${Date.now()}`,\n        name: newNodeName,\n        type: \"theme\",\n        feedbackCount: newNodeFeedbackCount\n      };\n    } else if (modalType === 'feature') {\n      newNode = {\n        id: `feature-${Date.now()}`,\n        name: newNodeName,\n        type: \"feature\",\n        priority: newNodePriority\n      };\n    }\n    \n    if (newNode) {\n      setGraphData(prevData => ({\n        nodes: [...prevData.nodes, newNode],\n        links: [...prevData.links]\n      }));\n      \n      setShowModal(false);\n      setNewNodeName('');\n      setNewNodeFeedbackCount(10);\n      setNewNodePriority('Medium');\n    }\n  }, [modalType, newNodeName, newNodeFeedbackCount, newNodePriority]);\n\n  // Handle node selection and display node details\n  const handleNodeClick = useCallback((node) => {\n    if (!node) return;\n    \n    // Find connected nodes\n    const connectedLinks = graphData.links.filter(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === node.id || targetId === node.id;\n    });\n    \n    const connectedNodeIds = connectedLinks.map(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      return sourceId === node.id ? targetId : sourceId;\n    });\n    \n    const connectedNodes = graphData.nodes.filter(n => connectedNodeIds.includes(n.id));\n    \n    // Prepare insights\n    let insights = {\n      results: [],\n      nodeType: node.type,\n      nodeId: node.id\n    };\n    \n    if (node.type === \"theme\") {\n      // Theme view\n      insights.theme = node.name;\n      insights.feedbackCount = node.feedbackCount || 0;\n      \n      // Connected features\n      const connectedFeatures = connectedNodes.filter(n => n.type === \"feature\");\n      if (connectedFeatures.length > 0) {\n        insights.connectedFeatures = connectedFeatures;\n      }\n      \n      // Connected personas\n      const connectedPersonas = connectedNodes.filter(n => n.type === \"persona\");\n      if (connectedPersonas.length > 0) {\n        insights.connectedPersonas = connectedPersonas;\n      }\n      \n      // Find feedback related to this theme\n      if (feedbackItems.length > 0) {\n        // For themes, we need to find feedback that might be related\n        // This is a simple string matching approach, but could be enhanced\n        const relatedFeedback = feedbackItems.filter(item => \n          item.text.toLowerCase().includes(node.name.toLowerCase())\n        );\n        \n        if (relatedFeedback.length > 0) {\n          insights.relatedFeedback = relatedFeedback.map((item) => ({\n            text: item.text,\n            user_role: item.user_role,\n            timestamp: item.timestamp\n          }));\n        }\n      }\n    } else if (node.type === \"feature\") {\n      // Feature view\n      insights.isFeatureView = true;\n      insights.name = node.name;\n      insights.priority = node.priority || \"Medium\";\n      insights.description = node.description || \"\";\n      \n      // Connected themes\n      const connectedThemes = connectedNodes.filter(n => n.type === \"theme\");\n      if (connectedThemes.length > 0) {\n        insights.connectedThemes = connectedThemes;\n      }\n      \n      // Connected personas\n      const connectedPersonas = connectedNodes.filter(n => n.type === \"persona\");\n      if (connectedPersonas.length > 0) {\n        insights.connectedPersonas = connectedPersonas;\n      }\n    } else if (node.type === \"persona\") {\n      // Persona view\n      insights.persona = node.name;\n      insights.feedbackCount = node.feedbackCount || 0;\n      \n      // Connected themes\n      const connectedThemes = connectedNodes.filter(n => n.type === \"theme\");\n      if (connectedThemes.length > 0) {\n        insights.connectedThemes = connectedThemes;\n      }\n      \n      // Connected features\n      const connectedFeatures = connectedNodes.filter(n => n.type === \"feature\");\n      if (connectedFeatures.length > 0) {\n        insights.connectedFeatures = connectedFeatures;\n      }\n      \n      // Find feedback from this persona\n      if (feedbackItems.length > 0) {\n        const personaFeedback = feedbackItems.filter(item => \n          item.user_role === node.name\n        );\n        \n        if (personaFeedback.length > 0) {\n          insights.results = personaFeedback.map((item) => ({\n            text: item.text,\n            user_role: item.user_role,\n            timestamp: item.timestamp || new Date().toISOString()\n          }));\n        }\n      }\n    } else if (node.type === \"feedback\") {\n      // Feedback node view - ensure we get the complete feedback text\n      insights.isFeedbackView = true;\n      \n      // Debug: Print the node object to console\n      console.log('Feedback node clicked:', node);\n      \n      // Get the full text - prioritizing full versions and checking all possible properties\n      // Note: The order here is important - put the most likely to contain full text first\n      insights.feedbackText = node.fullText || node.originalText || node.completeText || \n                             node.text || node.content || node.feedback || node.description || \n                             node.title || node.name || \"\";\n      \n      // If we have access to feedbackItems array, try to find a matching item with full text\n      if (feedbackItems && feedbackItems.length > 0) {\n        // Try to find a matching feedback item by id or text\n        const matchingItem = feedbackItems.find(item => \n          (item.id === node.id) || \n          (item.text && node.text && item.text.includes(node.text)) ||\n          (item.text && node.name && item.text.includes(node.name))\n        );\n        \n        if (matchingItem && matchingItem.text) {\n          // Use the full text from the matching item\n          insights.feedbackText = matchingItem.text;\n          \n          // Also update user role and timestamp if available\n          if (matchingItem.user_role) {\n            insights.user_role = matchingItem.user_role;\n          }\n          if (matchingItem.timestamp) {\n            insights.timestamp = matchingItem.timestamp;\n          }\n        }\n      }\n      \n      // Always prefer the node's user_role if available\n      insights.user_role = node.user_role || node.persona || node.role || insights.user_role || \"Unknown User\";\n      insights.timestamp = node.timestamp || node.date || node.created_at || new Date().toISOString();\n      \n      // Get related themes if available\n      if (node.themes) {\n        insights.relatedThemes = node.themes;\n      } else {\n        // Try to find related themes from connections\n        const relatedThemes = connectedNodes\n          .filter(n => n.type === \"theme\")\n          .map(n => n.name);\n        \n        if (relatedThemes.length > 0) {\n          insights.relatedThemes = relatedThemes;\n        }\n      }\n      \n      // Get sentiment if available\n      if (node.sentiment) {\n        insights.sentiment = node.sentiment;\n      }\n    }\n    \n    // Update insights and show panel\n    setAIInsights(insights);\n    setShowAIInsightsPanel(true);\n    \n    // Ensure mini-map is recreated if it should be visible\n    if (showMiniMap) {\n      // Use setTimeout to ensure this happens after the current render cycle\n      setTimeout(() => {\n        // Call the function directly instead of using a reference\n        if (svgRef.current) {\n          d3.select(svgRef.current).selectAll(\".mini-map-container\").remove();\n          createMiniMap();\n        }\n      }, 0);\n    }\n  }, [graphData, feedbackItems, showMiniMap]);\n\n  // Create a connection between nodes\n  const handleConnectionSubmit = useCallback(() => {\n    if (!connectionSource || !connectionTarget) return;\n    \n    // Check if connection already exists\n    const existingConnection = graphData.links.some(link => {\n      const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n      const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n      \n      return (sourceId === connectionSource.id && targetId === connectionTarget) || \n             (sourceId === connectionTarget && targetId === connectionSource.id);\n    });\n    \n    if (!existingConnection) {\n      const newLink = {\n        source: connectionSource.id,\n        target: connectionTarget,\n        strength: connectionStrength\n      };\n      \n      setGraphData(prevData => ({\n        ...prevData,\n        links: [...prevData.links, newLink]\n      }));\n    }\n    \n    setShowConnectionModal(false);\n    setConnectionSource(null);\n    setConnectionTarget('');\n    setConnectionStrength(0.5);\n  }, [connectionSource, connectionTarget, connectionStrength, graphData]);\n\n  // Initialize connection creation\n  const connectNodes = useCallback(() => {\n    if (!selectedNode) return;\n    \n    // Find suitable targets (different type than selected node)\n    const targets = graphData.nodes.filter(n => n.id !== selectedNode.id && n.type !== selectedNode.type);\n    \n    if (targets.length === 0) {\n      alert(\"No compatible nodes found to connect with.\");\n      return;\n    }\n    \n    setConnectionSource(selectedNode);\n    setAvailableTargets(targets);\n    setConnectionTarget(targets[0].id);\n    setConnectionStrength(0.5);\n    setShowConnectionModal(true);\n  }, [selectedNode, graphData]);\n\n  // Export the current graph data\n  const exportData = useCallback(() => {\n    const dataStr = JSON.stringify(graphData, null, 2);\n    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n    \n    const exportFileDefaultName = 'feedback-insights-data.json';\n    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileDefaultName);\n    linkElement.click();\n  }, [graphData]);\n\n  // Reset to initial data\n  const resetVisualization = useCallback(() => {\n    if (window.confirm(\"Are you sure you want to reset? This will remove all custom data.\")) {\n      setGraphData(initialData);\n      setSelectedNode(null);\n      setHighlightMode('none');\n    }\n  }, []);\n\n  // Handle adding new feedback with better visualization\n  const handleAddFeedback = useCallback(async () => {\n    if (!newFeedback || !newFeedbackRole) {\n      setAIError(\"Please provide both feedback text and user role.\");\n      return;\n    }\n    \n    setIsAIProcessing(true);\n    setAIError(null);\n    \n    try {\n      // Analyze sentiment\n      let sentiment = \"Neutral\";\n      try {\n        const result = await classifyFeedback(newFeedback);\n        sentiment = result.sentiment || \"Neutral\";\n      } catch (error) {\n        // Use fallback\n        const fallbackResult = mockClassifyFeedback(newFeedback);\n        sentiment = fallbackResult.sentiment || \"Neutral\";\n      }\n      \n      // Create a new feedback node\n      const feedbackId = `feedback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Add the new feedback node\n      setGraphData(prevData => ({\n        ...prevData,\n        nodes: [\n          ...prevData.nodes,\n          {\n            id: feedbackId,\n            name: newFeedback.substring(0, 30) + \"...\",\n            text: newFeedback,\n            type: \"feedback\",\n            user_role: newFeedbackRole,\n            timestamp: new Date().toISOString(),\n            sentiment: sentiment // Store the sentiment\n          }\n        ]\n      }));\n      \n      // If the user selected a specific theme, connect to it directly\n      if (selectedThemeForFeedback) {\n        const selectedTheme = graphData.nodes.find(node => node.id === selectedThemeForFeedback);\n        if (selectedTheme) {\n          // Connect to the selected theme\n          connectFeedbackToThemeById(feedbackId, selectedThemeForFeedback);\n          setIsAIProcessing(false);\n        }\n      } else {\n        // No theme selected - use AI or fallback as before\n        try {\n          // First try to use the AI service if available\n          classifyFeedback(newFeedback)\n            .then(classification => {\n              // Successfully classified with AI\n              connectFeedbackToTheme(feedbackId, classification.theme);\n              setIsAIProcessing(false);\n            })\n            .catch(error => {\n              console.warn(\"AI classification failed, using fallback:\", error);\n              // Use fallback classification\n              const fallbackClassification = mockClassifyFeedback(newFeedback);\n              connectFeedbackToTheme(feedbackId, fallbackClassification.theme);\n              setIsAIProcessing(false);\n            });\n        } catch (error) {\n          console.error(\"Error in feedback processing:\", error);\n          // Still use fallback even if there's an error\n          const fallbackClassification = mockClassifyFeedback(newFeedback);\n          connectFeedbackToTheme(feedbackId, fallbackClassification.theme);\n          setIsAIProcessing(false);\n          setAIError(\"Error processing feedback, but added with basic classification\");\n        }\n      }\n      \n      // Reset form fields\n      setShowFeedbackModal(false);\n      setNewFeedback('');\n      setNewFeedbackRole('');\n      setSelectedThemeForFeedback('');\n    } catch (error) {\n      // ... error handling\n    }\n  }, [newFeedback, newFeedbackRole, selectedThemeForFeedback]);\n\n  // First, let's define connectFeedbackToPersona before it's used\n  const connectFeedbackToPersona = useCallback((feedbackId, roleName) => {\n    // Skip if no role name\n    if (!roleName) return;\n    \n    // Check if persona exists\n    let personaNode = graphData.nodes.find(node => \n      node.type === \"persona\" && node.name.toLowerCase() === roleName.toLowerCase()\n    );\n    \n    // If persona doesn't exist, create it\n    if (!personaNode) {\n      personaNode = {\n        id: `persona-${roleName.replace(/\\s+/g, '-').toLowerCase()}`,\n        name: roleName,\n        type: \"persona\"\n      };\n      \n      // Add the new persona node\n      setGraphData(prevData => ({\n        nodes: [...prevData.nodes, personaNode],\n        links: [...prevData.links]\n      }));\n    }\n    \n    // Add connection between feedback and persona\n    setGraphData(prevData => {\n      // Create the new link\n      const newLink = {\n        source: feedbackId,\n        target: personaNode.id,\n        strength: 0.5\n      };\n      \n      // Add link only if it doesn't already exist\n      const linkExists = prevData.links.some(link => {\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n        return (sourceId === feedbackId && targetId === personaNode.id) || \n               (sourceId === personaNode.id && targetId === feedbackId);\n      });\n      \n      return {\n        nodes: prevData.nodes,\n        links: linkExists ? prevData.links : [...prevData.links, newLink]\n      };\n    });\n  }, [graphData]);\n  \n  // Then define connectFeedbackToTheme with a proper implementation\n  const connectFeedbackToTheme = useCallback((feedbackId, themeName) => {\n    // Check if theme exists\n    let themeNode = graphData.nodes.find(node => \n      node.type === \"theme\" && node.name.toLowerCase() === themeName.toLowerCase()\n    );\n    \n    // If theme doesn't exist, create it\n    if (!themeNode) {\n      themeNode = {\n        id: `theme-${themeName.replace(/\\s+/g, '-').toLowerCase()}`,\n        name: themeName,\n        type: \"theme\",\n        feedbackCount: 1\n      };\n      \n      // Add the new theme node\n      setGraphData(prevData => ({\n        nodes: [...prevData.nodes, themeNode],\n        links: [...prevData.links]\n      }));\n    } else {\n      // Update theme's feedback count\n      setGraphData(prevData => ({\n        ...prevData,\n        nodes: prevData.nodes.map(node => \n          node.id === themeNode.id \n            ? { ...node, feedbackCount: (node.feedbackCount || 0) + 1 }\n            : node\n        )\n      }));\n    }\n    \n    // Add connection between feedback and theme\n    setGraphData(prevData => {\n      // Create the new link\n      const newLink = {\n        source: feedbackId,\n        target: themeNode.id,\n        strength: 0.7\n      };\n      \n      // Add link only if it doesn't already exist\n      const linkExists = prevData.links.some(link => {\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n        return (sourceId === feedbackId && targetId === themeNode.id) || \n               (sourceId === themeNode.id && targetId === feedbackId);\n      });\n      \n      return {\n        nodes: prevData.nodes,\n        links: linkExists ? prevData.links : [...prevData.links, newLink]\n      };\n    });\n    \n    // If the user role is provided, try to connect to a persona\n    const feedbackNode = graphData.nodes.find(n => n.id === feedbackId);\n    if (feedbackNode && feedbackNode.user_role) {\n      connectFeedbackToPersona(feedbackId, feedbackNode.user_role);\n    }\n    \n    // Restart the simulation to reposition nodes\n    if (simulationRef.current) {\n      simulationRef.current.alpha(0.3).restart();\n    }\n  }, []);\n  \n  // And finally connectFeedbackToThemeById with a proper implementation\n  const connectFeedbackToThemeById = useCallback((feedbackId, themeId) => {\n    // Find the theme node\n    const themeNode = graphData.nodes.find(node => node.id === themeId);\n    if (!themeNode) return;\n    \n    // Update theme's feedback count\n    setGraphData(prevData => ({\n      ...prevData,\n      nodes: prevData.nodes.map(node => \n        node.id === themeId \n          ? { ...node, feedbackCount: (node.feedbackCount || 0) + 1 }\n          : node\n      )\n    }));\n    \n    // Add connection between feedback and theme\n    setGraphData(prevData => {\n      // Create the new link\n      const newLink = {\n        source: feedbackId,\n        target: themeId,\n        strength: 0.7\n      };\n      \n      // Add link only if it doesn't already exist\n      const linkExists = prevData.links.some(link => {\n        const sourceId = typeof link.source === 'object' ? link.source.id : link.source;\n        const targetId = typeof link.target === 'object' ? link.target.id : link.target;\n        return (sourceId === feedbackId && targetId === themeId) || \n               (sourceId === themeId && targetId === feedbackId);\n      });\n      \n      return {\n        nodes: prevData.nodes,\n        links: linkExists ? prevData.links : [...prevData.links, newLink]\n      };\n    });\n    \n    // If the user role is provided, try to connect to a persona\n    const feedbackNode = graphData.nodes.find(n => n.id === feedbackId);\n    if (feedbackNode && feedbackNode.user_role) {\n      connectFeedbackToPersona(feedbackId, feedbackNode.user_role);\n    }\n    \n    // Restart the simulation to reposition nodes\n    if (simulationRef.current) {\n      simulationRef.current.alpha(0.3).restart();\n    }\n  }, []);\n\n  // Zoom control functions\n  const zoomIn = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    \n    const svg = d3.select(svgRef.current);\n    const currentTransform = d3.zoomTransform(svg.node());\n    \n    svg.transition()\n      .duration(300)\n      .call(\n        zoomRef.current.transform,\n        d3.zoomIdentity\n          .translate(currentTransform.x, currentTransform.y)\n          .scale(currentTransform.k * 1.3)\n      );\n  }, []);\n\n  const zoomOut = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    \n    const svg = d3.select(svgRef.current);\n    const currentTransform = d3.zoomTransform(svg.node());\n    \n    svg.transition()\n      .duration(300)\n      .call(\n        zoomRef.current.transform,\n        d3.zoomIdentity\n          .translate(currentTransform.x, currentTransform.y)\n          .scale(currentTransform.k / 1.3)\n      );\n  }, []);\n\n  const centerView = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current) return;\n    \n    const svg = d3.select(svgRef.current);\n    \n    // Calculate the center point\n    const centerX = dimensions.width / 2;\n    const centerY = dimensions.height / 2;\n    \n    // Create a transform that centers the view\n    const transform = d3.zoomIdentity\n      .translate(centerX, centerY)\n      .scale(1)\n      .translate(-centerX, -centerY);\n    \n    // Apply the transform with a smooth transition\n    svg.transition()\n      .duration(750)\n      .call(zoomRef.current.transform, transform);\n  }, [dimensions]);\n\n  const fitToScreen = useCallback(() => {\n    if (!svgRef.current || !zoomRef.current || !graphData.nodes.length) return;\n    \n    const svg = d3.select(svgRef.current);\n    \n    // Find the bounds of all nodes\n    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\n    \n    graphData.nodes.forEach(node => {\n      if (!node.x || !node.y) return;\n      \n      if (node.x < minX) minX = node.x;\n      if (node.y < minY) minY = node.y;\n      if (node.x > maxX) maxX = node.x;\n      if (node.y > maxY) maxY = node.y;\n    });\n    \n    // If we don't have valid bounds, center view instead\n    if (!isFinite(minX) || !isFinite(minY) || !isFinite(maxX) || !isFinite(maxY)) {\n      centerView();\n      return;\n    }\n    \n    // Add padding\n    const padding = 50;\n    minX -= padding;\n    minY -= padding;\n    maxX += padding;\n    maxY += padding;\n    \n    // Calculate width and height of the content\n    const contentWidth = maxX - minX;\n    const contentHeight = maxY - minY;\n    \n    // Calculate scale to fit the content\n    const scale = Math.min(\n      dimensions.width / contentWidth,\n      dimensions.height / contentHeight,\n      2 // Maximum scale factor\n    ) * 0.9; // 90% to add some margin\n    \n    // Calculate the center of the content\n    const centerX = (minX + maxX) / 2;\n    const centerY = (minY + maxY) / 2;\n    \n    // Create a transform that centers and scales the content\n    const transform = d3.zoomIdentity\n      .translate(dimensions.width / 2, dimensions.height / 2)\n      .scale(scale)\n      .translate(-centerX, -centerY);\n    \n    // Apply the transform with a smooth transition\n    svg.transition()\n      .duration(750)\n      .call(zoomRef.current.transform, transform);\n  }, [dimensions, graphData.nodes, centerView]);\n\n  // Toggle mini-map visibility\n  const toggleMiniMap = useCallback(() => {\n    setShowMiniMap(!showMiniMap);\n  }, [showMiniMap]);\n\n  const handleDataImported = (importedData) => {\n    if (importedData) {\n      setGraphData({ \n        nodes: importedData.nodes || [], \n        links: importedData.links || [] \n      });\n      setInsights(importedData.insights || []);\n    }\n  };\n\n  // Define the Legend component inside UserResearchNetwork.js\n  const LegendComponent = () => {\n    return (\n      <div className=\"absolute left-4 bottom-20 bg-white p-3 rounded-lg shadow-md border border-gray-200 z-10\">\n        <h3 className=\"text-sm font-semibold mb-2\">Legend</h3>\n        \n        <div className=\"space-y-2\">\n          <div className=\"space-y-1\">\n            <h4 className=\"text-xs font-medium text-gray-700\">Node Types</h4>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: \"#3182CE\" }}></div>\n              <span className=\"text-xs\">Theme</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: \"#38A169\" }}></div>\n              <span className=\"text-xs\">Feedback</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: \"#DD6B20\" }}></div>\n              <span className=\"text-xs\">User Role</span>\n            </div>\n          </div>\n          \n          <div className=\"space-y-1 pt-2 border-t border-gray-200\">\n            <h4 className=\"text-xs font-medium text-gray-700\">Feedback Sentiment</h4>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: sentimentColorScale[\"Positive\"] }}></div>\n              <span className=\"text-xs\">Positive</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: sentimentColorScale[\"Negative\"] }}></div>\n              <span className=\"text-xs\">Negative</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: sentimentColorScale[\"Neutral\"] }}></div>\n              <span className=\"text-xs\">Neutral</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Load initial data\n  useEffect(() => {\n    if (!loading && graphData.nodes.length === 0) {\n      setGraphData(initialData);\n    }\n  }, [loading, graphData.nodes.length]);\n\n  // Loading screen\n  if (loading) {\n    return (\n      <div className=\"flex flex-col h-full items-center justify-center bg-gray-50\">\n        <div className=\"text-2xl text-blue-800 mb-4\">Loading Insights Network...</div>\n        <div className=\"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n\n  // Error screen\n  if (error) {\n    return (\n      <div className=\"flex flex-col h-full items-center justify-center bg-gray-50\">\n        <div className=\"text-2xl text-red-800 mb-4\">Error Loading Data</div>\n        <div className=\"text-gray-600\">{error}</div>\n        <button \n          className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          onClick={() => window.location.reload()}\n        >\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative w-full h-full\" ref={containerRef}>\n      <svg ref={svgRef} className=\"w-full h-full\"></svg>\n      \n      {/* Use the inline Legend component */}\n      <LegendComponent />\n      \n      {/* Zoom controls */}\n      <div className=\"absolute bottom-4 right-4 flex space-x-2\">\n        <button \n          className=\"w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded-full\"\n          onClick={zoomIn}\n        >\n          <span className=\"text-xl\">+</span>\n        </button>\n        <button \n          className=\"w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded-full\"\n          onClick={zoomOut}\n        >\n          <span className=\"text-xl\">-</span>\n        </button>\n        <button \n          className=\"w-8 h-8 flex items-center justify-center bg-gray-100 hover:bg-gray-200 rounded-full\"\n          onClick={fitToScreen}\n        >\n          <span className=\"text-xl\">⊡</span>\n        </button>\n      </div>\n      \n      {/* Rest of your UI components */}\n    </div>\n  );\n};\n\nexport default UserResearchNetwork;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}