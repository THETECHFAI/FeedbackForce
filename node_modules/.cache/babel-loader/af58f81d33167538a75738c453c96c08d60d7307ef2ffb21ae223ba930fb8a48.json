{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\n\n/**\n * Process feedback data to extract themes and create visualization data\n * @param {Array} feedbackData - The raw feedback data array\n * @returns {Object} Object containing nodes, links, and AI insights\n */\nexport const processFeedbackData = feedbackData => {\n  if (!feedbackData || !Array.isArray(feedbackData)) {\n    console.error('Invalid feedback data format');\n    return {\n      nodes: [],\n      links: [],\n      insights: []\n    };\n  }\n\n  // Extract themes using simple keyword analysis\n  const themes = extractThemes(feedbackData);\n\n  // Create nodes for each feedback item and theme\n  const nodes = createNodes(feedbackData, themes);\n\n  // Create links between feedback and related themes\n  const links = createLinks(feedbackData, themes, nodes);\n\n  // Generate AI insights from the feedback\n  const insights = generateInsights(feedbackData, themes);\n  return {\n    nodes,\n    links,\n    insights\n  };\n};\n\n/**\n * Extract potential themes from feedback texts using keyword analysis\n */\nconst extractThemes = feedbackData => {\n  // Common keywords that might indicate themes\n  const themeKeywords = {\n    'performance': ['slow', 'fast', 'speed', 'loading', 'load', 'wait', 'quick', 'performance'],\n    'usability': ['easy', 'difficult', 'intuitive', 'confusing', 'user-friendly', 'complicated'],\n    'design': ['layout', 'design', 'look', 'visual', 'interface', 'UI', 'appearance'],\n    'functionality': ['feature', 'function', 'working', 'broken', 'capability'],\n    'data': ['information', 'data', 'metrics', 'statistics', 'numbers', 'dashboard']\n  };\n  const themeFrequency = {};\n\n  // Count occurrences of theme keywords in feedback\n  feedbackData.forEach(feedback => {\n    const text = feedback.text.toLowerCase();\n    Object.entries(themeKeywords).forEach(([theme, keywords]) => {\n      if (keywords.some(keyword => text.includes(keyword))) {\n        themeFrequency[theme] = (themeFrequency[theme] || 0) + 1;\n      }\n    });\n  });\n\n  // Return themes that appear at least once\n  return Object.keys(themeFrequency).filter(theme => themeFrequency[theme] > 0);\n};\n\n/**\n * Create nodes for visualization\n */\nconst createNodes = (feedbackData, themes) => {\n  const nodes = [];\n\n  // Create theme nodes\n  themes.forEach(theme => {\n    nodes.push({\n      id: `theme-${theme}`,\n      type: 'theme',\n      name: theme.charAt(0).toUpperCase() + theme.slice(1),\n      label: theme.charAt(0).toUpperCase() + theme.slice(1),\n      feedbackCount: 10,\n      value: 30,\n      group: 'theme'\n    });\n  });\n\n  // Create persona nodes from feedback user_roles\n  const uniqueRoles = [...new Set(feedbackData.map(item => item.user_role).filter(Boolean))];\n  uniqueRoles.forEach(role => {\n    nodes.push({\n      id: `persona-${role.replace(/\\s+/g, '-').toLowerCase()}`,\n      type: 'persona',\n      name: role,\n      label: role,\n      value: 15,\n      group: 'persona'\n    });\n  });\n\n  // Create feedback nodes\n  feedbackData.forEach(feedback => {\n    nodes.push({\n      id: feedback.id,\n      type: 'feedback',\n      name: truncateText(feedback.text, 30),\n      label: truncateText(feedback.text, 30),\n      title: feedback.text,\n      value: 15,\n      group: feedback.user_role || 'unknown',\n      timestamp: feedback.timestamp,\n      user_role: feedback.user_role\n    });\n  });\n  return nodes;\n};\n\n/**\n * Create links between nodes\n */\nconst createLinks = (feedbackData, themes, nodes) => {\n  const links = [];\n  const themeKeywords = {\n    'performance': ['slow', 'fast', 'speed', 'loading', 'load', 'wait', 'quick', 'performance'],\n    'usability': ['easy', 'difficult', 'intuitive', 'confusing', 'user-friendly', 'complicated'],\n    'design': ['layout', 'design', 'look', 'visual', 'interface', 'UI', 'appearance'],\n    'functionality': ['feature', 'function', 'working', 'broken', 'capability'],\n    'data': ['information', 'data', 'metrics', 'statistics', 'numbers', 'dashboard']\n  };\n\n  // Connect feedback to relevant themes\n  feedbackData.forEach(feedback => {\n    const text = feedback.text.toLowerCase();\n\n    // Connect feedback to themes\n    themes.forEach(theme => {\n      const keywords = themeKeywords[theme];\n      if (keywords && keywords.some(keyword => text.includes(keyword))) {\n        links.push({\n          id: uuidv4(),\n          source: feedback.id,\n          target: `theme-${theme}`,\n          strength: 0.8\n        });\n      }\n    });\n\n    // Connect feedback to persona (user role)\n    if (feedback.user_role) {\n      const personaId = `persona-${feedback.user_role.replace(/\\s+/g, '-').toLowerCase()}`;\n      links.push({\n        id: uuidv4(),\n        source: feedback.id,\n        target: personaId,\n        strength: 0.7\n      });\n    }\n  });\n  return links;\n};\n\n/**\n * Generate AI insights from feedback\n */\nconst generateInsights = (feedbackData, themes) => {\n  const insights = [];\n\n  // Simple insights based on themes\n  if (themes.includes('performance')) {\n    insights.push({\n      id: uuidv4(),\n      title: 'Performance Concerns',\n      description: 'Multiple users have reported performance issues, particularly regarding loading times.'\n    });\n  }\n  if (themes.includes('design')) {\n    insights.push({\n      id: uuidv4(),\n      title: 'Design Appreciation',\n      description: 'Users have positively responded to the new layout and design elements.'\n    });\n  }\n\n  // Add general insight about feedback volume\n  insights.push({\n    id: uuidv4(),\n    title: 'Feedback Overview',\n    description: `Analyzed ${feedbackData.length} pieces of feedback across ${themes.length} key themes.`\n  });\n  return insights;\n};\n\n/**\n * Helper function to truncate text\n */\nconst truncateText = (text, maxLength) => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};\n\n/**\n * Import and process JSON feedback data\n * @param {File|String} source - Either a File object or a JSON string\n * @returns {Promise} Promise that resolves to processed data\n */\nexport const importFeedbackData = async source => {\n  try {\n    let data;\n    if (typeof source === 'string') {\n      // If the source is a JSON string\n      data = JSON.parse(source);\n    } else if (source instanceof File) {\n      // If the source is a File object\n      const text = await readFileAsText(source);\n      data = JSON.parse(text);\n    } else {\n      throw new Error('Invalid source type. Expected File or JSON string.');\n    }\n\n    // If the data is not an array but has a property that is an array\n    if (!Array.isArray(data)) {\n      // Look for a property that might contain the feedback array\n      const possibleArrayProps = Object.keys(data).filter(key => Array.isArray(data[key]));\n      if (possibleArrayProps.length > 0) {\n        data = data[possibleArrayProps[0]];\n      } else {\n        throw new Error('Could not find feedback data array in the imported JSON.');\n      }\n    }\n    return processFeedbackData(data);\n  } catch (error) {\n    console.error('Error importing feedback data:', error);\n    throw error;\n  }\n};\n\n/**\n * Read a file as text\n */\nconst readFileAsText = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsText(file);\n  });\n};","map":{"version":3,"names":["v4","uuidv4","processFeedbackData","feedbackData","Array","isArray","console","error","nodes","links","insights","themes","extractThemes","createNodes","createLinks","generateInsights","themeKeywords","themeFrequency","forEach","feedback","text","toLowerCase","Object","entries","theme","keywords","some","keyword","includes","keys","filter","push","id","type","name","charAt","toUpperCase","slice","label","feedbackCount","value","group","uniqueRoles","Set","map","item","user_role","Boolean","role","replace","truncateText","title","timestamp","source","target","strength","personaId","description","length","maxLength","substring","importFeedbackData","data","JSON","parse","File","readFileAsText","Error","possibleArrayProps","key","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText"],"sources":["/Users/faisalshariff/Feedback Force/src/utils/importData.js"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\n/**\n * Process feedback data to extract themes and create visualization data\n * @param {Array} feedbackData - The raw feedback data array\n * @returns {Object} Object containing nodes, links, and AI insights\n */\nexport const processFeedbackData = (feedbackData) => {\n  if (!feedbackData || !Array.isArray(feedbackData)) {\n    console.error('Invalid feedback data format');\n    return { nodes: [], links: [], insights: [] };\n  }\n\n  // Extract themes using simple keyword analysis\n  const themes = extractThemes(feedbackData);\n  \n  // Create nodes for each feedback item and theme\n  const nodes = createNodes(feedbackData, themes);\n  \n  // Create links between feedback and related themes\n  const links = createLinks(feedbackData, themes, nodes);\n  \n  // Generate AI insights from the feedback\n  const insights = generateInsights(feedbackData, themes);\n  \n  return { nodes, links, insights };\n};\n\n/**\n * Extract potential themes from feedback texts using keyword analysis\n */\nconst extractThemes = (feedbackData) => {\n  // Common keywords that might indicate themes\n  const themeKeywords = {\n    'performance': ['slow', 'fast', 'speed', 'loading', 'load', 'wait', 'quick', 'performance'],\n    'usability': ['easy', 'difficult', 'intuitive', 'confusing', 'user-friendly', 'complicated'],\n    'design': ['layout', 'design', 'look', 'visual', 'interface', 'UI', 'appearance'],\n    'functionality': ['feature', 'function', 'working', 'broken', 'capability'],\n    'data': ['information', 'data', 'metrics', 'statistics', 'numbers', 'dashboard']\n  };\n  \n  const themeFrequency = {};\n  \n  // Count occurrences of theme keywords in feedback\n  feedbackData.forEach(feedback => {\n    const text = feedback.text.toLowerCase();\n    \n    Object.entries(themeKeywords).forEach(([theme, keywords]) => {\n      if (keywords.some(keyword => text.includes(keyword))) {\n        themeFrequency[theme] = (themeFrequency[theme] || 0) + 1;\n      }\n    });\n  });\n  \n  // Return themes that appear at least once\n  return Object.keys(themeFrequency).filter(theme => themeFrequency[theme] > 0);\n};\n\n/**\n * Create nodes for visualization\n */\nconst createNodes = (feedbackData, themes) => {\n  const nodes = [];\n  \n  // Create theme nodes\n  themes.forEach(theme => {\n    nodes.push({\n      id: `theme-${theme}`,\n      type: 'theme',\n      name: theme.charAt(0).toUpperCase() + theme.slice(1),\n      label: theme.charAt(0).toUpperCase() + theme.slice(1),\n      feedbackCount: 10,\n      value: 30,\n      group: 'theme'\n    });\n  });\n  \n  // Create persona nodes from feedback user_roles\n  const uniqueRoles = [...new Set(feedbackData.map(item => item.user_role).filter(Boolean))];\n  uniqueRoles.forEach(role => {\n    nodes.push({\n      id: `persona-${role.replace(/\\s+/g, '-').toLowerCase()}`,\n      type: 'persona',\n      name: role,\n      label: role,\n      value: 15,\n      group: 'persona'\n    });\n  });\n  \n  // Create feedback nodes\n  feedbackData.forEach(feedback => {\n    nodes.push({\n      id: feedback.id,\n      type: 'feedback',\n      name: truncateText(feedback.text, 30),\n      label: truncateText(feedback.text, 30),\n      title: feedback.text,\n      value: 15,\n      group: feedback.user_role || 'unknown',\n      timestamp: feedback.timestamp,\n      user_role: feedback.user_role\n    });\n  });\n  \n  return nodes;\n};\n\n/**\n * Create links between nodes\n */\nconst createLinks = (feedbackData, themes, nodes) => {\n  const links = [];\n  const themeKeywords = {\n    'performance': ['slow', 'fast', 'speed', 'loading', 'load', 'wait', 'quick', 'performance'],\n    'usability': ['easy', 'difficult', 'intuitive', 'confusing', 'user-friendly', 'complicated'],\n    'design': ['layout', 'design', 'look', 'visual', 'interface', 'UI', 'appearance'],\n    'functionality': ['feature', 'function', 'working', 'broken', 'capability'],\n    'data': ['information', 'data', 'metrics', 'statistics', 'numbers', 'dashboard']\n  };\n  \n  // Connect feedback to relevant themes\n  feedbackData.forEach(feedback => {\n    const text = feedback.text.toLowerCase();\n    \n    // Connect feedback to themes\n    themes.forEach(theme => {\n      const keywords = themeKeywords[theme];\n      if (keywords && keywords.some(keyword => text.includes(keyword))) {\n        links.push({\n          id: uuidv4(),\n          source: feedback.id,\n          target: `theme-${theme}`,\n          strength: 0.8\n        });\n      }\n    });\n    \n    // Connect feedback to persona (user role)\n    if (feedback.user_role) {\n      const personaId = `persona-${feedback.user_role.replace(/\\s+/g, '-').toLowerCase()}`;\n      links.push({\n        id: uuidv4(),\n        source: feedback.id,\n        target: personaId,\n        strength: 0.7\n      });\n    }\n  });\n  \n  return links;\n};\n\n/**\n * Generate AI insights from feedback\n */\nconst generateInsights = (feedbackData, themes) => {\n  const insights = [];\n  \n  // Simple insights based on themes\n  if (themes.includes('performance')) {\n    insights.push({\n      id: uuidv4(),\n      title: 'Performance Concerns',\n      description: 'Multiple users have reported performance issues, particularly regarding loading times.'\n    });\n  }\n  \n  if (themes.includes('design')) {\n    insights.push({\n      id: uuidv4(),\n      title: 'Design Appreciation',\n      description: 'Users have positively responded to the new layout and design elements.'\n    });\n  }\n  \n  // Add general insight about feedback volume\n  insights.push({\n    id: uuidv4(),\n    title: 'Feedback Overview',\n    description: `Analyzed ${feedbackData.length} pieces of feedback across ${themes.length} key themes.`\n  });\n  \n  return insights;\n};\n\n/**\n * Helper function to truncate text\n */\nconst truncateText = (text, maxLength) => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};\n\n/**\n * Import and process JSON feedback data\n * @param {File|String} source - Either a File object or a JSON string\n * @returns {Promise} Promise that resolves to processed data\n */\nexport const importFeedbackData = async (source) => {\n  try {\n    let data;\n    \n    if (typeof source === 'string') {\n      // If the source is a JSON string\n      data = JSON.parse(source);\n    } else if (source instanceof File) {\n      // If the source is a File object\n      const text = await readFileAsText(source);\n      data = JSON.parse(text);\n    } else {\n      throw new Error('Invalid source type. Expected File or JSON string.');\n    }\n    \n    // If the data is not an array but has a property that is an array\n    if (!Array.isArray(data)) {\n      // Look for a property that might contain the feedback array\n      const possibleArrayProps = Object.keys(data).filter(key => Array.isArray(data[key]));\n      \n      if (possibleArrayProps.length > 0) {\n        data = data[possibleArrayProps[0]];\n      } else {\n        throw new Error('Could not find feedback data array in the imported JSON.');\n      }\n    }\n    \n    return processFeedbackData(data);\n  } catch (error) {\n    console.error('Error importing feedback data:', error);\n    throw error;\n  }\n};\n\n/**\n * Read a file as text\n */\nconst readFileAsText = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsText(file);\n  });\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}